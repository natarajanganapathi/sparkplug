### YamlMime:XRefMap
sorted: true
references:
- uid: Microsoft.Extensions.DependencyInjection
  name: Microsoft.Extensions.DependencyInjection
  href: api/Microsoft.Extensions.DependencyInjection.html
  commentId: N:Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
- uid: Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions
  name: ApiServiceCollectionExtenstions
  href: api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions
  fullName: Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions
  nameWithType: ApiServiceCollectionExtenstions
- uid: Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.AddTenancyRouteAttribute(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddTenancyRouteAttribute(IServiceCollection)
  href: api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html#Microsoft_Extensions_DependencyInjection_ApiServiceCollectionExtenstions_AddTenancyRouteAttribute_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  commentId: M:Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.AddTenancyRouteAttribute(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.AddTenancyRouteAttribute(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ApiServiceCollectionExtenstions.AddTenancyRouteAttribute(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.AddTenancyRouteAttribute*
  name: AddTenancyRouteAttribute
  href: api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html#Microsoft_Extensions_DependencyInjection_ApiServiceCollectionExtenstions_AddTenancyRouteAttribute_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.AddTenancyRouteAttribute
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.AddTenancyRouteAttribute
  nameWithType: ApiServiceCollectionExtenstions.AddTenancyRouteAttribute
- uid: Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions
  name: GlobalExceptionHandlingMiddlewareExtensions
  href: api/Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions
  fullName: Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions
  nameWithType: GlobalExceptionHandlingMiddlewareExtensions
- uid: Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseGlobalExceptionHandling(IApplicationBuilder)
  href: api/Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.html#Microsoft_Extensions_DependencyInjection_GlobalExceptionHandlingMiddlewareExtensions_UseGlobalExceptionHandling_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling(IApplicationBuilder)
- uid: Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling*
  name: UseGlobalExceptionHandling
  href: api/Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.html#Microsoft_Extensions_DependencyInjection_GlobalExceptionHandlingMiddlewareExtensions_UseGlobalExceptionHandling_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling
  nameWithType: GlobalExceptionHandlingMiddlewareExtensions.UseGlobalExceptionHandling
- uid: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions
  name: HealthCheckServiceCollectionExtensions
  href: api/Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions
  nameWithType: HealthCheckServiceCollectionExtensions
- uid: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.UseHealthChecks(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseHealthChecks(IApplicationBuilder)
  href: api/Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_HealthCheckServiceCollectionExtensions_UseHealthChecks_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.UseHealthChecks(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.UseHealthChecks(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: HealthCheckServiceCollectionExtensions.UseHealthChecks(IApplicationBuilder)
- uid: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.UseHealthChecks*
  name: UseHealthChecks
  href: api/Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_HealthCheckServiceCollectionExtensions_UseHealthChecks_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.UseHealthChecks
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.UseHealthChecks
  nameWithType: HealthCheckServiceCollectionExtensions.UseHealthChecks
- uid: Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions
  name: MvcOptionsExtensions
  href: api/Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions
  fullName: Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions
  nameWithType: MvcOptionsExtensions
- uid: Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.UseCentralRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  name: UseCentralRoutePrefix(MvcOptions, IRouteTemplateProvider)
  href: api/Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.html#Microsoft_Extensions_DependencyInjection_MvcOptionsExtensions_UseCentralRoutePrefix_Microsoft_AspNetCore_Mvc_MvcOptions_Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_
  commentId: M:Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.UseCentralRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions,Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  fullName: Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.UseCentralRoutePrefix(Microsoft.AspNetCore.Mvc.MvcOptions, Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  nameWithType: MvcOptionsExtensions.UseCentralRoutePrefix(MvcOptions, IRouteTemplateProvider)
- uid: Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.UseCentralRoutePrefix*
  name: UseCentralRoutePrefix
  href: api/Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.html#Microsoft_Extensions_DependencyInjection_MvcOptionsExtensions_UseCentralRoutePrefix_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.UseCentralRoutePrefix
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.UseCentralRoutePrefix
  nameWithType: MvcOptionsExtensions.UseCentralRoutePrefix
- uid: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions
  name: SwaggerServiceCollectionExtensions
  href: api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions
  fullName: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions
  nameWithType: SwaggerServiceCollectionExtensions
- uid: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddSwagger(IServiceCollection)
  href: api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_SwaggerServiceCollectionExtensions_AddSwagger_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  commentId: M:Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.AddSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: SwaggerServiceCollectionExtensions.AddSwagger(IServiceCollection)
- uid: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.AddSwagger*
  name: AddSwagger
  href: api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_SwaggerServiceCollectionExtensions_AddSwagger_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.AddSwagger
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.AddSwagger
  nameWithType: SwaggerServiceCollectionExtensions.AddSwagger
- uid: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.UseSwaggerApi(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseSwaggerApi(IApplicationBuilder)
  href: api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_SwaggerServiceCollectionExtensions_UseSwaggerApi_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.UseSwaggerApi(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.UseSwaggerApi(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: SwaggerServiceCollectionExtensions.UseSwaggerApi(IApplicationBuilder)
- uid: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.UseSwaggerApi*
  name: UseSwaggerApi
  href: api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html#Microsoft_Extensions_DependencyInjection_SwaggerServiceCollectionExtensions_UseSwaggerApi_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.UseSwaggerApi
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.UseSwaggerApi
  nameWithType: SwaggerServiceCollectionExtensions.UseSwaggerApi
- uid: Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions
  name: TenantResolverMiddlewareExtensions
  href: api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions
  fullName: Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions
  nameWithType: TenantResolverMiddlewareExtensions
- uid: Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseTenantResolverMiddleware(IApplicationBuilder)
  href: api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html#Microsoft_Extensions_DependencyInjection_TenantResolverMiddlewareExtensions_UseTenantResolverMiddleware_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware(IApplicationBuilder)
- uid: Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware*
  name: UseTenantResolverMiddleware
  href: api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html#Microsoft_Extensions_DependencyInjection_TenantResolverMiddlewareExtensions_UseTenantResolverMiddleware_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware
  nameWithType: TenantResolverMiddlewareExtensions.UseTenantResolverMiddleware
- uid: Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions
  name: TransactionMiddlewareExtensions
  href: api/Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.html
  commentId: T:Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions
  fullName: Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions
  nameWithType: TransactionMiddlewareExtensions
- uid: Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.UseTransactionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseTransactionMiddleware(IApplicationBuilder)
  href: api/Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.html#Microsoft_Extensions_DependencyInjection_TransactionMiddlewareExtensions_UseTransactionMiddleware_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.UseTransactionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.UseTransactionMiddleware(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TransactionMiddlewareExtensions.UseTransactionMiddleware(IApplicationBuilder)
- uid: Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.UseTransactionMiddleware*
  name: UseTransactionMiddleware
  href: api/Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.html#Microsoft_Extensions_DependencyInjection_TransactionMiddlewareExtensions_UseTransactionMiddleware_
  commentId: Overload:Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.UseTransactionMiddleware
  isSpec: "True"
  fullName: Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.UseTransactionMiddleware
  nameWithType: TransactionMiddlewareExtensions.UseTransactionMiddleware
- uid: SparkPlug.Api
  name: SparkPlug.Api
  href: api/SparkPlug.Api.html
  commentId: N:SparkPlug.Api
  fullName: SparkPlug.Api
  nameWithType: SparkPlug.Api
- uid: SparkPlug.Api.ApiModule
  name: ApiModule
  href: api/SparkPlug.Api.ApiModule.html
  commentId: T:SparkPlug.Api.ApiModule
  fullName: SparkPlug.Api.ApiModule
  nameWithType: ApiModule
- uid: SparkPlug.Api.ApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Api.ApiModule.html#SparkPlug_Api_ApiModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Api.ApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Api.ApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ApiModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Api.ApiModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Api.ApiModule.html#SparkPlug_Api_ApiModule_AddModule_
  commentId: Overload:SparkPlug.Api.ApiModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Api.ApiModule.AddModule
  nameWithType: ApiModule.AddModule
- uid: SparkPlug.Api.ApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Api.ApiModule.html#SparkPlug_Api_ApiModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Api.ApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Api.ApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: ApiModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Api.ApiModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Api.ApiModule.html#SparkPlug_Api_ApiModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Api.ApiModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Api.ApiModule.UseMiddelwares
  nameWithType: ApiModule.UseMiddelwares
- uid: SparkPlug.Api.ApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Api.ApiModule.html#SparkPlug_Api_ApiModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Api.ApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Api.ApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: ApiModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Api.ApiModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Api.ApiModule.html#SparkPlug_Api_ApiModule_UseModule_
  commentId: Overload:SparkPlug.Api.ApiModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Api.ApiModule.UseModule
  nameWithType: ApiModule.UseModule
- uid: SparkPlug.Api.Common
  name: SparkPlug.Api.Common
  href: api/SparkPlug.Api.Common.html
  commentId: N:SparkPlug.Api.Common
  fullName: SparkPlug.Api.Common
  nameWithType: SparkPlug.Api.Common
- uid: SparkPlug.Api.Common.ExceptionWriter
  name: ExceptionWriter
  href: api/SparkPlug.Api.Common.ExceptionWriter.html
  commentId: T:SparkPlug.Api.Common.ExceptionWriter
  fullName: SparkPlug.Api.Common.ExceptionWriter
  nameWithType: ExceptionWriter
- uid: SparkPlug.Api.Common.ExceptionWriter.WriteInResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)
  name: WriteInResponseAsync(HttpContext, Exception)
  href: api/SparkPlug.Api.Common.ExceptionWriter.html#SparkPlug_Api_Common_ExceptionWriter_WriteInResponseAsync_Microsoft_AspNetCore_Http_HttpContext_System_Exception_
  commentId: M:SparkPlug.Api.Common.ExceptionWriter.WriteInResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)
  fullName: SparkPlug.Api.Common.ExceptionWriter.WriteInResponseAsync(Microsoft.AspNetCore.Http.HttpContext, System.Exception)
  nameWithType: ExceptionWriter.WriteInResponseAsync(HttpContext, Exception)
- uid: SparkPlug.Api.Common.ExceptionWriter.WriteInResponseAsync*
  name: WriteInResponseAsync
  href: api/SparkPlug.Api.Common.ExceptionWriter.html#SparkPlug_Api_Common_ExceptionWriter_WriteInResponseAsync_
  commentId: Overload:SparkPlug.Api.Common.ExceptionWriter.WriteInResponseAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Common.ExceptionWriter.WriteInResponseAsync
  nameWithType: ExceptionWriter.WriteInResponseAsync
- uid: SparkPlug.Api.Configuration
  name: SparkPlug.Api.Configuration
  href: api/SparkPlug.Api.Configuration.html
  commentId: N:SparkPlug.Api.Configuration
  fullName: SparkPlug.Api.Configuration
  nameWithType: SparkPlug.Api.Configuration
- uid: SparkPlug.Api.Configuration.ApiEventId
  name: ApiEventId
  href: api/SparkPlug.Api.Configuration.ApiEventId.html
  commentId: T:SparkPlug.Api.Configuration.ApiEventId
  fullName: SparkPlug.Api.Configuration.ApiEventId
  nameWithType: ApiEventId
- uid: SparkPlug.Api.Configuration.ApiEventId.ExceptionFilter
  name: ExceptionFilter
  href: api/SparkPlug.Api.Configuration.ApiEventId.html#SparkPlug_Api_Configuration_ApiEventId_ExceptionFilter
  commentId: F:SparkPlug.Api.Configuration.ApiEventId.ExceptionFilter
  fullName: SparkPlug.Api.Configuration.ApiEventId.ExceptionFilter
  nameWithType: ApiEventId.ExceptionFilter
- uid: SparkPlug.Api.Configuration.ApiEventId.UnknownGlobalException
  name: UnknownGlobalException
  href: api/SparkPlug.Api.Configuration.ApiEventId.html#SparkPlug_Api_Configuration_ApiEventId_UnknownGlobalException
  commentId: F:SparkPlug.Api.Configuration.ApiEventId.UnknownGlobalException
  fullName: SparkPlug.Api.Configuration.ApiEventId.UnknownGlobalException
  nameWithType: ApiEventId.UnknownGlobalException
- uid: SparkPlug.Api.Configuration.Constants
  name: Constants
  href: api/SparkPlug.Api.Configuration.Constants.html
  commentId: T:SparkPlug.Api.Configuration.Constants
  fullName: SparkPlug.Api.Configuration.Constants
  nameWithType: Constants
- uid: SparkPlug.Api.Configuration.Constants.JsonContentType
  name: JsonContentType
  href: api/SparkPlug.Api.Configuration.Constants.html#SparkPlug_Api_Configuration_Constants_JsonContentType
  commentId: F:SparkPlug.Api.Configuration.Constants.JsonContentType
  fullName: SparkPlug.Api.Configuration.Constants.JsonContentType
  nameWithType: Constants.JsonContentType
- uid: SparkPlug.Api.Configuration.Constants.Tenant
  name: Tenant
  href: api/SparkPlug.Api.Configuration.Constants.html#SparkPlug_Api_Configuration_Constants_Tenant
  commentId: F:SparkPlug.Api.Configuration.Constants.Tenant
  fullName: SparkPlug.Api.Configuration.Constants.Tenant
  nameWithType: Constants.Tenant
- uid: SparkPlug.Api.Configuration.Constants.XTraceId
  name: XTraceId
  href: api/SparkPlug.Api.Configuration.Constants.html#SparkPlug_Api_Configuration_Constants_XTraceId
  commentId: F:SparkPlug.Api.Configuration.Constants.XTraceId
  fullName: SparkPlug.Api.Configuration.Constants.XTraceId
  nameWithType: Constants.XTraceId
- uid: SparkPlug.Api.Configuration.SlidingExpiration
  name: SlidingExpiration
  href: api/SparkPlug.Api.Configuration.SlidingExpiration.html
  commentId: T:SparkPlug.Api.Configuration.SlidingExpiration
  fullName: SparkPlug.Api.Configuration.SlidingExpiration
  nameWithType: SlidingExpiration
- uid: SparkPlug.Api.Configuration.SlidingExpiration.#ctor
  name: SlidingExpiration()
  href: api/SparkPlug.Api.Configuration.SlidingExpiration.html#SparkPlug_Api_Configuration_SlidingExpiration__ctor
  commentId: M:SparkPlug.Api.Configuration.SlidingExpiration.#ctor
  name.vb: New()
  fullName: SparkPlug.Api.Configuration.SlidingExpiration.SlidingExpiration()
  fullName.vb: SparkPlug.Api.Configuration.SlidingExpiration.New()
  nameWithType: SlidingExpiration.SlidingExpiration()
  nameWithType.vb: SlidingExpiration.New()
- uid: SparkPlug.Api.Configuration.SlidingExpiration.#ctor*
  name: SlidingExpiration
  href: api/SparkPlug.Api.Configuration.SlidingExpiration.html#SparkPlug_Api_Configuration_SlidingExpiration__ctor_
  commentId: Overload:SparkPlug.Api.Configuration.SlidingExpiration.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Configuration.SlidingExpiration.SlidingExpiration
  fullName.vb: SparkPlug.Api.Configuration.SlidingExpiration.New
  nameWithType: SlidingExpiration.SlidingExpiration
  nameWithType.vb: SlidingExpiration.New
- uid: SparkPlug.Api.Configuration.SlidingExpiration.TenantCacheInfo
  name: TenantCacheInfo
  href: api/SparkPlug.Api.Configuration.SlidingExpiration.html#SparkPlug_Api_Configuration_SlidingExpiration_TenantCacheInfo
  commentId: P:SparkPlug.Api.Configuration.SlidingExpiration.TenantCacheInfo
  fullName: SparkPlug.Api.Configuration.SlidingExpiration.TenantCacheInfo
  nameWithType: SlidingExpiration.TenantCacheInfo
- uid: SparkPlug.Api.Configuration.SlidingExpiration.TenantCacheInfo*
  name: TenantCacheInfo
  href: api/SparkPlug.Api.Configuration.SlidingExpiration.html#SparkPlug_Api_Configuration_SlidingExpiration_TenantCacheInfo_
  commentId: Overload:SparkPlug.Api.Configuration.SlidingExpiration.TenantCacheInfo
  isSpec: "True"
  fullName: SparkPlug.Api.Configuration.SlidingExpiration.TenantCacheInfo
  nameWithType: SlidingExpiration.TenantCacheInfo
- uid: SparkPlug.Api.Configuration.WebApiOptions
  name: WebApiOptions
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html
  commentId: T:SparkPlug.Api.Configuration.WebApiOptions
  fullName: SparkPlug.Api.Configuration.WebApiOptions
  nameWithType: WebApiOptions
- uid: SparkPlug.Api.Configuration.WebApiOptions.#ctor
  name: WebApiOptions()
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions__ctor
  commentId: M:SparkPlug.Api.Configuration.WebApiOptions.#ctor
  name.vb: New()
  fullName: SparkPlug.Api.Configuration.WebApiOptions.WebApiOptions()
  fullName.vb: SparkPlug.Api.Configuration.WebApiOptions.New()
  nameWithType: WebApiOptions.WebApiOptions()
  nameWithType.vb: WebApiOptions.New()
- uid: SparkPlug.Api.Configuration.WebApiOptions.#ctor*
  name: WebApiOptions
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions__ctor_
  commentId: Overload:SparkPlug.Api.Configuration.WebApiOptions.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Configuration.WebApiOptions.WebApiOptions
  fullName.vb: SparkPlug.Api.Configuration.WebApiOptions.New
  nameWithType: WebApiOptions.WebApiOptions
  nameWithType.vb: WebApiOptions.New
- uid: SparkPlug.Api.Configuration.WebApiOptions.ApplicationName
  name: ApplicationName
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_ApplicationName
  commentId: P:SparkPlug.Api.Configuration.WebApiOptions.ApplicationName
  fullName: SparkPlug.Api.Configuration.WebApiOptions.ApplicationName
  nameWithType: WebApiOptions.ApplicationName
- uid: SparkPlug.Api.Configuration.WebApiOptions.ApplicationName*
  name: ApplicationName
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_ApplicationName_
  commentId: Overload:SparkPlug.Api.Configuration.WebApiOptions.ApplicationName
  isSpec: "True"
  fullName: SparkPlug.Api.Configuration.WebApiOptions.ApplicationName
  nameWithType: WebApiOptions.ApplicationName
- uid: SparkPlug.Api.Configuration.WebApiOptions.CacheDuration
  name: CacheDuration
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_CacheDuration
  commentId: P:SparkPlug.Api.Configuration.WebApiOptions.CacheDuration
  fullName: SparkPlug.Api.Configuration.WebApiOptions.CacheDuration
  nameWithType: WebApiOptions.CacheDuration
- uid: SparkPlug.Api.Configuration.WebApiOptions.CacheDuration*
  name: CacheDuration
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_CacheDuration_
  commentId: Overload:SparkPlug.Api.Configuration.WebApiOptions.CacheDuration
  isSpec: "True"
  fullName: SparkPlug.Api.Configuration.WebApiOptions.CacheDuration
  nameWithType: WebApiOptions.CacheDuration
- uid: SparkPlug.Api.Configuration.WebApiOptions.ConfigPath
  name: ConfigPath
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_ConfigPath
  commentId: F:SparkPlug.Api.Configuration.WebApiOptions.ConfigPath
  fullName: SparkPlug.Api.Configuration.WebApiOptions.ConfigPath
  nameWithType: WebApiOptions.ConfigPath
- uid: SparkPlug.Api.Configuration.WebApiOptions.IsMultiTenant
  name: IsMultiTenant
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_IsMultiTenant
  commentId: P:SparkPlug.Api.Configuration.WebApiOptions.IsMultiTenant
  fullName: SparkPlug.Api.Configuration.WebApiOptions.IsMultiTenant
  nameWithType: WebApiOptions.IsMultiTenant
- uid: SparkPlug.Api.Configuration.WebApiOptions.IsMultiTenant*
  name: IsMultiTenant
  href: api/SparkPlug.Api.Configuration.WebApiOptions.html#SparkPlug_Api_Configuration_WebApiOptions_IsMultiTenant_
  commentId: Overload:SparkPlug.Api.Configuration.WebApiOptions.IsMultiTenant
  isSpec: "True"
  fullName: SparkPlug.Api.Configuration.WebApiOptions.IsMultiTenant
  nameWithType: WebApiOptions.IsMultiTenant
- uid: SparkPlug.Api.Controllers
  name: SparkPlug.Api.Controllers
  href: api/SparkPlug.Api.Controllers.html
  commentId: N:SparkPlug.Api.Controllers
  fullName: SparkPlug.Api.Controllers
  nameWithType: SparkPlug.Api.Controllers
- uid: SparkPlug.Api.Controllers.ApiAttribute
  name: ApiAttribute
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html
  commentId: T:SparkPlug.Api.Controllers.ApiAttribute
  fullName: SparkPlug.Api.Controllers.ApiAttribute
  nameWithType: ApiAttribute
- uid: SparkPlug.Api.Controllers.ApiAttribute.#ctor(System.String)
  name: ApiAttribute(string)
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute__ctor_System_String_
  commentId: M:SparkPlug.Api.Controllers.ApiAttribute.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Api.Controllers.ApiAttribute.ApiAttribute(string)
  fullName.vb: SparkPlug.Api.Controllers.ApiAttribute.New(String)
  nameWithType: ApiAttribute.ApiAttribute(string)
  nameWithType.vb: ApiAttribute.New(String)
- uid: SparkPlug.Api.Controllers.ApiAttribute.#ctor(System.String,System.Type)
  name: ApiAttribute(string, Type)
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute__ctor_System_String_System_Type_
  commentId: M:SparkPlug.Api.Controllers.ApiAttribute.#ctor(System.String,System.Type)
  name.vb: New(String, Type)
  fullName: SparkPlug.Api.Controllers.ApiAttribute.ApiAttribute(string, System.Type)
  fullName.vb: SparkPlug.Api.Controllers.ApiAttribute.New(String, System.Type)
  nameWithType: ApiAttribute.ApiAttribute(string, Type)
  nameWithType.vb: ApiAttribute.New(String, Type)
- uid: SparkPlug.Api.Controllers.ApiAttribute.#ctor*
  name: ApiAttribute
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute__ctor_
  commentId: Overload:SparkPlug.Api.Controllers.ApiAttribute.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Controllers.ApiAttribute.ApiAttribute
  fullName.vb: SparkPlug.Api.Controllers.ApiAttribute.New
  nameWithType: ApiAttribute.ApiAttribute
  nameWithType.vb: ApiAttribute.New
- uid: SparkPlug.Api.Controllers.ApiAttribute.Route
  name: Route
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute_Route
  commentId: P:SparkPlug.Api.Controllers.ApiAttribute.Route
  fullName: SparkPlug.Api.Controllers.ApiAttribute.Route
  nameWithType: ApiAttribute.Route
- uid: SparkPlug.Api.Controllers.ApiAttribute.Route*
  name: Route
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute_Route_
  commentId: Overload:SparkPlug.Api.Controllers.ApiAttribute.Route
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiAttribute.Route
  nameWithType: ApiAttribute.Route
- uid: SparkPlug.Api.Controllers.ApiAttribute.Type
  name: Type
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute_Type
  commentId: P:SparkPlug.Api.Controllers.ApiAttribute.Type
  fullName: SparkPlug.Api.Controllers.ApiAttribute.Type
  nameWithType: ApiAttribute.Type
- uid: SparkPlug.Api.Controllers.ApiAttribute.Type*
  name: Type
  href: api/SparkPlug.Api.Controllers.ApiAttribute.html#SparkPlug_Api_Controllers_ApiAttribute_Type_
  commentId: Overload:SparkPlug.Api.Controllers.ApiAttribute.Type
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiAttribute.Type
  nameWithType: ApiAttribute.Type
- uid: SparkPlug.Api.Controllers.ApiController`2
  name: ApiController<TId, TEntity>
  href: api/SparkPlug.Api.Controllers.ApiController-2.html
  commentId: T:SparkPlug.Api.Controllers.ApiController`2
  name.vb: ApiController(Of TId, TEntity)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity)
  nameWithType: ApiController<TId, TEntity>
  nameWithType.vb: ApiController(Of TId, TEntity)
- uid: SparkPlug.Api.Controllers.ApiController`2.#ctor(System.IServiceProvider)
  name: ApiController(IServiceProvider)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.ApiController(System.IServiceProvider)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).New(System.IServiceProvider)
  nameWithType: ApiController<TId, TEntity>.ApiController(IServiceProvider)
  nameWithType.vb: ApiController(Of TId, TEntity).New(IServiceProvider)
- uid: SparkPlug.Api.Controllers.ApiController`2.#ctor*
  name: ApiController
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2__ctor_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.ApiController
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).New
  nameWithType: ApiController<TId, TEntity>.ApiController
  nameWithType.vb: ApiController(Of TId, TEntity).New
- uid: SparkPlug.Api.Controllers.ApiController`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TId, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.DeleteAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).DeleteAsync(TId, System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.DeleteAsync(TId, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).DeleteAsync(TId, CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.DeleteAsync*
  name: DeleteAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_DeleteAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.DeleteAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.DeleteAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).DeleteAsync
  nameWithType: ApiController<TId, TEntity>.DeleteAsync
  nameWithType.vb: ApiController(Of TId, TEntity).DeleteAsync
- uid: SparkPlug.Api.Controllers.ApiController`2.GetAsync(`0,System.Threading.CancellationToken)
  name: GetAsync(TId, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_GetAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.GetAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.GetAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).GetAsync(TId, System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.GetAsync(TId, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).GetAsync(TId, CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.GetAsync*
  name: GetAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_GetAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.GetAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.GetAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).GetAsync
  nameWithType: ApiController<TId, TEntity>.GetAsync
  nameWithType.vb: ApiController(Of TId, TEntity).GetAsync
- uid: SparkPlug.Api.Controllers.ApiController`2.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)
  name: ListAsync(int?, int?, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_ListAsync_System_Nullable_System_Int32__System_Nullable_System_Int32__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.ListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)
  name.vb: ListAsync(Integer?, Integer?, CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.ListAsync(int?, int?, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).ListAsync(Integer?, Integer?, System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.ListAsync(int?, int?, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).ListAsync(Integer?, Integer?, CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.ListAsync*
  name: ListAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_ListAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.ListAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.ListAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).ListAsync
  nameWithType: ApiController<TId, TEntity>.ListAsync
  nameWithType.vb: ApiController(Of TId, TEntity).ListAsync
- uid: SparkPlug.Api.Controllers.ApiController`2.PatchAsync(`0,SparkPlug.Contracts.CommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name: PatchAsync(TId, CommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_PatchAsync__0_SparkPlug_Contracts_CommandRequest_Microsoft_AspNetCore_JsonPatch_JsonPatchDocument__1___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.PatchAsync(`0,SparkPlug.Contracts.CommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name.vb: PatchAsync(TId, CommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.PatchAsync(TId, SparkPlug.Contracts.CommandRequest<Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TEntity>>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).PatchAsync(TId, SparkPlug.Contracts.CommandRequest(Of Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TEntity)), System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.PatchAsync(TId, CommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).PatchAsync(TId, CommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.PatchAsync*
  name: PatchAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_PatchAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.PatchAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.PatchAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).PatchAsync
  nameWithType: ApiController<TId, TEntity>.PatchAsync
  nameWithType.vb: ApiController(Of TId, TEntity).PatchAsync
- uid: SparkPlug.Api.Controllers.ApiController`2.PostAsync(SparkPlug.Contracts.CommandRequest{`1},System.Threading.CancellationToken)
  name: PostAsync(CommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_PostAsync_SparkPlug_Contracts_CommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.PostAsync(SparkPlug.Contracts.CommandRequest{`1},System.Threading.CancellationToken)
  name.vb: PostAsync(CommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.PostAsync(SparkPlug.Contracts.CommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).PostAsync(SparkPlug.Contracts.CommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.PostAsync(CommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).PostAsync(CommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.PostAsync*
  name: PostAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_PostAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.PostAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.PostAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).PostAsync
  nameWithType: ApiController<TId, TEntity>.PostAsync
  nameWithType.vb: ApiController(Of TId, TEntity).PostAsync
- uid: SparkPlug.Api.Controllers.ApiController`2.PutAsync(`0,SparkPlug.Contracts.CommandRequest{`1},System.Threading.CancellationToken)
  name: PutAsync(TId, CommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_PutAsync__0_SparkPlug_Contracts_CommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.PutAsync(`0,SparkPlug.Contracts.CommandRequest{`1},System.Threading.CancellationToken)
  name.vb: PutAsync(TId, CommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.PutAsync(TId, SparkPlug.Contracts.CommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).PutAsync(TId, SparkPlug.Contracts.CommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.PutAsync(TId, CommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).PutAsync(TId, CommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.PutAsync*
  name: PutAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_PutAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.PutAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.PutAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).PutAsync
  nameWithType: ApiController<TId, TEntity>.PutAsync
  nameWithType.vb: ApiController(Of TId, TEntity).PutAsync
- uid: SparkPlug.Api.Controllers.ApiController`2.QueryAsync(SparkPlug.Contracts.QueryRequest,System.Threading.CancellationToken)
  name: QueryAsync(QueryRequest, CancellationToken)
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_QueryAsync_SparkPlug_Contracts_QueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.ApiController`2.QueryAsync(SparkPlug.Contracts.QueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.QueryAsync(SparkPlug.Contracts.QueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).QueryAsync(SparkPlug.Contracts.QueryRequest, System.Threading.CancellationToken)
  nameWithType: ApiController<TId, TEntity>.QueryAsync(QueryRequest, CancellationToken)
  nameWithType.vb: ApiController(Of TId, TEntity).QueryAsync(QueryRequest, CancellationToken)
- uid: SparkPlug.Api.Controllers.ApiController`2.QueryAsync*
  name: QueryAsync
  href: api/SparkPlug.Api.Controllers.ApiController-2.html#SparkPlug_Api_Controllers_ApiController_2_QueryAsync_
  commentId: Overload:SparkPlug.Api.Controllers.ApiController`2.QueryAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.ApiController<TId, TEntity>.QueryAsync
  fullName.vb: SparkPlug.Api.Controllers.ApiController(Of TId, TEntity).QueryAsync
  nameWithType: ApiController<TId, TEntity>.QueryAsync
  nameWithType.vb: ApiController(Of TId, TEntity).QueryAsync
- uid: SparkPlug.Api.Controllers.BaseController`2
  name: BaseController<TId, TEntity>
  href: api/SparkPlug.Api.Controllers.BaseController-2.html
  commentId: T:SparkPlug.Api.Controllers.BaseController`2
  name.vb: BaseController(Of TId, TEntity)
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity)
  nameWithType: BaseController<TId, TEntity>
  nameWithType.vb: BaseController(Of TId, TEntity)
- uid: SparkPlug.Api.Controllers.BaseController`2.#ctor(System.IServiceProvider)
  name: BaseController(IServiceProvider)
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Api.Controllers.BaseController`2.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>.BaseController(System.IServiceProvider)
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity).New(System.IServiceProvider)
  nameWithType: BaseController<TId, TEntity>.BaseController(IServiceProvider)
  nameWithType.vb: BaseController(Of TId, TEntity).New(IServiceProvider)
- uid: SparkPlug.Api.Controllers.BaseController`2.#ctor*
  name: BaseController
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2__ctor_
  commentId: Overload:SparkPlug.Api.Controllers.BaseController`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>.BaseController
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity).New
  nameWithType: BaseController<TId, TEntity>.BaseController
  nameWithType.vb: BaseController(Of TId, TEntity).New
- uid: SparkPlug.Api.Controllers.BaseController`2.Ok(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject},SparkPlug.Contracts.IPageContext)
  name: Ok(IEnumerable<JObject>, IPageContext?)
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2_Ok_System_Collections_Generic_IEnumerable_Newtonsoft_Json_Linq_JObject__SparkPlug_Contracts_IPageContext_
  commentId: M:SparkPlug.Api.Controllers.BaseController`2.Ok(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject},SparkPlug.Contracts.IPageContext)
  name.vb: Ok(IEnumerable(Of JObject), IPageContext)
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>.Ok(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JObject>, SparkPlug.Contracts.IPageContext?)
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity).Ok(System.Collections.Generic.IEnumerable(Of Newtonsoft.Json.Linq.JObject), SparkPlug.Contracts.IPageContext)
  nameWithType: BaseController<TId, TEntity>.Ok(IEnumerable<JObject>, IPageContext?)
  nameWithType.vb: BaseController(Of TId, TEntity).Ok(IEnumerable(Of JObject), IPageContext)
- uid: SparkPlug.Api.Controllers.BaseController`2.Ok(System.Collections.Generic.IEnumerable{`1},SparkPlug.Contracts.IPageContext)
  name: Ok(IEnumerable<TEntity>?, IPageContext?)
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2_Ok_System_Collections_Generic_IEnumerable__1__SparkPlug_Contracts_IPageContext_
  commentId: M:SparkPlug.Api.Controllers.BaseController`2.Ok(System.Collections.Generic.IEnumerable{`1},SparkPlug.Contracts.IPageContext)
  name.vb: Ok(IEnumerable(Of TEntity), IPageContext)
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>.Ok(System.Collections.Generic.IEnumerable<TEntity>?, SparkPlug.Contracts.IPageContext?)
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity).Ok(System.Collections.Generic.IEnumerable(Of TEntity), SparkPlug.Contracts.IPageContext)
  nameWithType: BaseController<TId, TEntity>.Ok(IEnumerable<TEntity>?, IPageContext?)
  nameWithType.vb: BaseController(Of TId, TEntity).Ok(IEnumerable(Of TEntity), IPageContext)
- uid: SparkPlug.Api.Controllers.BaseController`2.Ok(`1)
  name: Ok(TEntity)
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2_Ok__1_
  commentId: M:SparkPlug.Api.Controllers.BaseController`2.Ok(`1)
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>.Ok(TEntity)
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity).Ok(TEntity)
  nameWithType: BaseController<TId, TEntity>.Ok(TEntity)
  nameWithType.vb: BaseController(Of TId, TEntity).Ok(TEntity)
- uid: SparkPlug.Api.Controllers.BaseController`2.Ok*
  name: Ok
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2_Ok_
  commentId: Overload:SparkPlug.Api.Controllers.BaseController`2.Ok
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>.Ok
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity).Ok
  nameWithType: BaseController<TId, TEntity>.Ok
  nameWithType.vb: BaseController(Of TId, TEntity).Ok
- uid: SparkPlug.Api.Controllers.BaseController`2._logger
  name: _logger
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2__logger
  commentId: F:SparkPlug.Api.Controllers.BaseController`2._logger
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>._logger
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity)._logger
  nameWithType: BaseController<TId, TEntity>._logger
  nameWithType.vb: BaseController(Of TId, TEntity)._logger
- uid: SparkPlug.Api.Controllers.BaseController`2._service
  name: _service
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2__service
  commentId: F:SparkPlug.Api.Controllers.BaseController`2._service
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>._service
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity)._service
  nameWithType: BaseController<TId, TEntity>._service
  nameWithType.vb: BaseController(Of TId, TEntity)._service
- uid: SparkPlug.Api.Controllers.BaseController`2._serviceProvider
  name: _serviceProvider
  href: api/SparkPlug.Api.Controllers.BaseController-2.html#SparkPlug_Api_Controllers_BaseController_2__serviceProvider
  commentId: F:SparkPlug.Api.Controllers.BaseController`2._serviceProvider
  fullName: SparkPlug.Api.Controllers.BaseController<TId, TEntity>._serviceProvider
  fullName.vb: SparkPlug.Api.Controllers.BaseController(Of TId, TEntity)._serviceProvider
  nameWithType: BaseController<TId, TEntity>._serviceProvider
  nameWithType.vb: BaseController(Of TId, TEntity)._serviceProvider
- uid: SparkPlug.Api.Controllers.CompositeController
  name: CompositeController
  href: api/SparkPlug.Api.Controllers.CompositeController.html
  commentId: T:SparkPlug.Api.Controllers.CompositeController
  fullName: SparkPlug.Api.Controllers.CompositeController
  nameWithType: CompositeController
- uid: SparkPlug.Api.Controllers.CompositeController.#ctor(System.Net.Http.IHttpClientFactory)
  name: CompositeController(IHttpClientFactory)
  href: api/SparkPlug.Api.Controllers.CompositeController.html#SparkPlug_Api_Controllers_CompositeController__ctor_System_Net_Http_IHttpClientFactory_
  commentId: M:SparkPlug.Api.Controllers.CompositeController.#ctor(System.Net.Http.IHttpClientFactory)
  name.vb: New(IHttpClientFactory)
  fullName: SparkPlug.Api.Controllers.CompositeController.CompositeController(System.Net.Http.IHttpClientFactory)
  fullName.vb: SparkPlug.Api.Controllers.CompositeController.New(System.Net.Http.IHttpClientFactory)
  nameWithType: CompositeController.CompositeController(IHttpClientFactory)
  nameWithType.vb: CompositeController.New(IHttpClientFactory)
- uid: SparkPlug.Api.Controllers.CompositeController.#ctor*
  name: CompositeController
  href: api/SparkPlug.Api.Controllers.CompositeController.html#SparkPlug_Api_Controllers_CompositeController__ctor_
  commentId: Overload:SparkPlug.Api.Controllers.CompositeController.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Controllers.CompositeController.CompositeController
  fullName.vb: SparkPlug.Api.Controllers.CompositeController.New
  nameWithType: CompositeController.CompositeController
  nameWithType.vb: CompositeController.New
- uid: SparkPlug.Api.Controllers.CompositeController.Search(SparkPlug.Contracts.CompositeRequest,System.Threading.CancellationToken)
  name: Search(CompositeRequest, CancellationToken)
  href: api/SparkPlug.Api.Controllers.CompositeController.html#SparkPlug_Api_Controllers_CompositeController_Search_SparkPlug_Contracts_CompositeRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Controllers.CompositeController.Search(SparkPlug.Contracts.CompositeRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Api.Controllers.CompositeController.Search(SparkPlug.Contracts.CompositeRequest, System.Threading.CancellationToken)
  nameWithType: CompositeController.Search(CompositeRequest, CancellationToken)
- uid: SparkPlug.Api.Controllers.CompositeController.Search*
  name: Search
  href: api/SparkPlug.Api.Controllers.CompositeController.html#SparkPlug_Api_Controllers_CompositeController_Search_
  commentId: Overload:SparkPlug.Api.Controllers.CompositeController.Search
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.CompositeController.Search
  nameWithType: CompositeController.Search
- uid: SparkPlug.Api.Controllers.GenericControllerRouteConvention
  name: GenericControllerRouteConvention
  href: api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html
  commentId: T:SparkPlug.Api.Controllers.GenericControllerRouteConvention
  fullName: SparkPlug.Api.Controllers.GenericControllerRouteConvention
  nameWithType: GenericControllerRouteConvention
- uid: SparkPlug.Api.Controllers.GenericControllerRouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  name: GenericControllerRouteConvention(IRouteTemplateProvider?)
  href: api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html#SparkPlug_Api_Controllers_GenericControllerRouteConvention__ctor_Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_
  commentId: M:SparkPlug.Api.Controllers.GenericControllerRouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  name.vb: New(IRouteTemplateProvider)
  fullName: SparkPlug.Api.Controllers.GenericControllerRouteConvention.GenericControllerRouteConvention(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider?)
  fullName.vb: SparkPlug.Api.Controllers.GenericControllerRouteConvention.New(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  nameWithType: GenericControllerRouteConvention.GenericControllerRouteConvention(IRouteTemplateProvider?)
  nameWithType.vb: GenericControllerRouteConvention.New(IRouteTemplateProvider)
- uid: SparkPlug.Api.Controllers.GenericControllerRouteConvention.#ctor*
  name: GenericControllerRouteConvention
  href: api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html#SparkPlug_Api_Controllers_GenericControllerRouteConvention__ctor_
  commentId: Overload:SparkPlug.Api.Controllers.GenericControllerRouteConvention.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Controllers.GenericControllerRouteConvention.GenericControllerRouteConvention
  fullName.vb: SparkPlug.Api.Controllers.GenericControllerRouteConvention.New
  nameWithType: GenericControllerRouteConvention.GenericControllerRouteConvention
  nameWithType.vb: GenericControllerRouteConvention.New
- uid: SparkPlug.Api.Controllers.GenericControllerRouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
  name: Apply(ControllerModel)
  href: api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html#SparkPlug_Api_Controllers_GenericControllerRouteConvention_Apply_Microsoft_AspNetCore_Mvc_ApplicationModels_ControllerModel_
  commentId: M:SparkPlug.Api.Controllers.GenericControllerRouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
  fullName: SparkPlug.Api.Controllers.GenericControllerRouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerModel)
  nameWithType: GenericControllerRouteConvention.Apply(ControllerModel)
- uid: SparkPlug.Api.Controllers.GenericControllerRouteConvention.Apply*
  name: Apply
  href: api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html#SparkPlug_Api_Controllers_GenericControllerRouteConvention_Apply_
  commentId: Overload:SparkPlug.Api.Controllers.GenericControllerRouteConvention.Apply
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.GenericControllerRouteConvention.Apply
  nameWithType: GenericControllerRouteConvention.Apply
- uid: SparkPlug.Api.Controllers.RouteConvention
  name: RouteConvention
  href: api/SparkPlug.Api.Controllers.RouteConvention.html
  commentId: T:SparkPlug.Api.Controllers.RouteConvention
  fullName: SparkPlug.Api.Controllers.RouteConvention
  nameWithType: RouteConvention
- uid: SparkPlug.Api.Controllers.RouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  name: RouteConvention(IRouteTemplateProvider)
  href: api/SparkPlug.Api.Controllers.RouteConvention.html#SparkPlug_Api_Controllers_RouteConvention__ctor_Microsoft_AspNetCore_Mvc_Routing_IRouteTemplateProvider_
  commentId: M:SparkPlug.Api.Controllers.RouteConvention.#ctor(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  name.vb: New(IRouteTemplateProvider)
  fullName: SparkPlug.Api.Controllers.RouteConvention.RouteConvention(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  fullName.vb: SparkPlug.Api.Controllers.RouteConvention.New(Microsoft.AspNetCore.Mvc.Routing.IRouteTemplateProvider)
  nameWithType: RouteConvention.RouteConvention(IRouteTemplateProvider)
  nameWithType.vb: RouteConvention.New(IRouteTemplateProvider)
- uid: SparkPlug.Api.Controllers.RouteConvention.#ctor*
  name: RouteConvention
  href: api/SparkPlug.Api.Controllers.RouteConvention.html#SparkPlug_Api_Controllers_RouteConvention__ctor_
  commentId: Overload:SparkPlug.Api.Controllers.RouteConvention.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Controllers.RouteConvention.RouteConvention
  fullName.vb: SparkPlug.Api.Controllers.RouteConvention.New
  nameWithType: RouteConvention.RouteConvention
  nameWithType.vb: RouteConvention.New
- uid: SparkPlug.Api.Controllers.RouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
  name: Apply(ApplicationModel)
  href: api/SparkPlug.Api.Controllers.RouteConvention.html#SparkPlug_Api_Controllers_RouteConvention_Apply_Microsoft_AspNetCore_Mvc_ApplicationModels_ApplicationModel_
  commentId: M:SparkPlug.Api.Controllers.RouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
  fullName: SparkPlug.Api.Controllers.RouteConvention.Apply(Microsoft.AspNetCore.Mvc.ApplicationModels.ApplicationModel)
  nameWithType: RouteConvention.Apply(ApplicationModel)
- uid: SparkPlug.Api.Controllers.RouteConvention.Apply*
  name: Apply
  href: api/SparkPlug.Api.Controllers.RouteConvention.html#SparkPlug_Api_Controllers_RouteConvention_Apply_
  commentId: Overload:SparkPlug.Api.Controllers.RouteConvention.Apply
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.RouteConvention.Apply
  nameWithType: RouteConvention.Apply
- uid: SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant(System.Type)
  name: IsMultiTenant(Type?)
  href: api/SparkPlug.Api.Controllers.RouteConvention.html#SparkPlug_Api_Controllers_RouteConvention_IsMultiTenant_System_Type_
  commentId: M:SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant(System.Type)
  name.vb: IsMultiTenant(Type)
  fullName: SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant(System.Type?)
  fullName.vb: SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant(System.Type)
  nameWithType: RouteConvention.IsMultiTenant(Type?)
  nameWithType.vb: RouteConvention.IsMultiTenant(Type)
- uid: SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant*
  name: IsMultiTenant
  href: api/SparkPlug.Api.Controllers.RouteConvention.html#SparkPlug_Api_Controllers_RouteConvention_IsMultiTenant_
  commentId: Overload:SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant
  isSpec: "True"
  fullName: SparkPlug.Api.Controllers.RouteConvention.IsMultiTenant
  nameWithType: RouteConvention.IsMultiTenant
- uid: SparkPlug.Api.Filter
  name: SparkPlug.Api.Filter
  href: api/SparkPlug.Api.Filter.html
  commentId: N:SparkPlug.Api.Filter
  fullName: SparkPlug.Api.Filter
  nameWithType: SparkPlug.Api.Filter
- uid: SparkPlug.Api.Filter.ApiExceptionFilterAttribute
  name: ApiExceptionFilterAttribute
  href: api/SparkPlug.Api.Filter.ApiExceptionFilterAttribute.html
  commentId: T:SparkPlug.Api.Filter.ApiExceptionFilterAttribute
  fullName: SparkPlug.Api.Filter.ApiExceptionFilterAttribute
  nameWithType: ApiExceptionFilterAttribute
- uid: SparkPlug.Api.Filter.ApiExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
  name: OnException(ExceptionContext)
  href: api/SparkPlug.Api.Filter.ApiExceptionFilterAttribute.html#SparkPlug_Api_Filter_ApiExceptionFilterAttribute_OnException_Microsoft_AspNetCore_Mvc_Filters_ExceptionContext_
  commentId: M:SparkPlug.Api.Filter.ApiExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
  fullName: SparkPlug.Api.Filter.ApiExceptionFilterAttribute.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)
  nameWithType: ApiExceptionFilterAttribute.OnException(ExceptionContext)
- uid: SparkPlug.Api.Filter.ApiExceptionFilterAttribute.OnException*
  name: OnException
  href: api/SparkPlug.Api.Filter.ApiExceptionFilterAttribute.html#SparkPlug_Api_Filter_ApiExceptionFilterAttribute_OnException_
  commentId: Overload:SparkPlug.Api.Filter.ApiExceptionFilterAttribute.OnException
  isSpec: "True"
  fullName: SparkPlug.Api.Filter.ApiExceptionFilterAttribute.OnException
  nameWithType: ApiExceptionFilterAttribute.OnException
- uid: SparkPlug.Api.Handler
  name: SparkPlug.Api.Handler
  href: api/SparkPlug.Api.Handler.html
  commentId: N:SparkPlug.Api.Handler
  fullName: SparkPlug.Api.Handler
  nameWithType: SparkPlug.Api.Handler
- uid: SparkPlug.Api.Handler.GlobalExceptionHandler
  name: GlobalExceptionHandler
  href: api/SparkPlug.Api.Handler.GlobalExceptionHandler.html
  commentId: T:SparkPlug.Api.Handler.GlobalExceptionHandler
  fullName: SparkPlug.Api.Handler.GlobalExceptionHandler
  nameWithType: GlobalExceptionHandler
- uid: SparkPlug.Api.Handler.GlobalExceptionHandler.TryHandleAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Threading.CancellationToken)
  name: TryHandleAsync(HttpContext, Exception, CancellationToken)
  href: api/SparkPlug.Api.Handler.GlobalExceptionHandler.html#SparkPlug_Api_Handler_GlobalExceptionHandler_TryHandleAsync_Microsoft_AspNetCore_Http_HttpContext_System_Exception_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Api.Handler.GlobalExceptionHandler.TryHandleAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,System.Threading.CancellationToken)
  fullName: SparkPlug.Api.Handler.GlobalExceptionHandler.TryHandleAsync(Microsoft.AspNetCore.Http.HttpContext, System.Exception, System.Threading.CancellationToken)
  nameWithType: GlobalExceptionHandler.TryHandleAsync(HttpContext, Exception, CancellationToken)
- uid: SparkPlug.Api.Handler.GlobalExceptionHandler.TryHandleAsync*
  name: TryHandleAsync
  href: api/SparkPlug.Api.Handler.GlobalExceptionHandler.html#SparkPlug_Api_Handler_GlobalExceptionHandler_TryHandleAsync_
  commentId: Overload:SparkPlug.Api.Handler.GlobalExceptionHandler.TryHandleAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Handler.GlobalExceptionHandler.TryHandleAsync
  nameWithType: GlobalExceptionHandler.TryHandleAsync
- uid: SparkPlug.Api.Middleware
  name: SparkPlug.Api.Middleware
  href: api/SparkPlug.Api.Middleware.html
  commentId: N:SparkPlug.Api.Middleware
  fullName: SparkPlug.Api.Middleware
  nameWithType: SparkPlug.Api.Middleware
- uid: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware
  name: GlobalExceptionHandlingMiddleware
  href: api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html
  commentId: T:SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware
  fullName: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware
  nameWithType: GlobalExceptionHandlingMiddleware
- uid: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)
  name: GlobalExceptionHandlingMiddleware(RequestDelegate)
  href: api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html#SparkPlug_Api_Middleware_GlobalExceptionHandlingMiddleware__ctor_Microsoft_AspNetCore_Http_RequestDelegate_
  commentId: M:SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)
  name.vb: New(RequestDelegate)
  fullName: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.GlobalExceptionHandlingMiddleware(Microsoft.AspNetCore.Http.RequestDelegate)
  fullName.vb: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.New(Microsoft.AspNetCore.Http.RequestDelegate)
  nameWithType: GlobalExceptionHandlingMiddleware.GlobalExceptionHandlingMiddleware(RequestDelegate)
  nameWithType.vb: GlobalExceptionHandlingMiddleware.New(RequestDelegate)
- uid: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.#ctor*
  name: GlobalExceptionHandlingMiddleware
  href: api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html#SparkPlug_Api_Middleware_GlobalExceptionHandlingMiddleware__ctor_
  commentId: Overload:SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.GlobalExceptionHandlingMiddleware
  fullName.vb: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.New
  nameWithType: GlobalExceptionHandlingMiddleware.GlobalExceptionHandlingMiddleware
  nameWithType.vb: GlobalExceptionHandlingMiddleware.New
- uid: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  name: InvokeAsync(HttpContext)
  href: api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html#SparkPlug_Api_Middleware_GlobalExceptionHandlingMiddleware_InvokeAsync_Microsoft_AspNetCore_Http_HttpContext_
  commentId: M:SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  fullName: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  nameWithType: GlobalExceptionHandlingMiddleware.InvokeAsync(HttpContext)
- uid: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync*
  name: InvokeAsync
  href: api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html#SparkPlug_Api_Middleware_GlobalExceptionHandlingMiddleware_InvokeAsync_
  commentId: Overload:SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync
  nameWithType: GlobalExceptionHandlingMiddleware.InvokeAsync
- uid: SparkPlug.Api.Middleware.TransactionMiddleware
  name: TransactionMiddleware
  href: api/SparkPlug.Api.Middleware.TransactionMiddleware.html
  commentId: T:SparkPlug.Api.Middleware.TransactionMiddleware
  fullName: SparkPlug.Api.Middleware.TransactionMiddleware
  nameWithType: TransactionMiddleware
- uid: SparkPlug.Api.Middleware.TransactionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)
  name: TransactionMiddleware(RequestDelegate)
  href: api/SparkPlug.Api.Middleware.TransactionMiddleware.html#SparkPlug_Api_Middleware_TransactionMiddleware__ctor_Microsoft_AspNetCore_Http_RequestDelegate_
  commentId: M:SparkPlug.Api.Middleware.TransactionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)
  name.vb: New(RequestDelegate)
  fullName: SparkPlug.Api.Middleware.TransactionMiddleware.TransactionMiddleware(Microsoft.AspNetCore.Http.RequestDelegate)
  fullName.vb: SparkPlug.Api.Middleware.TransactionMiddleware.New(Microsoft.AspNetCore.Http.RequestDelegate)
  nameWithType: TransactionMiddleware.TransactionMiddleware(RequestDelegate)
  nameWithType.vb: TransactionMiddleware.New(RequestDelegate)
- uid: SparkPlug.Api.Middleware.TransactionMiddleware.#ctor*
  name: TransactionMiddleware
  href: api/SparkPlug.Api.Middleware.TransactionMiddleware.html#SparkPlug_Api_Middleware_TransactionMiddleware__ctor_
  commentId: Overload:SparkPlug.Api.Middleware.TransactionMiddleware.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Api.Middleware.TransactionMiddleware.TransactionMiddleware
  fullName.vb: SparkPlug.Api.Middleware.TransactionMiddleware.New
  nameWithType: TransactionMiddleware.TransactionMiddleware
  nameWithType.vb: TransactionMiddleware.New
- uid: SparkPlug.Api.Middleware.TransactionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  name: InvokeAsync(HttpContext)
  href: api/SparkPlug.Api.Middleware.TransactionMiddleware.html#SparkPlug_Api_Middleware_TransactionMiddleware_InvokeAsync_Microsoft_AspNetCore_Http_HttpContext_
  commentId: M:SparkPlug.Api.Middleware.TransactionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  fullName: SparkPlug.Api.Middleware.TransactionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)
  nameWithType: TransactionMiddleware.InvokeAsync(HttpContext)
- uid: SparkPlug.Api.Middleware.TransactionMiddleware.InvokeAsync*
  name: InvokeAsync
  href: api/SparkPlug.Api.Middleware.TransactionMiddleware.html#SparkPlug_Api_Middleware_TransactionMiddleware_InvokeAsync_
  commentId: Overload:SparkPlug.Api.Middleware.TransactionMiddleware.InvokeAsync
  isSpec: "True"
  fullName: SparkPlug.Api.Middleware.TransactionMiddleware.InvokeAsync
  nameWithType: TransactionMiddleware.InvokeAsync
- uid: SparkPlug.Api.SwaggerModule
  name: SwaggerModule
  href: api/SparkPlug.Api.SwaggerModule.html
  commentId: T:SparkPlug.Api.SwaggerModule
  fullName: SparkPlug.Api.SwaggerModule
  nameWithType: SwaggerModule
- uid: SparkPlug.Api.SwaggerModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Api.SwaggerModule.html#SparkPlug_Api_SwaggerModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Api.SwaggerModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Api.SwaggerModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: SwaggerModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Api.SwaggerModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Api.SwaggerModule.html#SparkPlug_Api_SwaggerModule_AddModule_
  commentId: Overload:SparkPlug.Api.SwaggerModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Api.SwaggerModule.AddModule
  nameWithType: SwaggerModule.AddModule
- uid: SparkPlug.Api.SwaggerModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Api.SwaggerModule.html#SparkPlug_Api_SwaggerModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Api.SwaggerModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Api.SwaggerModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: SwaggerModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Api.SwaggerModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Api.SwaggerModule.html#SparkPlug_Api_SwaggerModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Api.SwaggerModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Api.SwaggerModule.UseMiddelwares
  nameWithType: SwaggerModule.UseMiddelwares
- uid: SparkPlug.Api.SwaggerModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Api.SwaggerModule.html#SparkPlug_Api_SwaggerModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Api.SwaggerModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Api.SwaggerModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: SwaggerModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Api.SwaggerModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Api.SwaggerModule.html#SparkPlug_Api_SwaggerModule_UseModule_
  commentId: Overload:SparkPlug.Api.SwaggerModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Api.SwaggerModule.UseModule
  nameWithType: SwaggerModule.UseModule
- uid: SparkPlug.Business.Menu.Api
  name: SparkPlug.Business.Menu.Api
  href: api/SparkPlug.Business.Menu.Api.html
  commentId: N:SparkPlug.Business.Menu.Api
  fullName: SparkPlug.Business.Menu.Api
  nameWithType: SparkPlug.Business.Menu.Api
- uid: SparkPlug.Business.Menu.Api.MenuApiModule
  name: MenuApiModule
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html
  commentId: T:SparkPlug.Business.Menu.Api.MenuApiModule
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule
  nameWithType: MenuApiModule
- uid: SparkPlug.Business.Menu.Api.MenuApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html#SparkPlug_Business_Menu_Api_MenuApiModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Menu.Api.MenuApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: MenuApiModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Menu.Api.MenuApiModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html#SparkPlug_Business_Menu_Api_MenuApiModule_AddModule_
  commentId: Overload:SparkPlug.Business.Menu.Api.MenuApiModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule.AddModule
  nameWithType: MenuApiModule.AddModule
- uid: SparkPlug.Business.Menu.Api.MenuApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html#SparkPlug_Business_Menu_Api_MenuApiModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Menu.Api.MenuApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: MenuApiModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Menu.Api.MenuApiModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html#SparkPlug_Business_Menu_Api_MenuApiModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Menu.Api.MenuApiModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule.UseMiddelwares
  nameWithType: MenuApiModule.UseMiddelwares
- uid: SparkPlug.Business.Menu.Api.MenuApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html#SparkPlug_Business_Menu_Api_MenuApiModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Menu.Api.MenuApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: MenuApiModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Menu.Api.MenuApiModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Menu.Api.MenuApiModule.html#SparkPlug_Business_Menu_Api_MenuApiModule_UseModule_
  commentId: Overload:SparkPlug.Business.Menu.Api.MenuApiModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Api.MenuApiModule.UseModule
  nameWithType: MenuApiModule.UseModule
- uid: SparkPlug.Business.Menu.Api.MenuController
  name: MenuController
  href: api/SparkPlug.Business.Menu.Api.MenuController.html
  commentId: T:SparkPlug.Business.Menu.Api.MenuController
  fullName: SparkPlug.Business.Menu.Api.MenuController
  nameWithType: MenuController
- uid: SparkPlug.Business.Menu.Api.MenuController.#ctor(System.IServiceProvider)
  name: MenuController(IServiceProvider)
  href: api/SparkPlug.Business.Menu.Api.MenuController.html#SparkPlug_Business_Menu_Api_MenuController__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Menu.Api.MenuController.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Business.Menu.Api.MenuController.MenuController(System.IServiceProvider)
  fullName.vb: SparkPlug.Business.Menu.Api.MenuController.New(System.IServiceProvider)
  nameWithType: MenuController.MenuController(IServiceProvider)
  nameWithType.vb: MenuController.New(IServiceProvider)
- uid: SparkPlug.Business.Menu.Api.MenuController.#ctor*
  name: MenuController
  href: api/SparkPlug.Business.Menu.Api.MenuController.html#SparkPlug_Business_Menu_Api_MenuController__ctor_
  commentId: Overload:SparkPlug.Business.Menu.Api.MenuController.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Business.Menu.Api.MenuController.MenuController
  fullName.vb: SparkPlug.Business.Menu.Api.MenuController.New
  nameWithType: MenuController.MenuController
  nameWithType.vb: MenuController.New
- uid: SparkPlug.Business.Menu.Domain
  name: SparkPlug.Business.Menu.Domain
  href: api/SparkPlug.Business.Menu.Domain.html
  commentId: N:SparkPlug.Business.Menu.Domain
  fullName: SparkPlug.Business.Menu.Domain
  nameWithType: SparkPlug.Business.Menu.Domain
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule
  name: MenuDomainModule
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html
  commentId: T:SparkPlug.Business.Menu.Domain.MenuDomainModule
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule
  nameWithType: MenuDomainModule
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html#SparkPlug_Business_Menu_Domain_MenuDomainModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Menu.Domain.MenuDomainModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: MenuDomainModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html#SparkPlug_Business_Menu_Domain_MenuDomainModule_AddModule_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuDomainModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule.AddModule
  nameWithType: MenuDomainModule.AddModule
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html#SparkPlug_Business_Menu_Domain_MenuDomainModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Menu.Domain.MenuDomainModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: MenuDomainModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html#SparkPlug_Business_Menu_Domain_MenuDomainModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuDomainModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseMiddelwares
  nameWithType: MenuDomainModule.UseMiddelwares
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html#SparkPlug_Business_Menu_Domain_MenuDomainModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Menu.Domain.MenuDomainModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: MenuDomainModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html#SparkPlug_Business_Menu_Domain_MenuDomainModule_UseModule_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuDomainModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuDomainModule.UseModule
  nameWithType: MenuDomainModule.UseModule
- uid: SparkPlug.Business.Menu.Domain.MenuItem
  name: MenuItem
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html
  commentId: T:SparkPlug.Business.Menu.Domain.MenuItem
  fullName: SparkPlug.Business.Menu.Domain.MenuItem
  nameWithType: MenuItem
- uid: SparkPlug.Business.Menu.Domain.MenuItem.CreatedAt
  name: CreatedAt
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_CreatedAt
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.CreatedAt
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.CreatedAt
  nameWithType: MenuItem.CreatedAt
- uid: SparkPlug.Business.Menu.Domain.MenuItem.CreatedAt*
  name: CreatedAt
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_CreatedAt_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.CreatedAt
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.CreatedAt
  nameWithType: MenuItem.CreatedAt
- uid: SparkPlug.Business.Menu.Domain.MenuItem.CreatedBy
  name: CreatedBy
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_CreatedBy
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.CreatedBy
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.CreatedBy
  nameWithType: MenuItem.CreatedBy
- uid: SparkPlug.Business.Menu.Domain.MenuItem.CreatedBy*
  name: CreatedBy
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_CreatedBy_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.CreatedBy
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.CreatedBy
  nameWithType: MenuItem.CreatedBy
- uid: SparkPlug.Business.Menu.Domain.MenuItem.DisplayOrder
  name: DisplayOrder
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_DisplayOrder
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.DisplayOrder
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.DisplayOrder
  nameWithType: MenuItem.DisplayOrder
- uid: SparkPlug.Business.Menu.Domain.MenuItem.DisplayOrder*
  name: DisplayOrder
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_DisplayOrder_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.DisplayOrder
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.DisplayOrder
  nameWithType: MenuItem.DisplayOrder
- uid: SparkPlug.Business.Menu.Domain.MenuItem.IconRef
  name: IconRef
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_IconRef
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.IconRef
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.IconRef
  nameWithType: MenuItem.IconRef
- uid: SparkPlug.Business.Menu.Domain.MenuItem.IconRef*
  name: IconRef
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_IconRef_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.IconRef
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.IconRef
  nameWithType: MenuItem.IconRef
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Id
  name: Id
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Id
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.Id
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Id
  nameWithType: MenuItem.Id
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Id*
  name: Id
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Id_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.Id
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Id
  nameWithType: MenuItem.Id
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Label
  name: Label
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Label
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.Label
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Label
  nameWithType: MenuItem.Label
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Label*
  name: Label
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Label_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.Label
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Label
  nameWithType: MenuItem.Label
- uid: SparkPlug.Business.Menu.Domain.MenuItem.MenuCode
  name: MenuCode
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_MenuCode
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.MenuCode
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.MenuCode
  nameWithType: MenuItem.MenuCode
- uid: SparkPlug.Business.Menu.Domain.MenuItem.MenuCode*
  name: MenuCode
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_MenuCode_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.MenuCode
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.MenuCode
  nameWithType: MenuItem.MenuCode
- uid: SparkPlug.Business.Menu.Domain.MenuItem.MenuPosition
  name: MenuPosition
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_MenuPosition
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.MenuPosition
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.MenuPosition
  nameWithType: MenuItem.MenuPosition
- uid: SparkPlug.Business.Menu.Domain.MenuItem.MenuPosition*
  name: MenuPosition
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_MenuPosition_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.MenuPosition
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.MenuPosition
  nameWithType: MenuItem.MenuPosition
- uid: SparkPlug.Business.Menu.Domain.MenuItem.MenuType
  name: MenuType
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_MenuType
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.MenuType
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.MenuType
  nameWithType: MenuItem.MenuType
- uid: SparkPlug.Business.Menu.Domain.MenuItem.MenuType*
  name: MenuType
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_MenuType_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.MenuType
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.MenuType
  nameWithType: MenuItem.MenuType
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedAt
  name: ModifiedAt
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModifiedAt
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.ModifiedAt
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedAt
  nameWithType: MenuItem.ModifiedAt
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedAt*
  name: ModifiedAt
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModifiedAt_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.ModifiedAt
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedAt
  nameWithType: MenuItem.ModifiedAt
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedBy
  name: ModifiedBy
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModifiedBy
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.ModifiedBy
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedBy
  nameWithType: MenuItem.ModifiedBy
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedBy*
  name: ModifiedBy
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModifiedBy_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.ModifiedBy
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModifiedBy
  nameWithType: MenuItem.ModifiedBy
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModuleCode
  name: ModuleCode
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModuleCode
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.ModuleCode
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModuleCode
  nameWithType: MenuItem.ModuleCode
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModuleCode*
  name: ModuleCode
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModuleCode_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.ModuleCode
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModuleCode
  nameWithType: MenuItem.ModuleCode
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModuleId
  name: ModuleId
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModuleId
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.ModuleId
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModuleId
  nameWithType: MenuItem.ModuleId
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ModuleId*
  name: ModuleId
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ModuleId_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.ModuleId
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ModuleId
  nameWithType: MenuItem.ModuleId
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuCode
  name: ParentMenuCode
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ParentMenuCode
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuCode
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuCode
  nameWithType: MenuItem.ParentMenuCode
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuCode*
  name: ParentMenuCode
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ParentMenuCode_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuCode
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuCode
  nameWithType: MenuItem.ParentMenuCode
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuId
  name: ParentMenuId
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ParentMenuId
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuId
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuId
  nameWithType: MenuItem.ParentMenuId
- uid: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuId*
  name: ParentMenuId
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_ParentMenuId_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuId
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.ParentMenuId
  nameWithType: MenuItem.ParentMenuId
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Revision
  name: Revision
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Revision
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.Revision
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Revision
  nameWithType: MenuItem.Revision
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Revision*
  name: Revision
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Revision_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.Revision
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Revision
  nameWithType: MenuItem.Revision
- uid: SparkPlug.Business.Menu.Domain.MenuItem.SRef
  name: SRef
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_SRef
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.SRef
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.SRef
  nameWithType: MenuItem.SRef
- uid: SparkPlug.Business.Menu.Domain.MenuItem.SRef*
  name: SRef
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_SRef_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.SRef
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.SRef
  nameWithType: MenuItem.SRef
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Status
  name: Status
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Status
  commentId: P:SparkPlug.Business.Menu.Domain.MenuItem.Status
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Status
  nameWithType: MenuItem.Status
- uid: SparkPlug.Business.Menu.Domain.MenuItem.Status*
  name: Status
  href: api/SparkPlug.Business.Menu.Domain.MenuItem.html#SparkPlug_Business_Menu_Domain_MenuItem_Status_
  commentId: Overload:SparkPlug.Business.Menu.Domain.MenuItem.Status
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Domain.MenuItem.Status
  nameWithType: MenuItem.Status
- uid: SparkPlug.Business.Menu.Repository
  name: SparkPlug.Business.Menu.Repository
  href: api/SparkPlug.Business.Menu.Repository.html
  commentId: N:SparkPlug.Business.Menu.Repository
  fullName: SparkPlug.Business.Menu.Repository
  nameWithType: SparkPlug.Business.Menu.Repository
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule
  name: MenuRepositorySqlModule
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html
  commentId: T:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule
  nameWithType: MenuRepositorySqlModule
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html#SparkPlug_Business_Menu_Repository_MenuRepositorySqlModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: MenuRepositorySqlModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html#SparkPlug_Business_Menu_Repository_MenuRepositorySqlModule_AddModule_
  commentId: Overload:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.AddModule
  nameWithType: MenuRepositorySqlModule.AddModule
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html#SparkPlug_Business_Menu_Repository_MenuRepositorySqlModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: MenuRepositorySqlModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html#SparkPlug_Business_Menu_Repository_MenuRepositorySqlModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseMiddelwares
  nameWithType: MenuRepositorySqlModule.UseMiddelwares
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html#SparkPlug_Business_Menu_Repository_MenuRepositorySqlModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: MenuRepositorySqlModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html#SparkPlug_Business_Menu_Repository_MenuRepositorySqlModule_UseModule_
  commentId: Overload:SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.UseModule
  nameWithType: MenuRepositorySqlModule.UseModule
- uid: SparkPlug.Business.Menu.Repository.Sql
  name: SparkPlug.Business.Menu.Repository.Sql
  href: api/SparkPlug.Business.Menu.Repository.Sql.html
  commentId: N:SparkPlug.Business.Menu.Repository.Sql
  fullName: SparkPlug.Business.Menu.Repository.Sql
  nameWithType: SparkPlug.Business.Menu.Repository.Sql
- uid: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration
  name: MenuItemConfiguration
  href: api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html
  commentId: T:SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration
  fullName: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration
  nameWithType: MenuItemConfiguration
- uid: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SparkPlug.Business.Menu.Domain.MenuItem})
  name: Configure(EntityTypeBuilder<MenuItem>)
  href: api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html#SparkPlug_Business_Menu_Repository_Sql_MenuItemConfiguration_Configure_Microsoft_EntityFrameworkCore_Metadata_Builders_EntityTypeBuilder_SparkPlug_Business_Menu_Domain_MenuItem__
  commentId: M:SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SparkPlug.Business.Menu.Domain.MenuItem})
  name.vb: Configure(EntityTypeBuilder(Of MenuItem))
  fullName: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<SparkPlug.Business.Menu.Domain.MenuItem>)
  fullName.vb: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of SparkPlug.Business.Menu.Domain.MenuItem))
  nameWithType: MenuItemConfiguration.Configure(EntityTypeBuilder<MenuItem>)
  nameWithType.vb: MenuItemConfiguration.Configure(EntityTypeBuilder(Of MenuItem))
- uid: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure*
  name: Configure
  href: api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html#SparkPlug_Business_Menu_Repository_Sql_MenuItemConfiguration_Configure_
  commentId: Overload:SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.Configure
  nameWithType: MenuItemConfiguration.Configure
- uid: SparkPlug.Business.Menu.Service
  name: SparkPlug.Business.Menu.Service
  href: api/SparkPlug.Business.Menu.Service.html
  commentId: N:SparkPlug.Business.Menu.Service
  fullName: SparkPlug.Business.Menu.Service
  nameWithType: SparkPlug.Business.Menu.Service
- uid: SparkPlug.Business.Menu.Service.MenuService
  name: MenuService
  href: api/SparkPlug.Business.Menu.Service.MenuService.html
  commentId: T:SparkPlug.Business.Menu.Service.MenuService
  fullName: SparkPlug.Business.Menu.Service.MenuService
  nameWithType: MenuService
- uid: SparkPlug.Business.Menu.Service.MenuService.#ctor(System.IServiceProvider)
  name: MenuService(IServiceProvider)
  href: api/SparkPlug.Business.Menu.Service.MenuService.html#SparkPlug_Business_Menu_Service_MenuService__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Menu.Service.MenuService.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Business.Menu.Service.MenuService.MenuService(System.IServiceProvider)
  fullName.vb: SparkPlug.Business.Menu.Service.MenuService.New(System.IServiceProvider)
  nameWithType: MenuService.MenuService(IServiceProvider)
  nameWithType.vb: MenuService.New(IServiceProvider)
- uid: SparkPlug.Business.Menu.Service.MenuService.#ctor*
  name: MenuService
  href: api/SparkPlug.Business.Menu.Service.MenuService.html#SparkPlug_Business_Menu_Service_MenuService__ctor_
  commentId: Overload:SparkPlug.Business.Menu.Service.MenuService.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Business.Menu.Service.MenuService.MenuService
  fullName.vb: SparkPlug.Business.Menu.Service.MenuService.New
  nameWithType: MenuService.MenuService
  nameWithType.vb: MenuService.New
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule
  name: MenuServiceModule
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html
  commentId: T:SparkPlug.Business.Menu.Service.MenuServiceModule
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule
  nameWithType: MenuServiceModule
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html#SparkPlug_Business_Menu_Service_MenuServiceModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Menu.Service.MenuServiceModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: MenuServiceModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html#SparkPlug_Business_Menu_Service_MenuServiceModule_AddModule_
  commentId: Overload:SparkPlug.Business.Menu.Service.MenuServiceModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule.AddModule
  nameWithType: MenuServiceModule.AddModule
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html#SparkPlug_Business_Menu_Service_MenuServiceModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Menu.Service.MenuServiceModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: MenuServiceModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html#SparkPlug_Business_Menu_Service_MenuServiceModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Menu.Service.MenuServiceModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule.UseMiddelwares
  nameWithType: MenuServiceModule.UseMiddelwares
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html#SparkPlug_Business_Menu_Service_MenuServiceModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Menu.Service.MenuServiceModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: MenuServiceModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Menu.Service.MenuServiceModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Menu.Service.MenuServiceModule.html#SparkPlug_Business_Menu_Service_MenuServiceModule_UseModule_
  commentId: Overload:SparkPlug.Business.Menu.Service.MenuServiceModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Menu.Service.MenuServiceModule.UseModule
  nameWithType: MenuServiceModule.UseModule
- uid: SparkPlug.Business.Tenancy.Api
  name: SparkPlug.Business.Tenancy.Api
  href: api/SparkPlug.Business.Tenancy.Api.html
  commentId: N:SparkPlug.Business.Tenancy.Api
  fullName: SparkPlug.Business.Tenancy.Api
  nameWithType: SparkPlug.Business.Tenancy.Api
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule
  name: TenancyApiModule
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html
  commentId: T:SparkPlug.Business.Tenancy.Api.TenancyApiModule
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule
  nameWithType: TenancyApiModule
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html#SparkPlug_Business_Tenancy_Api_TenancyApiModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Tenancy.Api.TenancyApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: TenancyApiModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html#SparkPlug_Business_Tenancy_Api_TenancyApiModule_AddModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Api.TenancyApiModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule.AddModule
  nameWithType: TenancyApiModule.AddModule
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html#SparkPlug_Business_Tenancy_Api_TenancyApiModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TenancyApiModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html#SparkPlug_Business_Tenancy_Api_TenancyApiModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseMiddelwares
  nameWithType: TenancyApiModule.UseMiddelwares
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html#SparkPlug_Business_Tenancy_Api_TenancyApiModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: TenancyApiModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html#SparkPlug_Business_Tenancy_Api_TenancyApiModule_UseModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Api.TenancyApiModule.UseModule
  nameWithType: TenancyApiModule.UseModule
- uid: SparkPlug.Business.Tenancy.Api.TenantDetailsController
  name: TenantDetailsController
  href: api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html
  commentId: T:SparkPlug.Business.Tenancy.Api.TenantDetailsController
  fullName: SparkPlug.Business.Tenancy.Api.TenantDetailsController
  nameWithType: TenantDetailsController
- uid: SparkPlug.Business.Tenancy.Api.TenantDetailsController.#ctor(System.IServiceProvider)
  name: TenantDetailsController(IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html#SparkPlug_Business_Tenancy_Api_TenantDetailsController__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Api.TenantDetailsController.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Api.TenantDetailsController.TenantDetailsController(System.IServiceProvider)
  fullName.vb: SparkPlug.Business.Tenancy.Api.TenantDetailsController.New(System.IServiceProvider)
  nameWithType: TenantDetailsController.TenantDetailsController(IServiceProvider)
  nameWithType.vb: TenantDetailsController.New(IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Api.TenantDetailsController.#ctor*
  name: TenantDetailsController
  href: api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html#SparkPlug_Business_Tenancy_Api_TenantDetailsController__ctor_
  commentId: Overload:SparkPlug.Business.Tenancy.Api.TenantDetailsController.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Business.Tenancy.Api.TenantDetailsController.TenantDetailsController
  fullName.vb: SparkPlug.Business.Tenancy.Api.TenantDetailsController.New
  nameWithType: TenantDetailsController.TenantDetailsController
  nameWithType.vb: TenantDetailsController.New
- uid: SparkPlug.Business.Tenancy.Domain
  name: SparkPlug.Business.Tenancy.Domain
  href: api/SparkPlug.Business.Tenancy.Domain.html
  commentId: N:SparkPlug.Business.Tenancy.Domain
  fullName: SparkPlug.Business.Tenancy.Domain
  nameWithType: SparkPlug.Business.Tenancy.Domain
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule
  name: TenancyDomainModule
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html
  commentId: T:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule
  nameWithType: TenancyDomainModule
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html#SparkPlug_Business_Tenancy_Domain_TenancyDomainModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: TenancyDomainModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html#SparkPlug_Business_Tenancy_Domain_TenancyDomainModule_AddModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.AddModule
  nameWithType: TenancyDomainModule.AddModule
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html#SparkPlug_Business_Tenancy_Domain_TenancyDomainModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TenancyDomainModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html#SparkPlug_Business_Tenancy_Domain_TenancyDomainModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseMiddelwares
  nameWithType: TenancyDomainModule.UseMiddelwares
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html#SparkPlug_Business_Tenancy_Domain_TenancyDomainModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: TenancyDomainModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html#SparkPlug_Business_Tenancy_Domain_TenancyDomainModule_UseModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.UseModule
  nameWithType: TenancyDomainModule.UseModule
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails
  name: TenantDetails
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html
  commentId: T:SparkPlug.Business.Tenancy.Domain.TenantDetails
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails
  nameWithType: TenantDetails
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedAt
  name: CreatedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_CreatedAt
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedAt
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedAt
  nameWithType: TenantDetails.CreatedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedAt*
  name: CreatedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_CreatedAt_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedAt
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedAt
  nameWithType: TenantDetails.CreatedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedBy
  name: CreatedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_CreatedBy
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedBy
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedBy
  nameWithType: TenantDetails.CreatedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedBy*
  name: CreatedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_CreatedBy_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedBy
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.CreatedBy
  nameWithType: TenantDetails.CreatedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Id
  name: Id
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Id
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.Id
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Id
  nameWithType: TenantDetails.Id
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Id*
  name: Id
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Id_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.Id
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Id
  nameWithType: TenantDetails.Id
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedAt
  name: ModifiedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_ModifiedAt
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedAt
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedAt
  nameWithType: TenantDetails.ModifiedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedAt*
  name: ModifiedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_ModifiedAt_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedAt
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedAt
  nameWithType: TenantDetails.ModifiedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedBy
  name: ModifiedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_ModifiedBy
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedBy
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedBy
  nameWithType: TenantDetails.ModifiedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedBy*
  name: ModifiedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_ModifiedBy_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedBy
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.ModifiedBy
  nameWithType: TenantDetails.ModifiedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Name
  name: Name
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Name
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.Name
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Name
  nameWithType: TenantDetails.Name
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Name*
  name: Name
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Name_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.Name
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Name
  nameWithType: TenantDetails.Name
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Options
  name: Options
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Options
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.Options
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Options
  nameWithType: TenantDetails.Options
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Options*
  name: Options
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Options_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.Options
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Options
  nameWithType: TenantDetails.Options
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Revision
  name: Revision
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Revision
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.Revision
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Revision
  nameWithType: TenantDetails.Revision
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Revision*
  name: Revision
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Revision_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.Revision
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Revision
  nameWithType: TenantDetails.Revision
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Status
  name: Status
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Status
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.Status
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Status
  nameWithType: TenantDetails.Status
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.Status*
  name: Status
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_Status_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.Status
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.Status
  nameWithType: TenantDetails.Status
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.TenantId
  name: TenantId
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_TenantId
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantDetails.TenantId
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.TenantId
  nameWithType: TenantDetails.TenantId
- uid: SparkPlug.Business.Tenancy.Domain.TenantDetails.TenantId*
  name: TenantId
  href: api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html#SparkPlug_Business_Tenancy_Domain_TenantDetails_TenantId_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantDetails.TenantId
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantDetails.TenantId
  nameWithType: TenantDetails.TenantId
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption
  name: TenantOption
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html
  commentId: T:SparkPlug.Business.Tenancy.Domain.TenantOption
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption
  nameWithType: TenantOption
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedAt
  name: CreatedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_CreatedAt
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedAt
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedAt
  nameWithType: TenantOption.CreatedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedAt*
  name: CreatedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_CreatedAt_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedAt
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedAt
  nameWithType: TenantOption.CreatedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedBy
  name: CreatedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_CreatedBy
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedBy
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedBy
  nameWithType: TenantOption.CreatedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedBy*
  name: CreatedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_CreatedBy_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedBy
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.CreatedBy
  nameWithType: TenantOption.CreatedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Id
  name: Id
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Id
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.Id
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Id
  nameWithType: TenantOption.Id
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Id*
  name: Id
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Id_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.Id
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Id
  nameWithType: TenantOption.Id
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Key
  name: Key
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Key
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.Key
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Key
  nameWithType: TenantOption.Key
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Key*
  name: Key
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Key_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.Key
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Key
  nameWithType: TenantOption.Key
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedAt
  name: ModifiedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_ModifiedAt
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedAt
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedAt
  nameWithType: TenantOption.ModifiedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedAt*
  name: ModifiedAt
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_ModifiedAt_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedAt
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedAt
  nameWithType: TenantOption.ModifiedAt
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedBy
  name: ModifiedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_ModifiedBy
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedBy
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedBy
  nameWithType: TenantOption.ModifiedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedBy*
  name: ModifiedBy
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_ModifiedBy_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedBy
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.ModifiedBy
  nameWithType: TenantOption.ModifiedBy
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Revision
  name: Revision
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Revision
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.Revision
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Revision
  nameWithType: TenantOption.Revision
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Revision*
  name: Revision
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Revision_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.Revision
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Revision
  nameWithType: TenantOption.Revision
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Status
  name: Status
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Status
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.Status
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Status
  nameWithType: TenantOption.Status
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Status*
  name: Status
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Status_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.Status
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Status
  nameWithType: TenantOption.Status
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Tenant
  name: Tenant
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Tenant
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.Tenant
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Tenant
  nameWithType: TenantOption.Tenant
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Tenant*
  name: Tenant
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Tenant_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.Tenant
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Tenant
  nameWithType: TenantOption.Tenant
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.TenantDetailId
  name: TenantDetailId
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_TenantDetailId
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.TenantDetailId
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.TenantDetailId
  nameWithType: TenantOption.TenantDetailId
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.TenantDetailId*
  name: TenantDetailId
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_TenantDetailId_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.TenantDetailId
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.TenantDetailId
  nameWithType: TenantOption.TenantDetailId
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Value
  name: Value
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Value
  commentId: P:SparkPlug.Business.Tenancy.Domain.TenantOption.Value
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Value
  nameWithType: TenantOption.Value
- uid: SparkPlug.Business.Tenancy.Domain.TenantOption.Value*
  name: Value
  href: api/SparkPlug.Business.Tenancy.Domain.TenantOption.html#SparkPlug_Business_Tenancy_Domain_TenantOption_Value_
  commentId: Overload:SparkPlug.Business.Tenancy.Domain.TenantOption.Value
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Domain.TenantOption.Value
  nameWithType: TenantOption.Value
- uid: SparkPlug.Business.Tenancy.Repository.Mongo
  name: SparkPlug.Business.Tenancy.Repository.Mongo
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.html
  commentId: N:SparkPlug.Business.Tenancy.Repository.Mongo
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo
  nameWithType: SparkPlug.Business.Tenancy.Repository.Mongo
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule
  name: TenancyRepositoryMongoModule
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html
  commentId: T:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule
  nameWithType: TenancyRepositoryMongoModule
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html#SparkPlug_Business_Tenancy_Repository_Mongo_TenancyRepositoryMongoModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: TenancyRepositoryMongoModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html#SparkPlug_Business_Tenancy_Repository_Mongo_TenancyRepositoryMongoModule_AddModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.AddModule
  nameWithType: TenancyRepositoryMongoModule.AddModule
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html#SparkPlug_Business_Tenancy_Repository_Mongo_TenancyRepositoryMongoModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TenancyRepositoryMongoModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html#SparkPlug_Business_Tenancy_Repository_Mongo_TenancyRepositoryMongoModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseMiddelwares
  nameWithType: TenancyRepositoryMongoModule.UseMiddelwares
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html#SparkPlug_Business_Tenancy_Repository_Mongo_TenancyRepositoryMongoModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: TenancyRepositoryMongoModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html#SparkPlug_Business_Tenancy_Repository_Mongo_TenancyRepositoryMongoModule_UseModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.UseModule
  nameWithType: TenancyRepositoryMongoModule.UseModule
- uid: SparkPlug.Business.Tenancy.Repository.Sql
  name: SparkPlug.Business.Tenancy.Repository.Sql
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.html
  commentId: N:SparkPlug.Business.Tenancy.Repository.Sql
  fullName: SparkPlug.Business.Tenancy.Repository.Sql
  nameWithType: SparkPlug.Business.Tenancy.Repository.Sql
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule
  name: TenancyRepositorySqlModule
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html
  commentId: T:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule
  nameWithType: TenancyRepositorySqlModule
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html#SparkPlug_Business_Tenancy_Repository_Sql_TenancyRepositorySqlModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: TenancyRepositorySqlModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html#SparkPlug_Business_Tenancy_Repository_Sql_TenancyRepositorySqlModule_AddModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.AddModule
  nameWithType: TenancyRepositorySqlModule.AddModule
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html#SparkPlug_Business_Tenancy_Repository_Sql_TenancyRepositorySqlModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TenancyRepositorySqlModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html#SparkPlug_Business_Tenancy_Repository_Sql_TenancyRepositorySqlModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseMiddelwares
  nameWithType: TenancyRepositorySqlModule.UseMiddelwares
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html#SparkPlug_Business_Tenancy_Repository_Sql_TenancyRepositorySqlModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: TenancyRepositorySqlModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html#SparkPlug_Business_Tenancy_Repository_Sql_TenancyRepositorySqlModule_UseModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.UseModule
  nameWithType: TenancyRepositorySqlModule.UseModule
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration
  name: TenantDetailsConfiguration
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html
  commentId: T:SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration
  nameWithType: TenantDetailsConfiguration
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SparkPlug.Business.Tenancy.Domain.TenantDetails})
  name: Configure(EntityTypeBuilder<TenantDetails>)
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html#SparkPlug_Business_Tenancy_Repository_Sql_TenantDetailsConfiguration_Configure_Microsoft_EntityFrameworkCore_Metadata_Builders_EntityTypeBuilder_SparkPlug_Business_Tenancy_Domain_TenantDetails__
  commentId: M:SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SparkPlug.Business.Tenancy.Domain.TenantDetails})
  name.vb: Configure(EntityTypeBuilder(Of TenantDetails))
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<SparkPlug.Business.Tenancy.Domain.TenantDetails>)
  fullName.vb: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of SparkPlug.Business.Tenancy.Domain.TenantDetails))
  nameWithType: TenantDetailsConfiguration.Configure(EntityTypeBuilder<TenantDetails>)
  nameWithType.vb: TenantDetailsConfiguration.Configure(EntityTypeBuilder(Of TenantDetails))
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure*
  name: Configure
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html#SparkPlug_Business_Tenancy_Repository_Sql_TenantDetailsConfiguration_Configure_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.Configure
  nameWithType: TenantDetailsConfiguration.Configure
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration
  name: TenantOptionConfiguration
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html
  commentId: T:SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration
  nameWithType: TenantOptionConfiguration
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SparkPlug.Business.Tenancy.Domain.TenantOption})
  name: Configure(EntityTypeBuilder<TenantOption>)
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html#SparkPlug_Business_Tenancy_Repository_Sql_TenantOptionConfiguration_Configure_Microsoft_EntityFrameworkCore_Metadata_Builders_EntityTypeBuilder_SparkPlug_Business_Tenancy_Domain_TenantOption__
  commentId: M:SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{SparkPlug.Business.Tenancy.Domain.TenantOption})
  name.vb: Configure(EntityTypeBuilder(Of TenantOption))
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder<SparkPlug.Business.Tenancy.Domain.TenantOption>)
  fullName.vb: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder(Of SparkPlug.Business.Tenancy.Domain.TenantOption))
  nameWithType: TenantOptionConfiguration.Configure(EntityTypeBuilder<TenantOption>)
  nameWithType.vb: TenantOptionConfiguration.Configure(EntityTypeBuilder(Of TenantOption))
- uid: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure*
  name: Configure
  href: api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html#SparkPlug_Business_Tenancy_Repository_Sql_TenantOptionConfiguration_Configure_
  commentId: Overload:SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.Configure
  nameWithType: TenantOptionConfiguration.Configure
- uid: SparkPlug.Business.Tenancy.Service
  name: SparkPlug.Business.Tenancy.Service
  href: api/SparkPlug.Business.Tenancy.Service.html
  commentId: N:SparkPlug.Business.Tenancy.Service
  fullName: SparkPlug.Business.Tenancy.Service
  nameWithType: SparkPlug.Business.Tenancy.Service
- uid: SparkPlug.Business.Tenancy.Service.ITenantResolver
  name: ITenantResolver
  href: api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html
  commentId: T:SparkPlug.Business.Tenancy.Service.ITenantResolver
  fullName: SparkPlug.Business.Tenancy.Service.ITenantResolver
  nameWithType: ITenantResolver
- uid: SparkPlug.Business.Tenancy.Service.ITenantResolver.GetAllTenantsAsync(System.Threading.CancellationToken)
  name: GetAllTenantsAsync(CancellationToken)
  href: api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html#SparkPlug_Business_Tenancy_Service_ITenantResolver_GetAllTenantsAsync_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Business.Tenancy.Service.ITenantResolver.GetAllTenantsAsync(System.Threading.CancellationToken)
  fullName: SparkPlug.Business.Tenancy.Service.ITenantResolver.GetAllTenantsAsync(System.Threading.CancellationToken)
  nameWithType: ITenantResolver.GetAllTenantsAsync(CancellationToken)
- uid: SparkPlug.Business.Tenancy.Service.ITenantResolver.GetAllTenantsAsync*
  name: GetAllTenantsAsync
  href: api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html#SparkPlug_Business_Tenancy_Service_ITenantResolver_GetAllTenantsAsync_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.ITenantResolver.GetAllTenantsAsync
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.ITenantResolver.GetAllTenantsAsync
  nameWithType: ITenantResolver.GetAllTenantsAsync
- uid: SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync(System.String,System.Threading.CancellationToken)
  name: ResolveAsync(string?, CancellationToken)
  href: api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html#SparkPlug_Business_Tenancy_Service_ITenantResolver_ResolveAsync_System_String_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync(System.String,System.Threading.CancellationToken)
  name.vb: ResolveAsync(String, CancellationToken)
  fullName: SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync(string?, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync(String, System.Threading.CancellationToken)
  nameWithType: ITenantResolver.ResolveAsync(string?, CancellationToken)
  nameWithType.vb: ITenantResolver.ResolveAsync(String, CancellationToken)
- uid: SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync*
  name: ResolveAsync
  href: api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html#SparkPlug_Business_Tenancy_Service_ITenantResolver_ResolveAsync_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.ITenantResolver.ResolveAsync
  nameWithType: ITenantResolver.ResolveAsync
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule
  name: TenancyServiceModule
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html
  commentId: T:SparkPlug.Business.Tenancy.Service.TenancyServiceModule
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule
  nameWithType: TenancyServiceModule
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html#SparkPlug_Business_Tenancy_Service_TenancyServiceModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenancyServiceModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: TenancyServiceModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html#SparkPlug_Business_Tenancy_Service_TenancyServiceModule_AddModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenancyServiceModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.AddModule
  nameWithType: TenancyServiceModule.AddModule
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html#SparkPlug_Business_Tenancy_Service_TenancyServiceModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: TenancyServiceModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html#SparkPlug_Business_Tenancy_Service_TenancyServiceModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseMiddelwares
  nameWithType: TenancyServiceModule.UseMiddelwares
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html#SparkPlug_Business_Tenancy_Service_TenancyServiceModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: TenancyServiceModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html#SparkPlug_Business_Tenancy_Service_TenancyServiceModule_UseModule_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenancyServiceModule.UseModule
  nameWithType: TenancyServiceModule.UseModule
- uid: SparkPlug.Business.Tenancy.Service.Tenant
  name: Tenant
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html
  commentId: T:SparkPlug.Business.Tenancy.Service.Tenant
  fullName: SparkPlug.Business.Tenancy.Service.Tenant
  nameWithType: Tenant
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Default
  name: Default
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Default
  commentId: P:SparkPlug.Business.Tenancy.Service.Tenant.Default
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Default
  nameWithType: Tenant.Default
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Default*
  name: Default
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Default_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.Tenant.Default
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Default
  nameWithType: Tenant.Default
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Id
  name: Id
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Id
  commentId: P:SparkPlug.Business.Tenancy.Service.Tenant.Id
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Id
  nameWithType: Tenant.Id
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Id*
  name: Id
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Id_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.Tenant.Id
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Id
  nameWithType: Tenant.Id
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Name
  name: Name
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Name
  commentId: P:SparkPlug.Business.Tenancy.Service.Tenant.Name
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Name
  nameWithType: Tenant.Name
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Name*
  name: Name
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Name_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.Tenant.Name
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Name
  nameWithType: Tenant.Name
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Options
  name: Options
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Options
  commentId: P:SparkPlug.Business.Tenancy.Service.Tenant.Options
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Options
  nameWithType: Tenant.Options
- uid: SparkPlug.Business.Tenancy.Service.Tenant.Options*
  name: Options
  href: api/SparkPlug.Business.Tenancy.Service.Tenant.html#SparkPlug_Business_Tenancy_Service_Tenant_Options_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.Tenant.Options
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.Tenant.Options
  nameWithType: Tenant.Options
- uid: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware
  name: TenantResolverMiddleware
  href: api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html
  commentId: T:SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware
  fullName: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware
  nameWithType: TenantResolverMiddleware
- uid: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.IServiceProvider)
  name: TenantResolverMiddleware(RequestDelegate, IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html#SparkPlug_Business_Tenancy_Service_TenantResolverMiddleware__ctor_Microsoft_AspNetCore_Http_RequestDelegate_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.IServiceProvider)
  name.vb: New(RequestDelegate, IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.TenantResolverMiddleware(Microsoft.AspNetCore.Http.RequestDelegate, System.IServiceProvider)
  fullName.vb: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.New(Microsoft.AspNetCore.Http.RequestDelegate, System.IServiceProvider)
  nameWithType: TenantResolverMiddleware.TenantResolverMiddleware(RequestDelegate, IServiceProvider)
  nameWithType.vb: TenantResolverMiddleware.New(RequestDelegate, IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.#ctor*
  name: TenantResolverMiddleware
  href: api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html#SparkPlug_Business_Tenancy_Service_TenantResolverMiddleware__ctor_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.TenantResolverMiddleware
  fullName.vb: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.New
  nameWithType: TenantResolverMiddleware.TenantResolverMiddleware
  nameWithType.vb: TenantResolverMiddleware.New
- uid: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,SparkPlug.Business.Tenancy.Service.ITenantResolver)
  name: InvokeAsync(HttpContext, ITenantResolver)
  href: api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html#SparkPlug_Business_Tenancy_Service_TenantResolverMiddleware_InvokeAsync_Microsoft_AspNetCore_Http_HttpContext_SparkPlug_Business_Tenancy_Service_ITenantResolver_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext,SparkPlug.Business.Tenancy.Service.ITenantResolver)
  fullName: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext, SparkPlug.Business.Tenancy.Service.ITenantResolver)
  nameWithType: TenantResolverMiddleware.InvokeAsync(HttpContext, ITenantResolver)
- uid: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.InvokeAsync*
  name: InvokeAsync
  href: api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html#SparkPlug_Business_Tenancy_Service_TenantResolverMiddleware_InvokeAsync_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.InvokeAsync
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.InvokeAsync
  nameWithType: TenantResolverMiddleware.InvokeAsync
- uid: SparkPlug.Business.Tenancy.Service.TenantService
  name: TenantService
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html
  commentId: T:SparkPlug.Business.Tenancy.Service.TenantService
  fullName: SparkPlug.Business.Tenancy.Service.TenantService
  nameWithType: TenantService
- uid: SparkPlug.Business.Tenancy.Service.TenantService.#ctor(System.IServiceProvider)
  name: TenantService(IServiceProvider)
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenantService.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.TenantService(System.IServiceProvider)
  fullName.vb: SparkPlug.Business.Tenancy.Service.TenantService.New(System.IServiceProvider)
  nameWithType: TenantService.TenantService(IServiceProvider)
  nameWithType.vb: TenantService.New(IServiceProvider)
- uid: SparkPlug.Business.Tenancy.Service.TenantService.#ctor*
  name: TenantService
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService__ctor_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenantService.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.TenantService
  fullName.vb: SparkPlug.Business.Tenancy.Service.TenantService.New
  nameWithType: TenantService.TenantService
  nameWithType.vb: TenantService.New
- uid: SparkPlug.Business.Tenancy.Service.TenantService.GetAllTenantsAsync(System.Threading.CancellationToken)
  name: GetAllTenantsAsync(CancellationToken)
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService_GetAllTenantsAsync_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenantService.GetAllTenantsAsync(System.Threading.CancellationToken)
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.GetAllTenantsAsync(System.Threading.CancellationToken)
  nameWithType: TenantService.GetAllTenantsAsync(CancellationToken)
- uid: SparkPlug.Business.Tenancy.Service.TenantService.GetAllTenantsAsync*
  name: GetAllTenantsAsync
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService_GetAllTenantsAsync_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenantService.GetAllTenantsAsync
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.GetAllTenantsAsync
  nameWithType: TenantService.GetAllTenantsAsync
- uid: SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId(System.String,System.Threading.CancellationToken)
  name: GetByTenantId(string?, CancellationToken)
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService_GetByTenantId_System_String_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId(System.String,System.Threading.CancellationToken)
  name.vb: GetByTenantId(String, CancellationToken)
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId(string?, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId(String, System.Threading.CancellationToken)
  nameWithType: TenantService.GetByTenantId(string?, CancellationToken)
  nameWithType.vb: TenantService.GetByTenantId(String, CancellationToken)
- uid: SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId*
  name: GetByTenantId
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService_GetByTenantId_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.GetByTenantId
  nameWithType: TenantService.GetByTenantId
- uid: SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync(System.String,System.Threading.CancellationToken)
  name: ResolveAsync(string?, CancellationToken)
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService_ResolveAsync_System_String_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync(System.String,System.Threading.CancellationToken)
  name.vb: ResolveAsync(String, CancellationToken)
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync(string?, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync(String, System.Threading.CancellationToken)
  nameWithType: TenantService.ResolveAsync(string?, CancellationToken)
  nameWithType.vb: TenantService.ResolveAsync(String, CancellationToken)
- uid: SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync*
  name: ResolveAsync
  href: api/SparkPlug.Business.Tenancy.Service.TenantService.html#SparkPlug_Business_Tenancy_Service_TenantService_ResolveAsync_
  commentId: Overload:SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync
  isSpec: "True"
  fullName: SparkPlug.Business.Tenancy.Service.TenantService.ResolveAsync
  nameWithType: TenantService.ResolveAsync
- uid: SparkPlug.Contracts
  name: SparkPlug.Contracts
  href: api/SparkPlug.Contracts.html
  commentId: N:SparkPlug.Contracts
  fullName: SparkPlug.Contracts
  nameWithType: SparkPlug.Contracts
- uid: SparkPlug.Contracts.ApiRequest
  name: ApiRequest
  href: api/SparkPlug.Contracts.ApiRequest.html
  commentId: T:SparkPlug.Contracts.ApiRequest
  fullName: SparkPlug.Contracts.ApiRequest
  nameWithType: ApiRequest
- uid: SparkPlug.Contracts.ApiRequest.Deps
  name: Deps
  href: api/SparkPlug.Contracts.ApiRequest.html#SparkPlug_Contracts_ApiRequest_Deps
  commentId: P:SparkPlug.Contracts.ApiRequest.Deps
  fullName: SparkPlug.Contracts.ApiRequest.Deps
  nameWithType: ApiRequest.Deps
- uid: SparkPlug.Contracts.ApiRequest.Deps*
  name: Deps
  href: api/SparkPlug.Contracts.ApiRequest.html#SparkPlug_Contracts_ApiRequest_Deps_
  commentId: Overload:SparkPlug.Contracts.ApiRequest.Deps
  isSpec: "True"
  fullName: SparkPlug.Contracts.ApiRequest.Deps
  nameWithType: ApiRequest.Deps
- uid: SparkPlug.Contracts.ApiResponse
  name: ApiResponse
  href: api/SparkPlug.Contracts.ApiResponse.html
  commentId: T:SparkPlug.Contracts.ApiResponse
  fullName: SparkPlug.Contracts.ApiResponse
  nameWithType: ApiResponse
- uid: SparkPlug.Contracts.CommandRequest`1
  name: CommandRequest<TEntity>
  href: api/SparkPlug.Contracts.CommandRequest-1.html
  commentId: T:SparkPlug.Contracts.CommandRequest`1
  name.vb: CommandRequest(Of TEntity)
  fullName: SparkPlug.Contracts.CommandRequest<TEntity>
  fullName.vb: SparkPlug.Contracts.CommandRequest(Of TEntity)
  nameWithType: CommandRequest<TEntity>
  nameWithType.vb: CommandRequest(Of TEntity)
- uid: SparkPlug.Contracts.CommandRequest`1.#ctor(`0)
  name: CommandRequest(TEntity?)
  href: api/SparkPlug.Contracts.CommandRequest-1.html#SparkPlug_Contracts_CommandRequest_1__ctor__0_
  commentId: M:SparkPlug.Contracts.CommandRequest`1.#ctor(`0)
  name.vb: New(TEntity)
  fullName: SparkPlug.Contracts.CommandRequest<TEntity>.CommandRequest(TEntity?)
  fullName.vb: SparkPlug.Contracts.CommandRequest(Of TEntity).New(TEntity)
  nameWithType: CommandRequest<TEntity>.CommandRequest(TEntity?)
  nameWithType.vb: CommandRequest(Of TEntity).New(TEntity)
- uid: SparkPlug.Contracts.CommandRequest`1.#ctor*
  name: CommandRequest
  href: api/SparkPlug.Contracts.CommandRequest-1.html#SparkPlug_Contracts_CommandRequest_1__ctor_
  commentId: Overload:SparkPlug.Contracts.CommandRequest`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.CommandRequest<TEntity>.CommandRequest
  fullName.vb: SparkPlug.Contracts.CommandRequest(Of TEntity).New
  nameWithType: CommandRequest<TEntity>.CommandRequest
  nameWithType.vb: CommandRequest(Of TEntity).New
- uid: SparkPlug.Contracts.CommandRequest`1.Data
  name: Data
  href: api/SparkPlug.Contracts.CommandRequest-1.html#SparkPlug_Contracts_CommandRequest_1_Data
  commentId: P:SparkPlug.Contracts.CommandRequest`1.Data
  fullName: SparkPlug.Contracts.CommandRequest<TEntity>.Data
  fullName.vb: SparkPlug.Contracts.CommandRequest(Of TEntity).Data
  nameWithType: CommandRequest<TEntity>.Data
  nameWithType.vb: CommandRequest(Of TEntity).Data
- uid: SparkPlug.Contracts.CommandRequest`1.Data*
  name: Data
  href: api/SparkPlug.Contracts.CommandRequest-1.html#SparkPlug_Contracts_CommandRequest_1_Data_
  commentId: Overload:SparkPlug.Contracts.CommandRequest`1.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.CommandRequest<TEntity>.Data
  fullName.vb: SparkPlug.Contracts.CommandRequest(Of TEntity).Data
  nameWithType: CommandRequest<TEntity>.Data
  nameWithType.vb: CommandRequest(Of TEntity).Data
- uid: SparkPlug.Contracts.CommandResponse
  name: CommandResponse
  href: api/SparkPlug.Contracts.CommandResponse.html
  commentId: T:SparkPlug.Contracts.CommandResponse
  fullName: SparkPlug.Contracts.CommandResponse
  nameWithType: CommandResponse
- uid: SparkPlug.Contracts.CommandResponse.#ctor(System.Object)
  name: CommandResponse(object?)
  href: api/SparkPlug.Contracts.CommandResponse.html#SparkPlug_Contracts_CommandResponse__ctor_System_Object_
  commentId: M:SparkPlug.Contracts.CommandResponse.#ctor(System.Object)
  name.vb: New(Object)
  fullName: SparkPlug.Contracts.CommandResponse.CommandResponse(object?)
  fullName.vb: SparkPlug.Contracts.CommandResponse.New(Object)
  nameWithType: CommandResponse.CommandResponse(object?)
  nameWithType.vb: CommandResponse.New(Object)
- uid: SparkPlug.Contracts.CommandResponse.#ctor*
  name: CommandResponse
  href: api/SparkPlug.Contracts.CommandResponse.html#SparkPlug_Contracts_CommandResponse__ctor_
  commentId: Overload:SparkPlug.Contracts.CommandResponse.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.CommandResponse.CommandResponse
  fullName.vb: SparkPlug.Contracts.CommandResponse.New
  nameWithType: CommandResponse.CommandResponse
  nameWithType.vb: CommandResponse.New
- uid: SparkPlug.Contracts.CommandResponse.Data
  name: Data
  href: api/SparkPlug.Contracts.CommandResponse.html#SparkPlug_Contracts_CommandResponse_Data
  commentId: P:SparkPlug.Contracts.CommandResponse.Data
  fullName: SparkPlug.Contracts.CommandResponse.Data
  nameWithType: CommandResponse.Data
- uid: SparkPlug.Contracts.CommandResponse.Data*
  name: Data
  href: api/SparkPlug.Contracts.CommandResponse.html#SparkPlug_Contracts_CommandResponse_Data_
  commentId: Overload:SparkPlug.Contracts.CommandResponse.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.CommandResponse.Data
  nameWithType: CommandResponse.Data
- uid: SparkPlug.Contracts.CompositeFilter
  name: CompositeFilter
  href: api/SparkPlug.Contracts.CompositeFilter.html
  commentId: T:SparkPlug.Contracts.CompositeFilter
  fullName: SparkPlug.Contracts.CompositeFilter
  nameWithType: CompositeFilter
- uid: SparkPlug.Contracts.CompositeFilter.#ctor(SparkPlug.Contracts.CompositeOperator,SparkPlug.Contracts.Filter[])
  name: CompositeFilter(CompositeOperator, params Filter[]?)
  href: api/SparkPlug.Contracts.CompositeFilter.html#SparkPlug_Contracts_CompositeFilter__ctor_SparkPlug_Contracts_CompositeOperator_SparkPlug_Contracts_Filter___
  commentId: M:SparkPlug.Contracts.CompositeFilter.#ctor(SparkPlug.Contracts.CompositeOperator,SparkPlug.Contracts.Filter[])
  name.vb: New(CompositeOperator, ParamArray Filter())
  fullName: SparkPlug.Contracts.CompositeFilter.CompositeFilter(SparkPlug.Contracts.CompositeOperator, params SparkPlug.Contracts.Filter[]?)
  fullName.vb: SparkPlug.Contracts.CompositeFilter.New(SparkPlug.Contracts.CompositeOperator, ParamArray SparkPlug.Contracts.Filter())
  nameWithType: CompositeFilter.CompositeFilter(CompositeOperator, params Filter[]?)
  nameWithType.vb: CompositeFilter.New(CompositeOperator, ParamArray Filter())
- uid: SparkPlug.Contracts.CompositeFilter.#ctor*
  name: CompositeFilter
  href: api/SparkPlug.Contracts.CompositeFilter.html#SparkPlug_Contracts_CompositeFilter__ctor_
  commentId: Overload:SparkPlug.Contracts.CompositeFilter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.CompositeFilter.CompositeFilter
  fullName.vb: SparkPlug.Contracts.CompositeFilter.New
  nameWithType: CompositeFilter.CompositeFilter
  nameWithType.vb: CompositeFilter.New
- uid: SparkPlug.Contracts.CompositeFilter.Filters
  name: Filters
  href: api/SparkPlug.Contracts.CompositeFilter.html#SparkPlug_Contracts_CompositeFilter_Filters
  commentId: P:SparkPlug.Contracts.CompositeFilter.Filters
  fullName: SparkPlug.Contracts.CompositeFilter.Filters
  nameWithType: CompositeFilter.Filters
- uid: SparkPlug.Contracts.CompositeFilter.Filters*
  name: Filters
  href: api/SparkPlug.Contracts.CompositeFilter.html#SparkPlug_Contracts_CompositeFilter_Filters_
  commentId: Overload:SparkPlug.Contracts.CompositeFilter.Filters
  isSpec: "True"
  fullName: SparkPlug.Contracts.CompositeFilter.Filters
  nameWithType: CompositeFilter.Filters
- uid: SparkPlug.Contracts.CompositeFilter.Op
  name: Op
  href: api/SparkPlug.Contracts.CompositeFilter.html#SparkPlug_Contracts_CompositeFilter_Op
  commentId: P:SparkPlug.Contracts.CompositeFilter.Op
  fullName: SparkPlug.Contracts.CompositeFilter.Op
  nameWithType: CompositeFilter.Op
- uid: SparkPlug.Contracts.CompositeFilter.Op*
  name: Op
  href: api/SparkPlug.Contracts.CompositeFilter.html#SparkPlug_Contracts_CompositeFilter_Op_
  commentId: Overload:SparkPlug.Contracts.CompositeFilter.Op
  isSpec: "True"
  fullName: SparkPlug.Contracts.CompositeFilter.Op
  nameWithType: CompositeFilter.Op
- uid: SparkPlug.Contracts.CompositeOperator
  name: CompositeOperator
  href: api/SparkPlug.Contracts.CompositeOperator.html
  commentId: T:SparkPlug.Contracts.CompositeOperator
  fullName: SparkPlug.Contracts.CompositeOperator
  nameWithType: CompositeOperator
- uid: SparkPlug.Contracts.CompositeOperator.And
  name: And
  href: api/SparkPlug.Contracts.CompositeOperator.html#SparkPlug_Contracts_CompositeOperator_And
  commentId: F:SparkPlug.Contracts.CompositeOperator.And
  fullName: SparkPlug.Contracts.CompositeOperator.And
  nameWithType: CompositeOperator.And
- uid: SparkPlug.Contracts.CompositeOperator.Or
  name: Or
  href: api/SparkPlug.Contracts.CompositeOperator.html#SparkPlug_Contracts_CompositeOperator_Or
  commentId: F:SparkPlug.Contracts.CompositeOperator.Or
  fullName: SparkPlug.Contracts.CompositeOperator.Or
  nameWithType: CompositeOperator.Or
- uid: SparkPlug.Contracts.CompositeRequest
  name: CompositeRequest
  href: api/SparkPlug.Contracts.CompositeRequest.html
  commentId: T:SparkPlug.Contracts.CompositeRequest
  fullName: SparkPlug.Contracts.CompositeRequest
  nameWithType: CompositeRequest
- uid: SparkPlug.Contracts.CompositeRequest.#ctor
  name: CompositeRequest()
  href: api/SparkPlug.Contracts.CompositeRequest.html#SparkPlug_Contracts_CompositeRequest__ctor
  commentId: M:SparkPlug.Contracts.CompositeRequest.#ctor
  name.vb: New()
  fullName: SparkPlug.Contracts.CompositeRequest.CompositeRequest()
  fullName.vb: SparkPlug.Contracts.CompositeRequest.New()
  nameWithType: CompositeRequest.CompositeRequest()
  nameWithType.vb: CompositeRequest.New()
- uid: SparkPlug.Contracts.CompositeRequest.#ctor*
  name: CompositeRequest
  href: api/SparkPlug.Contracts.CompositeRequest.html#SparkPlug_Contracts_CompositeRequest__ctor_
  commentId: Overload:SparkPlug.Contracts.CompositeRequest.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.CompositeRequest.CompositeRequest
  fullName.vb: SparkPlug.Contracts.CompositeRequest.New
  nameWithType: CompositeRequest.CompositeRequest
  nameWithType.vb: CompositeRequest.New
- uid: SparkPlug.Contracts.CompositeRequest.Requests
  name: Requests
  href: api/SparkPlug.Contracts.CompositeRequest.html#SparkPlug_Contracts_CompositeRequest_Requests
  commentId: P:SparkPlug.Contracts.CompositeRequest.Requests
  fullName: SparkPlug.Contracts.CompositeRequest.Requests
  nameWithType: CompositeRequest.Requests
- uid: SparkPlug.Contracts.CompositeRequest.Requests*
  name: Requests
  href: api/SparkPlug.Contracts.CompositeRequest.html#SparkPlug_Contracts_CompositeRequest_Requests_
  commentId: Overload:SparkPlug.Contracts.CompositeRequest.Requests
  isSpec: "True"
  fullName: SparkPlug.Contracts.CompositeRequest.Requests
  nameWithType: CompositeRequest.Requests
- uid: SparkPlug.Contracts.CompositeResponse
  name: CompositeResponse
  href: api/SparkPlug.Contracts.CompositeResponse.html
  commentId: T:SparkPlug.Contracts.CompositeResponse
  fullName: SparkPlug.Contracts.CompositeResponse
  nameWithType: CompositeResponse
- uid: SparkPlug.Contracts.CompositeResponse.#ctor(System.Collections.Generic.Dictionary{System.String,SparkPlug.Contracts.IApiResponse})
  name: CompositeResponse(Dictionary<string, IApiResponse>?)
  href: api/SparkPlug.Contracts.CompositeResponse.html#SparkPlug_Contracts_CompositeResponse__ctor_System_Collections_Generic_Dictionary_System_String_SparkPlug_Contracts_IApiResponse__
  commentId: M:SparkPlug.Contracts.CompositeResponse.#ctor(System.Collections.Generic.Dictionary{System.String,SparkPlug.Contracts.IApiResponse})
  name.vb: New(Dictionary(Of String, IApiResponse))
  fullName: SparkPlug.Contracts.CompositeResponse.CompositeResponse(System.Collections.Generic.Dictionary<string, SparkPlug.Contracts.IApiResponse>?)
  fullName.vb: SparkPlug.Contracts.CompositeResponse.New(System.Collections.Generic.Dictionary(Of String, SparkPlug.Contracts.IApiResponse))
  nameWithType: CompositeResponse.CompositeResponse(Dictionary<string, IApiResponse>?)
  nameWithType.vb: CompositeResponse.New(Dictionary(Of String, IApiResponse))
- uid: SparkPlug.Contracts.CompositeResponse.#ctor*
  name: CompositeResponse
  href: api/SparkPlug.Contracts.CompositeResponse.html#SparkPlug_Contracts_CompositeResponse__ctor_
  commentId: Overload:SparkPlug.Contracts.CompositeResponse.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.CompositeResponse.CompositeResponse
  fullName.vb: SparkPlug.Contracts.CompositeResponse.New
  nameWithType: CompositeResponse.CompositeResponse
  nameWithType.vb: CompositeResponse.New
- uid: SparkPlug.Contracts.CompositeResponse.Data
  name: Data
  href: api/SparkPlug.Contracts.CompositeResponse.html#SparkPlug_Contracts_CompositeResponse_Data
  commentId: P:SparkPlug.Contracts.CompositeResponse.Data
  fullName: SparkPlug.Contracts.CompositeResponse.Data
  nameWithType: CompositeResponse.Data
- uid: SparkPlug.Contracts.CompositeResponse.Data*
  name: Data
  href: api/SparkPlug.Contracts.CompositeResponse.html#SparkPlug_Contracts_CompositeResponse_Data_
  commentId: Overload:SparkPlug.Contracts.CompositeResponse.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.CompositeResponse.Data
  nameWithType: CompositeResponse.Data
- uid: SparkPlug.Contracts.ConditionFilter
  name: ConditionFilter
  href: api/SparkPlug.Contracts.ConditionFilter.html
  commentId: T:SparkPlug.Contracts.ConditionFilter
  fullName: SparkPlug.Contracts.ConditionFilter
  nameWithType: ConditionFilter
- uid: SparkPlug.Contracts.ConditionFilter.#ctor(System.String,SparkPlug.Contracts.FilterType)
  name: ConditionFilter(string, FilterType)
  href: api/SparkPlug.Contracts.ConditionFilter.html#SparkPlug_Contracts_ConditionFilter__ctor_System_String_SparkPlug_Contracts_FilterType_
  commentId: M:SparkPlug.Contracts.ConditionFilter.#ctor(System.String,SparkPlug.Contracts.FilterType)
  name.vb: New(String, FilterType)
  fullName: SparkPlug.Contracts.ConditionFilter.ConditionFilter(string, SparkPlug.Contracts.FilterType)
  fullName.vb: SparkPlug.Contracts.ConditionFilter.New(String, SparkPlug.Contracts.FilterType)
  nameWithType: ConditionFilter.ConditionFilter(string, FilterType)
  nameWithType.vb: ConditionFilter.New(String, FilterType)
- uid: SparkPlug.Contracts.ConditionFilter.#ctor*
  name: ConditionFilter
  href: api/SparkPlug.Contracts.ConditionFilter.html#SparkPlug_Contracts_ConditionFilter__ctor_
  commentId: Overload:SparkPlug.Contracts.ConditionFilter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.ConditionFilter.ConditionFilter
  fullName.vb: SparkPlug.Contracts.ConditionFilter.New
  nameWithType: ConditionFilter.ConditionFilter
  nameWithType.vb: ConditionFilter.New
- uid: SparkPlug.Contracts.ConditionFilter.Field
  name: Field
  href: api/SparkPlug.Contracts.ConditionFilter.html#SparkPlug_Contracts_ConditionFilter_Field
  commentId: P:SparkPlug.Contracts.ConditionFilter.Field
  fullName: SparkPlug.Contracts.ConditionFilter.Field
  nameWithType: ConditionFilter.Field
- uid: SparkPlug.Contracts.ConditionFilter.Field*
  name: Field
  href: api/SparkPlug.Contracts.ConditionFilter.html#SparkPlug_Contracts_ConditionFilter_Field_
  commentId: Overload:SparkPlug.Contracts.ConditionFilter.Field
  isSpec: "True"
  fullName: SparkPlug.Contracts.ConditionFilter.Field
  nameWithType: ConditionFilter.Field
- uid: SparkPlug.Contracts.ContractsExtensions
  name: ContractsExtensions
  href: api/SparkPlug.Contracts.ContractsExtensions.html
  commentId: T:SparkPlug.Contracts.ContractsExtensions
  fullName: SparkPlug.Contracts.ContractsExtensions
  nameWithType: ContractsExtensions
- uid: SparkPlug.Contracts.ContractsExtensions.AddContracts(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: AddContracts(IServiceCollection)
  href: api/SparkPlug.Contracts.ContractsExtensions.html#SparkPlug_Contracts_ContractsExtensions_AddContracts_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  commentId: M:SparkPlug.Contracts.ContractsExtensions.AddContracts(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: SparkPlug.Contracts.ContractsExtensions.AddContracts(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: ContractsExtensions.AddContracts(IServiceCollection)
- uid: SparkPlug.Contracts.ContractsExtensions.AddContracts*
  name: AddContracts
  href: api/SparkPlug.Contracts.ContractsExtensions.html#SparkPlug_Contracts_ContractsExtensions_AddContracts_
  commentId: Overload:SparkPlug.Contracts.ContractsExtensions.AddContracts
  isSpec: "True"
  fullName: SparkPlug.Contracts.ContractsExtensions.AddContracts
  nameWithType: ContractsExtensions.AddContracts
- uid: SparkPlug.Contracts.ContractsModule
  name: ContractsModule
  href: api/SparkPlug.Contracts.ContractsModule.html
  commentId: T:SparkPlug.Contracts.ContractsModule
  fullName: SparkPlug.Contracts.ContractsModule
  nameWithType: ContractsModule
- uid: SparkPlug.Contracts.ContractsModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Contracts.ContractsModule.html#SparkPlug_Contracts_ContractsModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Contracts.ContractsModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Contracts.ContractsModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ContractsModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Contracts.ContractsModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Contracts.ContractsModule.html#SparkPlug_Contracts_ContractsModule_AddModule_
  commentId: Overload:SparkPlug.Contracts.ContractsModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Contracts.ContractsModule.AddModule
  nameWithType: ContractsModule.AddModule
- uid: SparkPlug.Contracts.ContractsModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Contracts.ContractsModule.html#SparkPlug_Contracts_ContractsModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Contracts.ContractsModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Contracts.ContractsModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: ContractsModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Contracts.ContractsModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Contracts.ContractsModule.html#SparkPlug_Contracts_ContractsModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Contracts.ContractsModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Contracts.ContractsModule.UseMiddelwares
  nameWithType: ContractsModule.UseMiddelwares
- uid: SparkPlug.Contracts.ContractsModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Contracts.ContractsModule.html#SparkPlug_Contracts_ContractsModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Contracts.ContractsModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Contracts.ContractsModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: ContractsModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Contracts.ContractsModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Contracts.ContractsModule.html#SparkPlug_Contracts_ContractsModule_UseModule_
  commentId: Overload:SparkPlug.Contracts.ContractsModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Contracts.ContractsModule.UseModule
  nameWithType: ContractsModule.UseModule
- uid: SparkPlug.Contracts.Direction
  name: Direction
  href: api/SparkPlug.Contracts.Direction.html
  commentId: T:SparkPlug.Contracts.Direction
  fullName: SparkPlug.Contracts.Direction
  nameWithType: Direction
- uid: SparkPlug.Contracts.Direction.Ascending
  name: Ascending
  href: api/SparkPlug.Contracts.Direction.html#SparkPlug_Contracts_Direction_Ascending
  commentId: F:SparkPlug.Contracts.Direction.Ascending
  fullName: SparkPlug.Contracts.Direction.Ascending
  nameWithType: Direction.Ascending
- uid: SparkPlug.Contracts.Direction.Descending
  name: Descending
  href: api/SparkPlug.Contracts.Direction.html#SparkPlug_Contracts_Direction_Descending
  commentId: F:SparkPlug.Contracts.Direction.Descending
  fullName: SparkPlug.Contracts.Direction.Descending
  nameWithType: Direction.Descending
- uid: SparkPlug.Contracts.ErrorResponse
  name: ErrorResponse
  href: api/SparkPlug.Contracts.ErrorResponse.html
  commentId: T:SparkPlug.Contracts.ErrorResponse
  fullName: SparkPlug.Contracts.ErrorResponse
  nameWithType: ErrorResponse
- uid: SparkPlug.Contracts.ErrorResponse.Code
  name: Code
  href: api/SparkPlug.Contracts.ErrorResponse.html#SparkPlug_Contracts_ErrorResponse_Code
  commentId: P:SparkPlug.Contracts.ErrorResponse.Code
  fullName: SparkPlug.Contracts.ErrorResponse.Code
  nameWithType: ErrorResponse.Code
- uid: SparkPlug.Contracts.ErrorResponse.Code*
  name: Code
  href: api/SparkPlug.Contracts.ErrorResponse.html#SparkPlug_Contracts_ErrorResponse_Code_
  commentId: Overload:SparkPlug.Contracts.ErrorResponse.Code
  isSpec: "True"
  fullName: SparkPlug.Contracts.ErrorResponse.Code
  nameWithType: ErrorResponse.Code
- uid: SparkPlug.Contracts.ErrorResponse.Message
  name: Message
  href: api/SparkPlug.Contracts.ErrorResponse.html#SparkPlug_Contracts_ErrorResponse_Message
  commentId: P:SparkPlug.Contracts.ErrorResponse.Message
  fullName: SparkPlug.Contracts.ErrorResponse.Message
  nameWithType: ErrorResponse.Message
- uid: SparkPlug.Contracts.ErrorResponse.Message*
  name: Message
  href: api/SparkPlug.Contracts.ErrorResponse.html#SparkPlug_Contracts_ErrorResponse_Message_
  commentId: Overload:SparkPlug.Contracts.ErrorResponse.Message
  isSpec: "True"
  fullName: SparkPlug.Contracts.ErrorResponse.Message
  nameWithType: ErrorResponse.Message
- uid: SparkPlug.Contracts.ErrorResponse.StackTrace
  name: StackTrace
  href: api/SparkPlug.Contracts.ErrorResponse.html#SparkPlug_Contracts_ErrorResponse_StackTrace
  commentId: P:SparkPlug.Contracts.ErrorResponse.StackTrace
  fullName: SparkPlug.Contracts.ErrorResponse.StackTrace
  nameWithType: ErrorResponse.StackTrace
- uid: SparkPlug.Contracts.ErrorResponse.StackTrace*
  name: StackTrace
  href: api/SparkPlug.Contracts.ErrorResponse.html#SparkPlug_Contracts_ErrorResponse_StackTrace_
  commentId: Overload:SparkPlug.Contracts.ErrorResponse.StackTrace
  isSpec: "True"
  fullName: SparkPlug.Contracts.ErrorResponse.StackTrace
  nameWithType: ErrorResponse.StackTrace
- uid: SparkPlug.Contracts.ExceptionExtension
  name: ExceptionExtension
  href: api/SparkPlug.Contracts.ExceptionExtension.html
  commentId: T:SparkPlug.Contracts.ExceptionExtension
  fullName: SparkPlug.Contracts.ExceptionExtension
  nameWithType: ExceptionExtension
- uid: SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace(System.Exception)
  name: GetInnerStackTrace(Exception?)
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_GetInnerStackTrace_System_Exception_
  commentId: M:SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace(System.Exception)
  name.vb: GetInnerStackTrace(Exception)
  fullName: SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace(System.Exception?)
  fullName.vb: SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace(System.Exception)
  nameWithType: ExceptionExtension.GetInnerStackTrace(Exception?)
  nameWithType.vb: ExceptionExtension.GetInnerStackTrace(Exception)
- uid: SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace*
  name: GetInnerStackTrace
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_GetInnerStackTrace_
  commentId: Overload:SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace
  isSpec: "True"
  fullName: SparkPlug.Contracts.ExceptionExtension.GetInnerStackTrace
  nameWithType: ExceptionExtension.GetInnerStackTrace
- uid: SparkPlug.Contracts.ExceptionExtension.SetCode(SparkPlug.Contracts.ErrorResponse,System.String)
  name: SetCode(ErrorResponse, string)
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetCode_SparkPlug_Contracts_ErrorResponse_System_String_
  commentId: M:SparkPlug.Contracts.ExceptionExtension.SetCode(SparkPlug.Contracts.ErrorResponse,System.String)
  name.vb: SetCode(ErrorResponse, String)
  fullName: SparkPlug.Contracts.ExceptionExtension.SetCode(SparkPlug.Contracts.ErrorResponse, string)
  fullName.vb: SparkPlug.Contracts.ExceptionExtension.SetCode(SparkPlug.Contracts.ErrorResponse, String)
  nameWithType: ExceptionExtension.SetCode(ErrorResponse, string)
  nameWithType.vb: ExceptionExtension.SetCode(ErrorResponse, String)
- uid: SparkPlug.Contracts.ExceptionExtension.SetCode*
  name: SetCode
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetCode_
  commentId: Overload:SparkPlug.Contracts.ExceptionExtension.SetCode
  isSpec: "True"
  fullName: SparkPlug.Contracts.ExceptionExtension.SetCode
  nameWithType: ExceptionExtension.SetCode
- uid: SparkPlug.Contracts.ExceptionExtension.SetFromException(SparkPlug.Contracts.ErrorResponse,System.Exception)
  name: SetFromException(ErrorResponse, Exception)
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetFromException_SparkPlug_Contracts_ErrorResponse_System_Exception_
  commentId: M:SparkPlug.Contracts.ExceptionExtension.SetFromException(SparkPlug.Contracts.ErrorResponse,System.Exception)
  fullName: SparkPlug.Contracts.ExceptionExtension.SetFromException(SparkPlug.Contracts.ErrorResponse, System.Exception)
  nameWithType: ExceptionExtension.SetFromException(ErrorResponse, Exception)
- uid: SparkPlug.Contracts.ExceptionExtension.SetFromException*
  name: SetFromException
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetFromException_
  commentId: Overload:SparkPlug.Contracts.ExceptionExtension.SetFromException
  isSpec: "True"
  fullName: SparkPlug.Contracts.ExceptionExtension.SetFromException
  nameWithType: ExceptionExtension.SetFromException
- uid: SparkPlug.Contracts.ExceptionExtension.SetMessage(SparkPlug.Contracts.ErrorResponse,System.String)
  name: SetMessage(ErrorResponse, string)
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetMessage_SparkPlug_Contracts_ErrorResponse_System_String_
  commentId: M:SparkPlug.Contracts.ExceptionExtension.SetMessage(SparkPlug.Contracts.ErrorResponse,System.String)
  name.vb: SetMessage(ErrorResponse, String)
  fullName: SparkPlug.Contracts.ExceptionExtension.SetMessage(SparkPlug.Contracts.ErrorResponse, string)
  fullName.vb: SparkPlug.Contracts.ExceptionExtension.SetMessage(SparkPlug.Contracts.ErrorResponse, String)
  nameWithType: ExceptionExtension.SetMessage(ErrorResponse, string)
  nameWithType.vb: ExceptionExtension.SetMessage(ErrorResponse, String)
- uid: SparkPlug.Contracts.ExceptionExtension.SetMessage*
  name: SetMessage
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetMessage_
  commentId: Overload:SparkPlug.Contracts.ExceptionExtension.SetMessage
  isSpec: "True"
  fullName: SparkPlug.Contracts.ExceptionExtension.SetMessage
  nameWithType: ExceptionExtension.SetMessage
- uid: SparkPlug.Contracts.ExceptionExtension.SetStackTrace(SparkPlug.Contracts.ErrorResponse,System.String)
  name: SetStackTrace(ErrorResponse, string)
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetStackTrace_SparkPlug_Contracts_ErrorResponse_System_String_
  commentId: M:SparkPlug.Contracts.ExceptionExtension.SetStackTrace(SparkPlug.Contracts.ErrorResponse,System.String)
  name.vb: SetStackTrace(ErrorResponse, String)
  fullName: SparkPlug.Contracts.ExceptionExtension.SetStackTrace(SparkPlug.Contracts.ErrorResponse, string)
  fullName.vb: SparkPlug.Contracts.ExceptionExtension.SetStackTrace(SparkPlug.Contracts.ErrorResponse, String)
  nameWithType: ExceptionExtension.SetStackTrace(ErrorResponse, string)
  nameWithType.vb: ExceptionExtension.SetStackTrace(ErrorResponse, String)
- uid: SparkPlug.Contracts.ExceptionExtension.SetStackTrace*
  name: SetStackTrace
  href: api/SparkPlug.Contracts.ExceptionExtension.html#SparkPlug_Contracts_ExceptionExtension_SetStackTrace_
  commentId: Overload:SparkPlug.Contracts.ExceptionExtension.SetStackTrace
  isSpec: "True"
  fullName: SparkPlug.Contracts.ExceptionExtension.SetStackTrace
  nameWithType: ExceptionExtension.SetStackTrace
- uid: SparkPlug.Contracts.Extensions
  name: Extensions
  href: api/SparkPlug.Contracts.Extensions.html
  commentId: T:SparkPlug.Contracts.Extensions
  fullName: SparkPlug.Contracts.Extensions
  nameWithType: Extensions
- uid: SparkPlug.Contracts.Extensions.Add(SparkPlug.Contracts.ICompositeRequest,System.String,SparkPlug.Contracts.IApiRequest)
  name: Add(ICompositeRequest, string, IApiRequest)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Add_SparkPlug_Contracts_ICompositeRequest_System_String_SparkPlug_Contracts_IApiRequest_
  commentId: M:SparkPlug.Contracts.Extensions.Add(SparkPlug.Contracts.ICompositeRequest,System.String,SparkPlug.Contracts.IApiRequest)
  name.vb: Add(ICompositeRequest, String, IApiRequest)
  fullName: SparkPlug.Contracts.Extensions.Add(SparkPlug.Contracts.ICompositeRequest, string, SparkPlug.Contracts.IApiRequest)
  fullName.vb: SparkPlug.Contracts.Extensions.Add(SparkPlug.Contracts.ICompositeRequest, String, SparkPlug.Contracts.IApiRequest)
  nameWithType: Extensions.Add(ICompositeRequest, string, IApiRequest)
  nameWithType.vb: Extensions.Add(ICompositeRequest, String, IApiRequest)
- uid: SparkPlug.Contracts.Extensions.Add*
  name: Add
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Add_
  commentId: Overload:SparkPlug.Contracts.Extensions.Add
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.Add
  nameWithType: Extensions.Add
- uid: SparkPlug.Contracts.Extensions.AddDependency(SparkPlug.Contracts.IApiRequest,System.String[])
  name: AddDependency(IApiRequest, params string[])
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AddDependency_SparkPlug_Contracts_IApiRequest_System_String___
  commentId: M:SparkPlug.Contracts.Extensions.AddDependency(SparkPlug.Contracts.IApiRequest,System.String[])
  name.vb: AddDependency(IApiRequest, ParamArray String())
  fullName: SparkPlug.Contracts.Extensions.AddDependency(SparkPlug.Contracts.IApiRequest, params string[])
  fullName.vb: SparkPlug.Contracts.Extensions.AddDependency(SparkPlug.Contracts.IApiRequest, ParamArray String())
  nameWithType: Extensions.AddDependency(IApiRequest, params string[])
  nameWithType.vb: Extensions.AddDependency(IApiRequest, ParamArray String())
- uid: SparkPlug.Contracts.Extensions.AddDependency*
  name: AddDependency
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AddDependency_
  commentId: Overload:SparkPlug.Contracts.Extensions.AddDependency
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AddDependency
  nameWithType: Extensions.AddDependency
- uid: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter)
  name: And(CompositeFilter, CompositeFilter)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_And_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_CompositeFilter_
  commentId: M:SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter)
  fullName: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter)
  nameWithType: Extensions.And(CompositeFilter, CompositeFilter)
- uid: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.ConditionFilter)
  name: And(CompositeFilter, ConditionFilter)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_And_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_ConditionFilter_
  commentId: M:SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.ConditionFilter)
  fullName: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.ConditionFilter)
  nameWithType: Extensions.And(CompositeFilter, ConditionFilter)
- uid: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name: And(CompositeFilter, Func<CompositeFilter, CompositeFilter>)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_And_SparkPlug_Contracts_CompositeFilter_System_Func_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_CompositeFilter__
  commentId: M:SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name.vb: And(CompositeFilter, Func(Of CompositeFilter, CompositeFilter))
  fullName: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, System.Func<SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter>)
  fullName.vb: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, System.Func(Of SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter))
  nameWithType: Extensions.And(CompositeFilter, Func<CompositeFilter, CompositeFilter>)
  nameWithType.vb: Extensions.And(CompositeFilter, Func(Of CompositeFilter, CompositeFilter))
- uid: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.FieldOperator,System.Object)
  name: And(CompositeFilter, string, FieldOperator, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_And_SparkPlug_Contracts_CompositeFilter_System_String_SparkPlug_Contracts_FieldOperator_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.FieldOperator,System.Object)
  name.vb: And(CompositeFilter, String, FieldOperator, Object)
  fullName: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, string, SparkPlug.Contracts.FieldOperator, object)
  fullName.vb: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, String, SparkPlug.Contracts.FieldOperator, Object)
  nameWithType: Extensions.And(CompositeFilter, string, FieldOperator, object)
  nameWithType.vb: Extensions.And(CompositeFilter, String, FieldOperator, Object)
- uid: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.UnaryOperator)
  name: And(CompositeFilter, string, UnaryOperator)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_And_SparkPlug_Contracts_CompositeFilter_System_String_SparkPlug_Contracts_UnaryOperator_
  commentId: M:SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.UnaryOperator)
  name.vb: And(CompositeFilter, String, UnaryOperator)
  fullName: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, string, SparkPlug.Contracts.UnaryOperator)
  fullName.vb: SparkPlug.Contracts.Extensions.And(SparkPlug.Contracts.CompositeFilter, String, SparkPlug.Contracts.UnaryOperator)
  nameWithType: Extensions.And(CompositeFilter, string, UnaryOperator)
  nameWithType.vb: Extensions.And(CompositeFilter, String, UnaryOperator)
- uid: SparkPlug.Contracts.Extensions.And*
  name: And
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_And_
  commentId: Overload:SparkPlug.Contracts.Extensions.And
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.And
  nameWithType: Extensions.And
- uid: SparkPlug.Contracts.Extensions.AndEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: AndEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.AndEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: AndEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.AndEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.AndEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.AndEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.AndEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.AndEqual*
  name: AndEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndEqual
  nameWithType: Extensions.AndEqual
- uid: SparkPlug.Contracts.Extensions.AndGreaterThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: AndGreaterThan(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndGreaterThan_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.AndGreaterThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: AndGreaterThan(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.AndGreaterThan(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.AndGreaterThan(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.AndGreaterThan(CompositeFilter, string, object)
  nameWithType.vb: Extensions.AndGreaterThan(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.AndGreaterThan*
  name: AndGreaterThan
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndGreaterThan_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndGreaterThan
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndGreaterThan
  nameWithType: Extensions.AndGreaterThan
- uid: SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: AndGreaterThanOrEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndGreaterThanOrEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: AndGreaterThanOrEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.AndGreaterThanOrEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.AndGreaterThanOrEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual*
  name: AndGreaterThanOrEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndGreaterThanOrEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndGreaterThanOrEqual
  nameWithType: Extensions.AndGreaterThanOrEqual
- uid: SparkPlug.Contracts.Extensions.AndIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name: AndIn(CompositeFilter, string, object[])
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndIn_SparkPlug_Contracts_CompositeFilter_System_String_System_Object___
  commentId: M:SparkPlug.Contracts.Extensions.AndIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name.vb: AndIn(CompositeFilter, String, Object())
  fullName: SparkPlug.Contracts.Extensions.AndIn(SparkPlug.Contracts.CompositeFilter, string, object[])
  fullName.vb: SparkPlug.Contracts.Extensions.AndIn(SparkPlug.Contracts.CompositeFilter, String, Object())
  nameWithType: Extensions.AndIn(CompositeFilter, string, object[])
  nameWithType.vb: Extensions.AndIn(CompositeFilter, String, Object())
- uid: SparkPlug.Contracts.Extensions.AndIn*
  name: AndIn
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndIn_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndIn
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndIn
  nameWithType: Extensions.AndIn
- uid: SparkPlug.Contracts.Extensions.AndIsNotNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name: AndIsNotNull(CompositeFilter, string)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndIsNotNull_SparkPlug_Contracts_CompositeFilter_System_String_
  commentId: M:SparkPlug.Contracts.Extensions.AndIsNotNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name.vb: AndIsNotNull(CompositeFilter, String)
  fullName: SparkPlug.Contracts.Extensions.AndIsNotNull(SparkPlug.Contracts.CompositeFilter, string)
  fullName.vb: SparkPlug.Contracts.Extensions.AndIsNotNull(SparkPlug.Contracts.CompositeFilter, String)
  nameWithType: Extensions.AndIsNotNull(CompositeFilter, string)
  nameWithType.vb: Extensions.AndIsNotNull(CompositeFilter, String)
- uid: SparkPlug.Contracts.Extensions.AndIsNotNull*
  name: AndIsNotNull
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndIsNotNull_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndIsNotNull
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndIsNotNull
  nameWithType: Extensions.AndIsNotNull
- uid: SparkPlug.Contracts.Extensions.AndIsNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name: AndIsNull(CompositeFilter, string)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndIsNull_SparkPlug_Contracts_CompositeFilter_System_String_
  commentId: M:SparkPlug.Contracts.Extensions.AndIsNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name.vb: AndIsNull(CompositeFilter, String)
  fullName: SparkPlug.Contracts.Extensions.AndIsNull(SparkPlug.Contracts.CompositeFilter, string)
  fullName.vb: SparkPlug.Contracts.Extensions.AndIsNull(SparkPlug.Contracts.CompositeFilter, String)
  nameWithType: Extensions.AndIsNull(CompositeFilter, string)
  nameWithType.vb: Extensions.AndIsNull(CompositeFilter, String)
- uid: SparkPlug.Contracts.Extensions.AndIsNull*
  name: AndIsNull
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndIsNull_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndIsNull
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndIsNull
  nameWithType: Extensions.AndIsNull
- uid: SparkPlug.Contracts.Extensions.AndLessThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: AndLessThan(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndLessThan_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.AndLessThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: AndLessThan(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.AndLessThan(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.AndLessThan(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.AndLessThan(CompositeFilter, string, object)
  nameWithType.vb: Extensions.AndLessThan(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.AndLessThan*
  name: AndLessThan
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndLessThan_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndLessThan
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndLessThan
  nameWithType: Extensions.AndLessThan
- uid: SparkPlug.Contracts.Extensions.AndLessThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: AndLessThanOrEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndLessThanOrEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.AndLessThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: AndLessThanOrEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.AndLessThanOrEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.AndLessThanOrEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.AndLessThanOrEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.AndLessThanOrEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.AndLessThanOrEqual*
  name: AndLessThanOrEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndLessThanOrEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndLessThanOrEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndLessThanOrEqual
  nameWithType: Extensions.AndLessThanOrEqual
- uid: SparkPlug.Contracts.Extensions.AndNotEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: AndNotEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndNotEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.AndNotEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: AndNotEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.AndNotEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.AndNotEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.AndNotEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.AndNotEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.AndNotEqual*
  name: AndNotEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndNotEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndNotEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndNotEqual
  nameWithType: Extensions.AndNotEqual
- uid: SparkPlug.Contracts.Extensions.AndNotIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name: AndNotIn(CompositeFilter, string, object[])
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndNotIn_SparkPlug_Contracts_CompositeFilter_System_String_System_Object___
  commentId: M:SparkPlug.Contracts.Extensions.AndNotIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name.vb: AndNotIn(CompositeFilter, String, Object())
  fullName: SparkPlug.Contracts.Extensions.AndNotIn(SparkPlug.Contracts.CompositeFilter, string, object[])
  fullName.vb: SparkPlug.Contracts.Extensions.AndNotIn(SparkPlug.Contracts.CompositeFilter, String, Object())
  nameWithType: Extensions.AndNotIn(CompositeFilter, string, object[])
  nameWithType.vb: Extensions.AndNotIn(CompositeFilter, String, Object())
- uid: SparkPlug.Contracts.Extensions.AndNotIn*
  name: AndNotIn
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_AndNotIn_
  commentId: Overload:SparkPlug.Contracts.Extensions.AndNotIn
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.AndNotIn
  nameWithType: Extensions.AndNotIn
- uid: SparkPlug.Contracts.Extensions.NextPage(SparkPlug.Contracts.PageContext)
  name: NextPage(PageContext)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_NextPage_SparkPlug_Contracts_PageContext_
  commentId: M:SparkPlug.Contracts.Extensions.NextPage(SparkPlug.Contracts.PageContext)
  fullName: SparkPlug.Contracts.Extensions.NextPage(SparkPlug.Contracts.PageContext)
  nameWithType: Extensions.NextPage(PageContext)
- uid: SparkPlug.Contracts.Extensions.NextPage*
  name: NextPage
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_NextPage_
  commentId: Overload:SparkPlug.Contracts.Extensions.NextPage
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.NextPage
  nameWithType: Extensions.NextPage
- uid: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter)
  name: Or(CompositeFilter, CompositeFilter)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Or_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_CompositeFilter_
  commentId: M:SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter)
  fullName: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter)
  nameWithType: Extensions.Or(CompositeFilter, CompositeFilter)
- uid: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.ConditionFilter)
  name: Or(CompositeFilter, ConditionFilter)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Or_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_ConditionFilter_
  commentId: M:SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.ConditionFilter)
  fullName: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.ConditionFilter)
  nameWithType: Extensions.Or(CompositeFilter, ConditionFilter)
- uid: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name: Or(CompositeFilter, Func<CompositeFilter, CompositeFilter>)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Or_SparkPlug_Contracts_CompositeFilter_System_Func_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_CompositeFilter__
  commentId: M:SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name.vb: Or(CompositeFilter, Func(Of CompositeFilter, CompositeFilter))
  fullName: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, System.Func<SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter>)
  fullName.vb: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, System.Func(Of SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter))
  nameWithType: Extensions.Or(CompositeFilter, Func<CompositeFilter, CompositeFilter>)
  nameWithType.vb: Extensions.Or(CompositeFilter, Func(Of CompositeFilter, CompositeFilter))
- uid: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.FieldOperator,System.Object)
  name: Or(CompositeFilter, string, FieldOperator, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Or_SparkPlug_Contracts_CompositeFilter_System_String_SparkPlug_Contracts_FieldOperator_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.FieldOperator,System.Object)
  name.vb: Or(CompositeFilter, String, FieldOperator, Object)
  fullName: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, string, SparkPlug.Contracts.FieldOperator, object)
  fullName.vb: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, String, SparkPlug.Contracts.FieldOperator, Object)
  nameWithType: Extensions.Or(CompositeFilter, string, FieldOperator, object)
  nameWithType.vb: Extensions.Or(CompositeFilter, String, FieldOperator, Object)
- uid: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.UnaryOperator)
  name: Or(CompositeFilter, string, UnaryOperator)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Or_SparkPlug_Contracts_CompositeFilter_System_String_SparkPlug_Contracts_UnaryOperator_
  commentId: M:SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter,System.String,SparkPlug.Contracts.UnaryOperator)
  name.vb: Or(CompositeFilter, String, UnaryOperator)
  fullName: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, string, SparkPlug.Contracts.UnaryOperator)
  fullName.vb: SparkPlug.Contracts.Extensions.Or(SparkPlug.Contracts.CompositeFilter, String, SparkPlug.Contracts.UnaryOperator)
  nameWithType: Extensions.Or(CompositeFilter, string, UnaryOperator)
  nameWithType.vb: Extensions.Or(CompositeFilter, String, UnaryOperator)
- uid: SparkPlug.Contracts.Extensions.Or*
  name: Or
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_Or_
  commentId: Overload:SparkPlug.Contracts.Extensions.Or
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.Or
  nameWithType: Extensions.Or
- uid: SparkPlug.Contracts.Extensions.OrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: OrEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.OrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: OrEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.OrEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.OrEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.OrEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.OrEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.OrEqual*
  name: OrEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrEqual
  nameWithType: Extensions.OrEqual
- uid: SparkPlug.Contracts.Extensions.OrGreaterThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: OrGreaterThan(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrGreaterThan_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.OrGreaterThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: OrGreaterThan(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.OrGreaterThan(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.OrGreaterThan(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.OrGreaterThan(CompositeFilter, string, object)
  nameWithType.vb: Extensions.OrGreaterThan(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.OrGreaterThan*
  name: OrGreaterThan
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrGreaterThan_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrGreaterThan
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrGreaterThan
  nameWithType: Extensions.OrGreaterThan
- uid: SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: OrGreaterThanOrEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrGreaterThanOrEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: OrGreaterThanOrEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.OrGreaterThanOrEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.OrGreaterThanOrEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual*
  name: OrGreaterThanOrEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrGreaterThanOrEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrGreaterThanOrEqual
  nameWithType: Extensions.OrGreaterThanOrEqual
- uid: SparkPlug.Contracts.Extensions.OrIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name: OrIn(CompositeFilter, string, object[])
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrIn_SparkPlug_Contracts_CompositeFilter_System_String_System_Object___
  commentId: M:SparkPlug.Contracts.Extensions.OrIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name.vb: OrIn(CompositeFilter, String, Object())
  fullName: SparkPlug.Contracts.Extensions.OrIn(SparkPlug.Contracts.CompositeFilter, string, object[])
  fullName.vb: SparkPlug.Contracts.Extensions.OrIn(SparkPlug.Contracts.CompositeFilter, String, Object())
  nameWithType: Extensions.OrIn(CompositeFilter, string, object[])
  nameWithType.vb: Extensions.OrIn(CompositeFilter, String, Object())
- uid: SparkPlug.Contracts.Extensions.OrIn*
  name: OrIn
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrIn_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrIn
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrIn
  nameWithType: Extensions.OrIn
- uid: SparkPlug.Contracts.Extensions.OrIsNotNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name: OrIsNotNull(CompositeFilter, string)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrIsNotNull_SparkPlug_Contracts_CompositeFilter_System_String_
  commentId: M:SparkPlug.Contracts.Extensions.OrIsNotNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name.vb: OrIsNotNull(CompositeFilter, String)
  fullName: SparkPlug.Contracts.Extensions.OrIsNotNull(SparkPlug.Contracts.CompositeFilter, string)
  fullName.vb: SparkPlug.Contracts.Extensions.OrIsNotNull(SparkPlug.Contracts.CompositeFilter, String)
  nameWithType: Extensions.OrIsNotNull(CompositeFilter, string)
  nameWithType.vb: Extensions.OrIsNotNull(CompositeFilter, String)
- uid: SparkPlug.Contracts.Extensions.OrIsNotNull*
  name: OrIsNotNull
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrIsNotNull_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrIsNotNull
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrIsNotNull
  nameWithType: Extensions.OrIsNotNull
- uid: SparkPlug.Contracts.Extensions.OrIsNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name: OrIsNull(CompositeFilter, string)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrIsNull_SparkPlug_Contracts_CompositeFilter_System_String_
  commentId: M:SparkPlug.Contracts.Extensions.OrIsNull(SparkPlug.Contracts.CompositeFilter,System.String)
  name.vb: OrIsNull(CompositeFilter, String)
  fullName: SparkPlug.Contracts.Extensions.OrIsNull(SparkPlug.Contracts.CompositeFilter, string)
  fullName.vb: SparkPlug.Contracts.Extensions.OrIsNull(SparkPlug.Contracts.CompositeFilter, String)
  nameWithType: Extensions.OrIsNull(CompositeFilter, string)
  nameWithType.vb: Extensions.OrIsNull(CompositeFilter, String)
- uid: SparkPlug.Contracts.Extensions.OrIsNull*
  name: OrIsNull
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrIsNull_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrIsNull
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrIsNull
  nameWithType: Extensions.OrIsNull
- uid: SparkPlug.Contracts.Extensions.OrLessThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: OrLessThan(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrLessThan_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.OrLessThan(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: OrLessThan(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.OrLessThan(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.OrLessThan(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.OrLessThan(CompositeFilter, string, object)
  nameWithType.vb: Extensions.OrLessThan(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.OrLessThan*
  name: OrLessThan
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrLessThan_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrLessThan
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrLessThan
  nameWithType: Extensions.OrLessThan
- uid: SparkPlug.Contracts.Extensions.OrLessThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: OrLessThanOrEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrLessThanOrEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.OrLessThanOrEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: OrLessThanOrEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.OrLessThanOrEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.OrLessThanOrEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.OrLessThanOrEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.OrLessThanOrEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.OrLessThanOrEqual*
  name: OrLessThanOrEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrLessThanOrEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrLessThanOrEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrLessThanOrEqual
  nameWithType: Extensions.OrLessThanOrEqual
- uid: SparkPlug.Contracts.Extensions.OrNotEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name: OrNotEqual(CompositeFilter, string, object)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrNotEqual_SparkPlug_Contracts_CompositeFilter_System_String_System_Object_
  commentId: M:SparkPlug.Contracts.Extensions.OrNotEqual(SparkPlug.Contracts.CompositeFilter,System.String,System.Object)
  name.vb: OrNotEqual(CompositeFilter, String, Object)
  fullName: SparkPlug.Contracts.Extensions.OrNotEqual(SparkPlug.Contracts.CompositeFilter, string, object)
  fullName.vb: SparkPlug.Contracts.Extensions.OrNotEqual(SparkPlug.Contracts.CompositeFilter, String, Object)
  nameWithType: Extensions.OrNotEqual(CompositeFilter, string, object)
  nameWithType.vb: Extensions.OrNotEqual(CompositeFilter, String, Object)
- uid: SparkPlug.Contracts.Extensions.OrNotEqual*
  name: OrNotEqual
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrNotEqual_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrNotEqual
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrNotEqual
  nameWithType: Extensions.OrNotEqual
- uid: SparkPlug.Contracts.Extensions.OrNotIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name: OrNotIn(CompositeFilter, string, object[])
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrNotIn_SparkPlug_Contracts_CompositeFilter_System_String_System_Object___
  commentId: M:SparkPlug.Contracts.Extensions.OrNotIn(SparkPlug.Contracts.CompositeFilter,System.String,System.Object[])
  name.vb: OrNotIn(CompositeFilter, String, Object())
  fullName: SparkPlug.Contracts.Extensions.OrNotIn(SparkPlug.Contracts.CompositeFilter, string, object[])
  fullName.vb: SparkPlug.Contracts.Extensions.OrNotIn(SparkPlug.Contracts.CompositeFilter, String, Object())
  nameWithType: Extensions.OrNotIn(CompositeFilter, string, object[])
  nameWithType.vb: Extensions.OrNotIn(CompositeFilter, String, Object())
- uid: SparkPlug.Contracts.Extensions.OrNotIn*
  name: OrNotIn
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_OrNotIn_
  commentId: Overload:SparkPlug.Contracts.Extensions.OrNotIn
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.OrNotIn
  nameWithType: Extensions.OrNotIn
- uid: SparkPlug.Contracts.Extensions.SetData(SparkPlug.Contracts.IQueryResponse,System.Collections.Generic.IEnumerable{System.Object})
  name: SetData(IQueryResponse, IEnumerable<object>)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_SetData_SparkPlug_Contracts_IQueryResponse_System_Collections_Generic_IEnumerable_System_Object__
  commentId: M:SparkPlug.Contracts.Extensions.SetData(SparkPlug.Contracts.IQueryResponse,System.Collections.Generic.IEnumerable{System.Object})
  name.vb: SetData(IQueryResponse, IEnumerable(Of Object))
  fullName: SparkPlug.Contracts.Extensions.SetData(SparkPlug.Contracts.IQueryResponse, System.Collections.Generic.IEnumerable<object>)
  fullName.vb: SparkPlug.Contracts.Extensions.SetData(SparkPlug.Contracts.IQueryResponse, System.Collections.Generic.IEnumerable(Of Object))
  nameWithType: Extensions.SetData(IQueryResponse, IEnumerable<object>)
  nameWithType.vb: Extensions.SetData(IQueryResponse, IEnumerable(Of Object))
- uid: SparkPlug.Contracts.Extensions.SetData*
  name: SetData
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_SetData_
  commentId: Overload:SparkPlug.Contracts.Extensions.SetData
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.SetData
  nameWithType: Extensions.SetData
- uid: SparkPlug.Contracts.Extensions.SetPageContext(SparkPlug.Contracts.IQueryResponse,SparkPlug.Contracts.IPageContext)
  name: SetPageContext(IQueryResponse, IPageContext)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_SetPageContext_SparkPlug_Contracts_IQueryResponse_SparkPlug_Contracts_IPageContext_
  commentId: M:SparkPlug.Contracts.Extensions.SetPageContext(SparkPlug.Contracts.IQueryResponse,SparkPlug.Contracts.IPageContext)
  fullName: SparkPlug.Contracts.Extensions.SetPageContext(SparkPlug.Contracts.IQueryResponse, SparkPlug.Contracts.IPageContext)
  nameWithType: Extensions.SetPageContext(IQueryResponse, IPageContext)
- uid: SparkPlug.Contracts.Extensions.SetPageContext*
  name: SetPageContext
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_SetPageContext_
  commentId: Overload:SparkPlug.Contracts.Extensions.SetPageContext
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.SetPageContext
  nameWithType: Extensions.SetPageContext
- uid: SparkPlug.Contracts.Extensions.SetTotal(SparkPlug.Contracts.PageContext,System.Int64)
  name: SetTotal(PageContext, long)
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_SetTotal_SparkPlug_Contracts_PageContext_System_Int64_
  commentId: M:SparkPlug.Contracts.Extensions.SetTotal(SparkPlug.Contracts.PageContext,System.Int64)
  name.vb: SetTotal(PageContext, Long)
  fullName: SparkPlug.Contracts.Extensions.SetTotal(SparkPlug.Contracts.PageContext, long)
  fullName.vb: SparkPlug.Contracts.Extensions.SetTotal(SparkPlug.Contracts.PageContext, Long)
  nameWithType: Extensions.SetTotal(PageContext, long)
  nameWithType.vb: Extensions.SetTotal(PageContext, Long)
- uid: SparkPlug.Contracts.Extensions.SetTotal*
  name: SetTotal
  href: api/SparkPlug.Contracts.Extensions.html#SparkPlug_Contracts_Extensions_SetTotal_
  commentId: Overload:SparkPlug.Contracts.Extensions.SetTotal
  isSpec: "True"
  fullName: SparkPlug.Contracts.Extensions.SetTotal
  nameWithType: Extensions.SetTotal
- uid: SparkPlug.Contracts.FieldFilter
  name: FieldFilter
  href: api/SparkPlug.Contracts.FieldFilter.html
  commentId: T:SparkPlug.Contracts.FieldFilter
  fullName: SparkPlug.Contracts.FieldFilter
  nameWithType: FieldFilter
- uid: SparkPlug.Contracts.FieldFilter.#ctor(System.String,SparkPlug.Contracts.FieldOperator,System.Object,System.Nullable{SparkPlug.Contracts.FilterValueType})
  name: FieldFilter(string, FieldOperator, object, FilterValueType?)
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter__ctor_System_String_SparkPlug_Contracts_FieldOperator_System_Object_System_Nullable_SparkPlug_Contracts_FilterValueType__
  commentId: M:SparkPlug.Contracts.FieldFilter.#ctor(System.String,SparkPlug.Contracts.FieldOperator,System.Object,System.Nullable{SparkPlug.Contracts.FilterValueType})
  name.vb: New(String, FieldOperator, Object, FilterValueType?)
  fullName: SparkPlug.Contracts.FieldFilter.FieldFilter(string, SparkPlug.Contracts.FieldOperator, object, SparkPlug.Contracts.FilterValueType?)
  fullName.vb: SparkPlug.Contracts.FieldFilter.New(String, SparkPlug.Contracts.FieldOperator, Object, SparkPlug.Contracts.FilterValueType?)
  nameWithType: FieldFilter.FieldFilter(string, FieldOperator, object, FilterValueType?)
  nameWithType.vb: FieldFilter.New(String, FieldOperator, Object, FilterValueType?)
- uid: SparkPlug.Contracts.FieldFilter.#ctor*
  name: FieldFilter
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter__ctor_
  commentId: Overload:SparkPlug.Contracts.FieldFilter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.FieldFilter.FieldFilter
  fullName.vb: SparkPlug.Contracts.FieldFilter.New
  nameWithType: FieldFilter.FieldFilter
  nameWithType.vb: FieldFilter.New
- uid: SparkPlug.Contracts.FieldFilter.Op
  name: Op
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter_Op
  commentId: P:SparkPlug.Contracts.FieldFilter.Op
  fullName: SparkPlug.Contracts.FieldFilter.Op
  nameWithType: FieldFilter.Op
- uid: SparkPlug.Contracts.FieldFilter.Op*
  name: Op
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter_Op_
  commentId: Overload:SparkPlug.Contracts.FieldFilter.Op
  isSpec: "True"
  fullName: SparkPlug.Contracts.FieldFilter.Op
  nameWithType: FieldFilter.Op
- uid: SparkPlug.Contracts.FieldFilter.Type
  name: Type
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter_Type
  commentId: P:SparkPlug.Contracts.FieldFilter.Type
  fullName: SparkPlug.Contracts.FieldFilter.Type
  nameWithType: FieldFilter.Type
- uid: SparkPlug.Contracts.FieldFilter.Type*
  name: Type
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter_Type_
  commentId: Overload:SparkPlug.Contracts.FieldFilter.Type
  isSpec: "True"
  fullName: SparkPlug.Contracts.FieldFilter.Type
  nameWithType: FieldFilter.Type
- uid: SparkPlug.Contracts.FieldFilter.Value
  name: Value
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter_Value
  commentId: P:SparkPlug.Contracts.FieldFilter.Value
  fullName: SparkPlug.Contracts.FieldFilter.Value
  nameWithType: FieldFilter.Value
- uid: SparkPlug.Contracts.FieldFilter.Value*
  name: Value
  href: api/SparkPlug.Contracts.FieldFilter.html#SparkPlug_Contracts_FieldFilter_Value_
  commentId: Overload:SparkPlug.Contracts.FieldFilter.Value
  isSpec: "True"
  fullName: SparkPlug.Contracts.FieldFilter.Value
  nameWithType: FieldFilter.Value
- uid: SparkPlug.Contracts.FieldOperator
  name: FieldOperator
  href: api/SparkPlug.Contracts.FieldOperator.html
  commentId: T:SparkPlug.Contracts.FieldOperator
  fullName: SparkPlug.Contracts.FieldOperator
  nameWithType: FieldOperator
- uid: SparkPlug.Contracts.FieldOperator.Between
  name: Between
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_Between
  commentId: F:SparkPlug.Contracts.FieldOperator.Between
  fullName: SparkPlug.Contracts.FieldOperator.Between
  nameWithType: FieldOperator.Between
- uid: SparkPlug.Contracts.FieldOperator.Contains
  name: Contains
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_Contains
  commentId: F:SparkPlug.Contracts.FieldOperator.Contains
  fullName: SparkPlug.Contracts.FieldOperator.Contains
  nameWithType: FieldOperator.Contains
- uid: SparkPlug.Contracts.FieldOperator.EndsWith
  name: EndsWith
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_EndsWith
  commentId: F:SparkPlug.Contracts.FieldOperator.EndsWith
  fullName: SparkPlug.Contracts.FieldOperator.EndsWith
  nameWithType: FieldOperator.EndsWith
- uid: SparkPlug.Contracts.FieldOperator.Equal
  name: Equal
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_Equal
  commentId: F:SparkPlug.Contracts.FieldOperator.Equal
  fullName: SparkPlug.Contracts.FieldOperator.Equal
  nameWithType: FieldOperator.Equal
- uid: SparkPlug.Contracts.FieldOperator.GreaterThan
  name: GreaterThan
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_GreaterThan
  commentId: F:SparkPlug.Contracts.FieldOperator.GreaterThan
  fullName: SparkPlug.Contracts.FieldOperator.GreaterThan
  nameWithType: FieldOperator.GreaterThan
- uid: SparkPlug.Contracts.FieldOperator.GreaterThanOrEqual
  name: GreaterThanOrEqual
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_GreaterThanOrEqual
  commentId: F:SparkPlug.Contracts.FieldOperator.GreaterThanOrEqual
  fullName: SparkPlug.Contracts.FieldOperator.GreaterThanOrEqual
  nameWithType: FieldOperator.GreaterThanOrEqual
- uid: SparkPlug.Contracts.FieldOperator.In
  name: In
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_In
  commentId: F:SparkPlug.Contracts.FieldOperator.In
  fullName: SparkPlug.Contracts.FieldOperator.In
  nameWithType: FieldOperator.In
- uid: SparkPlug.Contracts.FieldOperator.LessThan
  name: LessThan
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_LessThan
  commentId: F:SparkPlug.Contracts.FieldOperator.LessThan
  fullName: SparkPlug.Contracts.FieldOperator.LessThan
  nameWithType: FieldOperator.LessThan
- uid: SparkPlug.Contracts.FieldOperator.LessThanOrEqual
  name: LessThanOrEqual
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_LessThanOrEqual
  commentId: F:SparkPlug.Contracts.FieldOperator.LessThanOrEqual
  fullName: SparkPlug.Contracts.FieldOperator.LessThanOrEqual
  nameWithType: FieldOperator.LessThanOrEqual
- uid: SparkPlug.Contracts.FieldOperator.NotEqual
  name: NotEqual
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_NotEqual
  commentId: F:SparkPlug.Contracts.FieldOperator.NotEqual
  fullName: SparkPlug.Contracts.FieldOperator.NotEqual
  nameWithType: FieldOperator.NotEqual
- uid: SparkPlug.Contracts.FieldOperator.NotIn
  name: NotIn
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_NotIn
  commentId: F:SparkPlug.Contracts.FieldOperator.NotIn
  fullName: SparkPlug.Contracts.FieldOperator.NotIn
  nameWithType: FieldOperator.NotIn
- uid: SparkPlug.Contracts.FieldOperator.StartsWith
  name: StartsWith
  href: api/SparkPlug.Contracts.FieldOperator.html#SparkPlug_Contracts_FieldOperator_StartsWith
  commentId: F:SparkPlug.Contracts.FieldOperator.StartsWith
  fullName: SparkPlug.Contracts.FieldOperator.StartsWith
  nameWithType: FieldOperator.StartsWith
- uid: SparkPlug.Contracts.Filter
  name: Filter
  href: api/SparkPlug.Contracts.Filter.html
  commentId: T:SparkPlug.Contracts.Filter
  fullName: SparkPlug.Contracts.Filter
  nameWithType: Filter
- uid: SparkPlug.Contracts.Filter.#ctor(SparkPlug.Contracts.FilterType)
  name: Filter(FilterType)
  href: api/SparkPlug.Contracts.Filter.html#SparkPlug_Contracts_Filter__ctor_SparkPlug_Contracts_FilterType_
  commentId: M:SparkPlug.Contracts.Filter.#ctor(SparkPlug.Contracts.FilterType)
  name.vb: New(FilterType)
  fullName: SparkPlug.Contracts.Filter.Filter(SparkPlug.Contracts.FilterType)
  fullName.vb: SparkPlug.Contracts.Filter.New(SparkPlug.Contracts.FilterType)
  nameWithType: Filter.Filter(FilterType)
  nameWithType.vb: Filter.New(FilterType)
- uid: SparkPlug.Contracts.Filter.#ctor*
  name: Filter
  href: api/SparkPlug.Contracts.Filter.html#SparkPlug_Contracts_Filter__ctor_
  commentId: Overload:SparkPlug.Contracts.Filter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.Filter.Filter
  fullName.vb: SparkPlug.Contracts.Filter.New
  nameWithType: Filter.Filter
  nameWithType.vb: Filter.New
- uid: SparkPlug.Contracts.Filter.Kind
  name: Kind
  href: api/SparkPlug.Contracts.Filter.html#SparkPlug_Contracts_Filter_Kind
  commentId: P:SparkPlug.Contracts.Filter.Kind
  fullName: SparkPlug.Contracts.Filter.Kind
  nameWithType: Filter.Kind
- uid: SparkPlug.Contracts.Filter.Kind*
  name: Kind
  href: api/SparkPlug.Contracts.Filter.html#SparkPlug_Contracts_Filter_Kind_
  commentId: Overload:SparkPlug.Contracts.Filter.Kind
  isSpec: "True"
  fullName: SparkPlug.Contracts.Filter.Kind
  nameWithType: Filter.Kind
- uid: SparkPlug.Contracts.FilterConverter
  name: FilterConverter
  href: api/SparkPlug.Contracts.FilterConverter.html
  commentId: T:SparkPlug.Contracts.FilterConverter
  fullName: SparkPlug.Contracts.FilterConverter
  nameWithType: FilterConverter
- uid: SparkPlug.Contracts.FilterConverter.CanConvert(System.Type)
  name: CanConvert(Type)
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_CanConvert_System_Type_
  commentId: M:SparkPlug.Contracts.FilterConverter.CanConvert(System.Type)
  fullName: SparkPlug.Contracts.FilterConverter.CanConvert(System.Type)
  nameWithType: FilterConverter.CanConvert(Type)
- uid: SparkPlug.Contracts.FilterConverter.CanConvert*
  name: CanConvert
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_CanConvert_
  commentId: Overload:SparkPlug.Contracts.FilterConverter.CanConvert
  isSpec: "True"
  fullName: SparkPlug.Contracts.FilterConverter.CanConvert
  nameWithType: FilterConverter.CanConvert
- uid: SparkPlug.Contracts.FilterConverter.CanWrite
  name: CanWrite
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_CanWrite
  commentId: P:SparkPlug.Contracts.FilterConverter.CanWrite
  fullName: SparkPlug.Contracts.FilterConverter.CanWrite
  nameWithType: FilterConverter.CanWrite
- uid: SparkPlug.Contracts.FilterConverter.CanWrite*
  name: CanWrite
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_CanWrite_
  commentId: Overload:SparkPlug.Contracts.FilterConverter.CanWrite
  isSpec: "True"
  fullName: SparkPlug.Contracts.FilterConverter.CanWrite
  nameWithType: FilterConverter.CanWrite
- uid: SparkPlug.Contracts.FilterConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name: ReadJson(JsonReader, Type, object?, JsonSerializer)
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_ReadJson_Newtonsoft_Json_JsonReader_System_Type_System_Object_Newtonsoft_Json_JsonSerializer_
  commentId: M:SparkPlug.Contracts.FilterConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  name.vb: ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: SparkPlug.Contracts.FilterConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object?, Newtonsoft.Json.JsonSerializer)
  fullName.vb: SparkPlug.Contracts.FilterConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, Object, Newtonsoft.Json.JsonSerializer)
  nameWithType: FilterConverter.ReadJson(JsonReader, Type, object?, JsonSerializer)
  nameWithType.vb: FilterConverter.ReadJson(JsonReader, Type, Object, JsonSerializer)
- uid: SparkPlug.Contracts.FilterConverter.ReadJson*
  name: ReadJson
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_ReadJson_
  commentId: Overload:SparkPlug.Contracts.FilterConverter.ReadJson
  isSpec: "True"
  fullName: SparkPlug.Contracts.FilterConverter.ReadJson
  nameWithType: FilterConverter.ReadJson
- uid: SparkPlug.Contracts.FilterConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name: WriteJson(JsonWriter, object?, JsonSerializer)
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_WriteJson_Newtonsoft_Json_JsonWriter_System_Object_Newtonsoft_Json_JsonSerializer_
  commentId: M:SparkPlug.Contracts.FilterConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  name.vb: WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: SparkPlug.Contracts.FilterConverter.WriteJson(Newtonsoft.Json.JsonWriter, object?, Newtonsoft.Json.JsonSerializer)
  fullName.vb: SparkPlug.Contracts.FilterConverter.WriteJson(Newtonsoft.Json.JsonWriter, Object, Newtonsoft.Json.JsonSerializer)
  nameWithType: FilterConverter.WriteJson(JsonWriter, object?, JsonSerializer)
  nameWithType.vb: FilterConverter.WriteJson(JsonWriter, Object, JsonSerializer)
- uid: SparkPlug.Contracts.FilterConverter.WriteJson*
  name: WriteJson
  href: api/SparkPlug.Contracts.FilterConverter.html#SparkPlug_Contracts_FilterConverter_WriteJson_
  commentId: Overload:SparkPlug.Contracts.FilterConverter.WriteJson
  isSpec: "True"
  fullName: SparkPlug.Contracts.FilterConverter.WriteJson
  nameWithType: FilterConverter.WriteJson
- uid: SparkPlug.Contracts.FilterType
  name: FilterType
  href: api/SparkPlug.Contracts.FilterType.html
  commentId: T:SparkPlug.Contracts.FilterType
  fullName: SparkPlug.Contracts.FilterType
  nameWithType: FilterType
- uid: SparkPlug.Contracts.FilterType.Composite
  name: Composite
  href: api/SparkPlug.Contracts.FilterType.html#SparkPlug_Contracts_FilterType_Composite
  commentId: F:SparkPlug.Contracts.FilterType.Composite
  fullName: SparkPlug.Contracts.FilterType.Composite
  nameWithType: FilterType.Composite
- uid: SparkPlug.Contracts.FilterType.Field
  name: Field
  href: api/SparkPlug.Contracts.FilterType.html#SparkPlug_Contracts_FilterType_Field
  commentId: F:SparkPlug.Contracts.FilterType.Field
  fullName: SparkPlug.Contracts.FilterType.Field
  nameWithType: FilterType.Field
- uid: SparkPlug.Contracts.FilterType.Unary
  name: Unary
  href: api/SparkPlug.Contracts.FilterType.html#SparkPlug_Contracts_FilterType_Unary
  commentId: F:SparkPlug.Contracts.FilterType.Unary
  fullName: SparkPlug.Contracts.FilterType.Unary
  nameWithType: FilterType.Unary
- uid: SparkPlug.Contracts.FilterValueType
  name: FilterValueType
  href: api/SparkPlug.Contracts.FilterValueType.html
  commentId: T:SparkPlug.Contracts.FilterValueType
  fullName: SparkPlug.Contracts.FilterValueType
  nameWithType: FilterValueType
- uid: SparkPlug.Contracts.FilterValueType.DateOnly
  name: DateOnly
  href: api/SparkPlug.Contracts.FilterValueType.html#SparkPlug_Contracts_FilterValueType_DateOnly
  commentId: F:SparkPlug.Contracts.FilterValueType.DateOnly
  fullName: SparkPlug.Contracts.FilterValueType.DateOnly
  nameWithType: FilterValueType.DateOnly
- uid: SparkPlug.Contracts.FilterValueType.UtcDateTime
  name: UtcDateTime
  href: api/SparkPlug.Contracts.FilterValueType.html#SparkPlug_Contracts_FilterValueType_UtcDateTime
  commentId: F:SparkPlug.Contracts.FilterValueType.UtcDateTime
  fullName: SparkPlug.Contracts.FilterValueType.UtcDateTime
  nameWithType: FilterValueType.UtcDateTime
- uid: SparkPlug.Contracts.IApiRequest
  name: IApiRequest
  href: api/SparkPlug.Contracts.IApiRequest.html
  commentId: T:SparkPlug.Contracts.IApiRequest
  fullName: SparkPlug.Contracts.IApiRequest
  nameWithType: IApiRequest
- uid: SparkPlug.Contracts.IApiRequest.Deps
  name: Deps
  href: api/SparkPlug.Contracts.IApiRequest.html#SparkPlug_Contracts_IApiRequest_Deps
  commentId: P:SparkPlug.Contracts.IApiRequest.Deps
  fullName: SparkPlug.Contracts.IApiRequest.Deps
  nameWithType: IApiRequest.Deps
- uid: SparkPlug.Contracts.IApiRequest.Deps*
  name: Deps
  href: api/SparkPlug.Contracts.IApiRequest.html#SparkPlug_Contracts_IApiRequest_Deps_
  commentId: Overload:SparkPlug.Contracts.IApiRequest.Deps
  isSpec: "True"
  fullName: SparkPlug.Contracts.IApiRequest.Deps
  nameWithType: IApiRequest.Deps
- uid: SparkPlug.Contracts.IApiResponse
  name: IApiResponse
  href: api/SparkPlug.Contracts.IApiResponse.html
  commentId: T:SparkPlug.Contracts.IApiResponse
  fullName: SparkPlug.Contracts.IApiResponse
  nameWithType: IApiResponse
- uid: SparkPlug.Contracts.ICommandRequest`1
  name: ICommandRequest<TEntity>
  href: api/SparkPlug.Contracts.ICommandRequest-1.html
  commentId: T:SparkPlug.Contracts.ICommandRequest`1
  name.vb: ICommandRequest(Of TEntity)
  fullName: SparkPlug.Contracts.ICommandRequest<TEntity>
  fullName.vb: SparkPlug.Contracts.ICommandRequest(Of TEntity)
  nameWithType: ICommandRequest<TEntity>
  nameWithType.vb: ICommandRequest(Of TEntity)
- uid: SparkPlug.Contracts.ICommandRequest`1.Data
  name: Data
  href: api/SparkPlug.Contracts.ICommandRequest-1.html#SparkPlug_Contracts_ICommandRequest_1_Data
  commentId: P:SparkPlug.Contracts.ICommandRequest`1.Data
  fullName: SparkPlug.Contracts.ICommandRequest<TEntity>.Data
  fullName.vb: SparkPlug.Contracts.ICommandRequest(Of TEntity).Data
  nameWithType: ICommandRequest<TEntity>.Data
  nameWithType.vb: ICommandRequest(Of TEntity).Data
- uid: SparkPlug.Contracts.ICommandRequest`1.Data*
  name: Data
  href: api/SparkPlug.Contracts.ICommandRequest-1.html#SparkPlug_Contracts_ICommandRequest_1_Data_
  commentId: Overload:SparkPlug.Contracts.ICommandRequest`1.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.ICommandRequest<TEntity>.Data
  fullName.vb: SparkPlug.Contracts.ICommandRequest(Of TEntity).Data
  nameWithType: ICommandRequest<TEntity>.Data
  nameWithType.vb: ICommandRequest(Of TEntity).Data
- uid: SparkPlug.Contracts.ICommandResponse
  name: ICommandResponse
  href: api/SparkPlug.Contracts.ICommandResponse.html
  commentId: T:SparkPlug.Contracts.ICommandResponse
  fullName: SparkPlug.Contracts.ICommandResponse
  nameWithType: ICommandResponse
- uid: SparkPlug.Contracts.ICommandResponse.Data
  name: Data
  href: api/SparkPlug.Contracts.ICommandResponse.html#SparkPlug_Contracts_ICommandResponse_Data
  commentId: P:SparkPlug.Contracts.ICommandResponse.Data
  fullName: SparkPlug.Contracts.ICommandResponse.Data
  nameWithType: ICommandResponse.Data
- uid: SparkPlug.Contracts.ICommandResponse.Data*
  name: Data
  href: api/SparkPlug.Contracts.ICommandResponse.html#SparkPlug_Contracts_ICommandResponse_Data_
  commentId: Overload:SparkPlug.Contracts.ICommandResponse.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.ICommandResponse.Data
  nameWithType: ICommandResponse.Data
- uid: SparkPlug.Contracts.ICompositeFilter
  name: ICompositeFilter
  href: api/SparkPlug.Contracts.ICompositeFilter.html
  commentId: T:SparkPlug.Contracts.ICompositeFilter
  fullName: SparkPlug.Contracts.ICompositeFilter
  nameWithType: ICompositeFilter
- uid: SparkPlug.Contracts.ICompositeFilter.Filters
  name: Filters
  href: api/SparkPlug.Contracts.ICompositeFilter.html#SparkPlug_Contracts_ICompositeFilter_Filters
  commentId: P:SparkPlug.Contracts.ICompositeFilter.Filters
  fullName: SparkPlug.Contracts.ICompositeFilter.Filters
  nameWithType: ICompositeFilter.Filters
- uid: SparkPlug.Contracts.ICompositeFilter.Filters*
  name: Filters
  href: api/SparkPlug.Contracts.ICompositeFilter.html#SparkPlug_Contracts_ICompositeFilter_Filters_
  commentId: Overload:SparkPlug.Contracts.ICompositeFilter.Filters
  isSpec: "True"
  fullName: SparkPlug.Contracts.ICompositeFilter.Filters
  nameWithType: ICompositeFilter.Filters
- uid: SparkPlug.Contracts.ICompositeFilter.Op
  name: Op
  href: api/SparkPlug.Contracts.ICompositeFilter.html#SparkPlug_Contracts_ICompositeFilter_Op
  commentId: P:SparkPlug.Contracts.ICompositeFilter.Op
  fullName: SparkPlug.Contracts.ICompositeFilter.Op
  nameWithType: ICompositeFilter.Op
- uid: SparkPlug.Contracts.ICompositeFilter.Op*
  name: Op
  href: api/SparkPlug.Contracts.ICompositeFilter.html#SparkPlug_Contracts_ICompositeFilter_Op_
  commentId: Overload:SparkPlug.Contracts.ICompositeFilter.Op
  isSpec: "True"
  fullName: SparkPlug.Contracts.ICompositeFilter.Op
  nameWithType: ICompositeFilter.Op
- uid: SparkPlug.Contracts.ICompositeRequest
  name: ICompositeRequest
  href: api/SparkPlug.Contracts.ICompositeRequest.html
  commentId: T:SparkPlug.Contracts.ICompositeRequest
  fullName: SparkPlug.Contracts.ICompositeRequest
  nameWithType: ICompositeRequest
- uid: SparkPlug.Contracts.ICompositeRequest.Requests
  name: Requests
  href: api/SparkPlug.Contracts.ICompositeRequest.html#SparkPlug_Contracts_ICompositeRequest_Requests
  commentId: P:SparkPlug.Contracts.ICompositeRequest.Requests
  fullName: SparkPlug.Contracts.ICompositeRequest.Requests
  nameWithType: ICompositeRequest.Requests
- uid: SparkPlug.Contracts.ICompositeRequest.Requests*
  name: Requests
  href: api/SparkPlug.Contracts.ICompositeRequest.html#SparkPlug_Contracts_ICompositeRequest_Requests_
  commentId: Overload:SparkPlug.Contracts.ICompositeRequest.Requests
  isSpec: "True"
  fullName: SparkPlug.Contracts.ICompositeRequest.Requests
  nameWithType: ICompositeRequest.Requests
- uid: SparkPlug.Contracts.ICompositeResponse
  name: ICompositeResponse
  href: api/SparkPlug.Contracts.ICompositeResponse.html
  commentId: T:SparkPlug.Contracts.ICompositeResponse
  fullName: SparkPlug.Contracts.ICompositeResponse
  nameWithType: ICompositeResponse
- uid: SparkPlug.Contracts.ICompositeResponse.Data
  name: Data
  href: api/SparkPlug.Contracts.ICompositeResponse.html#SparkPlug_Contracts_ICompositeResponse_Data
  commentId: P:SparkPlug.Contracts.ICompositeResponse.Data
  fullName: SparkPlug.Contracts.ICompositeResponse.Data
  nameWithType: ICompositeResponse.Data
- uid: SparkPlug.Contracts.ICompositeResponse.Data*
  name: Data
  href: api/SparkPlug.Contracts.ICompositeResponse.html#SparkPlug_Contracts_ICompositeResponse_Data_
  commentId: Overload:SparkPlug.Contracts.ICompositeResponse.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.ICompositeResponse.Data
  nameWithType: ICompositeResponse.Data
- uid: SparkPlug.Contracts.IConditionFilter
  name: IConditionFilter
  href: api/SparkPlug.Contracts.IConditionFilter.html
  commentId: T:SparkPlug.Contracts.IConditionFilter
  fullName: SparkPlug.Contracts.IConditionFilter
  nameWithType: IConditionFilter
- uid: SparkPlug.Contracts.IConditionFilter.Field
  name: Field
  href: api/SparkPlug.Contracts.IConditionFilter.html#SparkPlug_Contracts_IConditionFilter_Field
  commentId: P:SparkPlug.Contracts.IConditionFilter.Field
  fullName: SparkPlug.Contracts.IConditionFilter.Field
  nameWithType: IConditionFilter.Field
- uid: SparkPlug.Contracts.IConditionFilter.Field*
  name: Field
  href: api/SparkPlug.Contracts.IConditionFilter.html#SparkPlug_Contracts_IConditionFilter_Field_
  commentId: Overload:SparkPlug.Contracts.IConditionFilter.Field
  isSpec: "True"
  fullName: SparkPlug.Contracts.IConditionFilter.Field
  nameWithType: IConditionFilter.Field
- uid: SparkPlug.Contracts.IErrorResponse
  name: IErrorResponse
  href: api/SparkPlug.Contracts.IErrorResponse.html
  commentId: T:SparkPlug.Contracts.IErrorResponse
  fullName: SparkPlug.Contracts.IErrorResponse
  nameWithType: IErrorResponse
- uid: SparkPlug.Contracts.IErrorResponse.Code
  name: Code
  href: api/SparkPlug.Contracts.IErrorResponse.html#SparkPlug_Contracts_IErrorResponse_Code
  commentId: P:SparkPlug.Contracts.IErrorResponse.Code
  fullName: SparkPlug.Contracts.IErrorResponse.Code
  nameWithType: IErrorResponse.Code
- uid: SparkPlug.Contracts.IErrorResponse.Code*
  name: Code
  href: api/SparkPlug.Contracts.IErrorResponse.html#SparkPlug_Contracts_IErrorResponse_Code_
  commentId: Overload:SparkPlug.Contracts.IErrorResponse.Code
  isSpec: "True"
  fullName: SparkPlug.Contracts.IErrorResponse.Code
  nameWithType: IErrorResponse.Code
- uid: SparkPlug.Contracts.IErrorResponse.Message
  name: Message
  href: api/SparkPlug.Contracts.IErrorResponse.html#SparkPlug_Contracts_IErrorResponse_Message
  commentId: P:SparkPlug.Contracts.IErrorResponse.Message
  fullName: SparkPlug.Contracts.IErrorResponse.Message
  nameWithType: IErrorResponse.Message
- uid: SparkPlug.Contracts.IErrorResponse.Message*
  name: Message
  href: api/SparkPlug.Contracts.IErrorResponse.html#SparkPlug_Contracts_IErrorResponse_Message_
  commentId: Overload:SparkPlug.Contracts.IErrorResponse.Message
  isSpec: "True"
  fullName: SparkPlug.Contracts.IErrorResponse.Message
  nameWithType: IErrorResponse.Message
- uid: SparkPlug.Contracts.IErrorResponse.StackTrace
  name: StackTrace
  href: api/SparkPlug.Contracts.IErrorResponse.html#SparkPlug_Contracts_IErrorResponse_StackTrace
  commentId: P:SparkPlug.Contracts.IErrorResponse.StackTrace
  fullName: SparkPlug.Contracts.IErrorResponse.StackTrace
  nameWithType: IErrorResponse.StackTrace
- uid: SparkPlug.Contracts.IErrorResponse.StackTrace*
  name: StackTrace
  href: api/SparkPlug.Contracts.IErrorResponse.html#SparkPlug_Contracts_IErrorResponse_StackTrace_
  commentId: Overload:SparkPlug.Contracts.IErrorResponse.StackTrace
  isSpec: "True"
  fullName: SparkPlug.Contracts.IErrorResponse.StackTrace
  nameWithType: IErrorResponse.StackTrace
- uid: SparkPlug.Contracts.IFieldFilter
  name: IFieldFilter
  href: api/SparkPlug.Contracts.IFieldFilter.html
  commentId: T:SparkPlug.Contracts.IFieldFilter
  fullName: SparkPlug.Contracts.IFieldFilter
  nameWithType: IFieldFilter
- uid: SparkPlug.Contracts.IFieldFilter.Op
  name: Op
  href: api/SparkPlug.Contracts.IFieldFilter.html#SparkPlug_Contracts_IFieldFilter_Op
  commentId: P:SparkPlug.Contracts.IFieldFilter.Op
  fullName: SparkPlug.Contracts.IFieldFilter.Op
  nameWithType: IFieldFilter.Op
- uid: SparkPlug.Contracts.IFieldFilter.Op*
  name: Op
  href: api/SparkPlug.Contracts.IFieldFilter.html#SparkPlug_Contracts_IFieldFilter_Op_
  commentId: Overload:SparkPlug.Contracts.IFieldFilter.Op
  isSpec: "True"
  fullName: SparkPlug.Contracts.IFieldFilter.Op
  nameWithType: IFieldFilter.Op
- uid: SparkPlug.Contracts.IFieldFilter.Type
  name: Type
  href: api/SparkPlug.Contracts.IFieldFilter.html#SparkPlug_Contracts_IFieldFilter_Type
  commentId: P:SparkPlug.Contracts.IFieldFilter.Type
  fullName: SparkPlug.Contracts.IFieldFilter.Type
  nameWithType: IFieldFilter.Type
- uid: SparkPlug.Contracts.IFieldFilter.Type*
  name: Type
  href: api/SparkPlug.Contracts.IFieldFilter.html#SparkPlug_Contracts_IFieldFilter_Type_
  commentId: Overload:SparkPlug.Contracts.IFieldFilter.Type
  isSpec: "True"
  fullName: SparkPlug.Contracts.IFieldFilter.Type
  nameWithType: IFieldFilter.Type
- uid: SparkPlug.Contracts.IFieldFilter.Value
  name: Value
  href: api/SparkPlug.Contracts.IFieldFilter.html#SparkPlug_Contracts_IFieldFilter_Value
  commentId: P:SparkPlug.Contracts.IFieldFilter.Value
  fullName: SparkPlug.Contracts.IFieldFilter.Value
  nameWithType: IFieldFilter.Value
- uid: SparkPlug.Contracts.IFieldFilter.Value*
  name: Value
  href: api/SparkPlug.Contracts.IFieldFilter.html#SparkPlug_Contracts_IFieldFilter_Value_
  commentId: Overload:SparkPlug.Contracts.IFieldFilter.Value
  isSpec: "True"
  fullName: SparkPlug.Contracts.IFieldFilter.Value
  nameWithType: IFieldFilter.Value
- uid: SparkPlug.Contracts.IFilter
  name: IFilter
  href: api/SparkPlug.Contracts.IFilter.html
  commentId: T:SparkPlug.Contracts.IFilter
  fullName: SparkPlug.Contracts.IFilter
  nameWithType: IFilter
- uid: SparkPlug.Contracts.IFilter.Kind
  name: Kind
  href: api/SparkPlug.Contracts.IFilter.html#SparkPlug_Contracts_IFilter_Kind
  commentId: P:SparkPlug.Contracts.IFilter.Kind
  fullName: SparkPlug.Contracts.IFilter.Kind
  nameWithType: IFilter.Kind
- uid: SparkPlug.Contracts.IFilter.Kind*
  name: Kind
  href: api/SparkPlug.Contracts.IFilter.html#SparkPlug_Contracts_IFilter_Kind_
  commentId: Overload:SparkPlug.Contracts.IFilter.Kind
  isSpec: "True"
  fullName: SparkPlug.Contracts.IFilter.Kind
  nameWithType: IFilter.Kind
- uid: SparkPlug.Contracts.IInclude
  name: IInclude
  href: api/SparkPlug.Contracts.IInclude.html
  commentId: T:SparkPlug.Contracts.IInclude
  fullName: SparkPlug.Contracts.IInclude
  nameWithType: IInclude
- uid: SparkPlug.Contracts.IInclude.Includes
  name: Includes
  href: api/SparkPlug.Contracts.IInclude.html#SparkPlug_Contracts_IInclude_Includes
  commentId: P:SparkPlug.Contracts.IInclude.Includes
  fullName: SparkPlug.Contracts.IInclude.Includes
  nameWithType: IInclude.Includes
- uid: SparkPlug.Contracts.IInclude.Includes*
  name: Includes
  href: api/SparkPlug.Contracts.IInclude.html#SparkPlug_Contracts_IInclude_Includes_
  commentId: Overload:SparkPlug.Contracts.IInclude.Includes
  isSpec: "True"
  fullName: SparkPlug.Contracts.IInclude.Includes
  nameWithType: IInclude.Includes
- uid: SparkPlug.Contracts.IInclude.Name
  name: Name
  href: api/SparkPlug.Contracts.IInclude.html#SparkPlug_Contracts_IInclude_Name
  commentId: P:SparkPlug.Contracts.IInclude.Name
  fullName: SparkPlug.Contracts.IInclude.Name
  nameWithType: IInclude.Name
- uid: SparkPlug.Contracts.IInclude.Name*
  name: Name
  href: api/SparkPlug.Contracts.IInclude.html#SparkPlug_Contracts_IInclude_Name_
  commentId: Overload:SparkPlug.Contracts.IInclude.Name
  isSpec: "True"
  fullName: SparkPlug.Contracts.IInclude.Name
  nameWithType: IInclude.Name
- uid: SparkPlug.Contracts.IInclude.Select
  name: Select
  href: api/SparkPlug.Contracts.IInclude.html#SparkPlug_Contracts_IInclude_Select
  commentId: P:SparkPlug.Contracts.IInclude.Select
  fullName: SparkPlug.Contracts.IInclude.Select
  nameWithType: IInclude.Select
- uid: SparkPlug.Contracts.IInclude.Select*
  name: Select
  href: api/SparkPlug.Contracts.IInclude.html#SparkPlug_Contracts_IInclude_Select_
  commentId: Overload:SparkPlug.Contracts.IInclude.Select
  isSpec: "True"
  fullName: SparkPlug.Contracts.IInclude.Select
  nameWithType: IInclude.Select
- uid: SparkPlug.Contracts.IModule
  name: IModule
  href: api/SparkPlug.Contracts.IModule.html
  commentId: T:SparkPlug.Contracts.IModule
  fullName: SparkPlug.Contracts.IModule
  nameWithType: IModule
- uid: SparkPlug.Contracts.IModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Contracts.IModule.html#SparkPlug_Contracts_IModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Contracts.IModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Contracts.IModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: IModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Contracts.IModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Contracts.IModule.html#SparkPlug_Contracts_IModule_AddModule_
  commentId: Overload:SparkPlug.Contracts.IModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Contracts.IModule.AddModule
  nameWithType: IModule.AddModule
- uid: SparkPlug.Contracts.IModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Contracts.IModule.html#SparkPlug_Contracts_IModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Contracts.IModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Contracts.IModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: IModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Contracts.IModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Contracts.IModule.html#SparkPlug_Contracts_IModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Contracts.IModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Contracts.IModule.UseMiddelwares
  nameWithType: IModule.UseMiddelwares
- uid: SparkPlug.Contracts.IModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Contracts.IModule.html#SparkPlug_Contracts_IModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Contracts.IModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Contracts.IModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: IModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Contracts.IModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Contracts.IModule.html#SparkPlug_Contracts_IModule_UseModule_
  commentId: Overload:SparkPlug.Contracts.IModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Contracts.IModule.UseModule
  nameWithType: IModule.UseModule
- uid: SparkPlug.Contracts.IOrder
  name: IOrder
  href: api/SparkPlug.Contracts.IOrder.html
  commentId: T:SparkPlug.Contracts.IOrder
  fullName: SparkPlug.Contracts.IOrder
  nameWithType: IOrder
- uid: SparkPlug.Contracts.IOrder.Direction
  name: Direction
  href: api/SparkPlug.Contracts.IOrder.html#SparkPlug_Contracts_IOrder_Direction
  commentId: P:SparkPlug.Contracts.IOrder.Direction
  fullName: SparkPlug.Contracts.IOrder.Direction
  nameWithType: IOrder.Direction
- uid: SparkPlug.Contracts.IOrder.Direction*
  name: Direction
  href: api/SparkPlug.Contracts.IOrder.html#SparkPlug_Contracts_IOrder_Direction_
  commentId: Overload:SparkPlug.Contracts.IOrder.Direction
  isSpec: "True"
  fullName: SparkPlug.Contracts.IOrder.Direction
  nameWithType: IOrder.Direction
- uid: SparkPlug.Contracts.IOrder.Field
  name: Field
  href: api/SparkPlug.Contracts.IOrder.html#SparkPlug_Contracts_IOrder_Field
  commentId: P:SparkPlug.Contracts.IOrder.Field
  fullName: SparkPlug.Contracts.IOrder.Field
  nameWithType: IOrder.Field
- uid: SparkPlug.Contracts.IOrder.Field*
  name: Field
  href: api/SparkPlug.Contracts.IOrder.html#SparkPlug_Contracts_IOrder_Field_
  commentId: Overload:SparkPlug.Contracts.IOrder.Field
  isSpec: "True"
  fullName: SparkPlug.Contracts.IOrder.Field
  nameWithType: IOrder.Field
- uid: SparkPlug.Contracts.IPageContext
  name: IPageContext
  href: api/SparkPlug.Contracts.IPageContext.html
  commentId: T:SparkPlug.Contracts.IPageContext
  fullName: SparkPlug.Contracts.IPageContext
  nameWithType: IPageContext
- uid: SparkPlug.Contracts.IPageContext.PageNo
  name: PageNo
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_PageNo
  commentId: P:SparkPlug.Contracts.IPageContext.PageNo
  fullName: SparkPlug.Contracts.IPageContext.PageNo
  nameWithType: IPageContext.PageNo
- uid: SparkPlug.Contracts.IPageContext.PageNo*
  name: PageNo
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_PageNo_
  commentId: Overload:SparkPlug.Contracts.IPageContext.PageNo
  isSpec: "True"
  fullName: SparkPlug.Contracts.IPageContext.PageNo
  nameWithType: IPageContext.PageNo
- uid: SparkPlug.Contracts.IPageContext.PageSize
  name: PageSize
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_PageSize
  commentId: P:SparkPlug.Contracts.IPageContext.PageSize
  fullName: SparkPlug.Contracts.IPageContext.PageSize
  nameWithType: IPageContext.PageSize
- uid: SparkPlug.Contracts.IPageContext.PageSize*
  name: PageSize
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_PageSize_
  commentId: Overload:SparkPlug.Contracts.IPageContext.PageSize
  isSpec: "True"
  fullName: SparkPlug.Contracts.IPageContext.PageSize
  nameWithType: IPageContext.PageSize
- uid: SparkPlug.Contracts.IPageContext.Skip
  name: Skip
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_Skip
  commentId: P:SparkPlug.Contracts.IPageContext.Skip
  fullName: SparkPlug.Contracts.IPageContext.Skip
  nameWithType: IPageContext.Skip
- uid: SparkPlug.Contracts.IPageContext.Skip*
  name: Skip
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_Skip_
  commentId: Overload:SparkPlug.Contracts.IPageContext.Skip
  isSpec: "True"
  fullName: SparkPlug.Contracts.IPageContext.Skip
  nameWithType: IPageContext.Skip
- uid: SparkPlug.Contracts.IPageContext.Total
  name: Total
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_Total
  commentId: P:SparkPlug.Contracts.IPageContext.Total
  fullName: SparkPlug.Contracts.IPageContext.Total
  nameWithType: IPageContext.Total
- uid: SparkPlug.Contracts.IPageContext.Total*
  name: Total
  href: api/SparkPlug.Contracts.IPageContext.html#SparkPlug_Contracts_IPageContext_Total_
  commentId: Overload:SparkPlug.Contracts.IPageContext.Total
  isSpec: "True"
  fullName: SparkPlug.Contracts.IPageContext.Total
  nameWithType: IPageContext.Total
- uid: SparkPlug.Contracts.IQueryRequest
  name: IQueryRequest
  href: api/SparkPlug.Contracts.IQueryRequest.html
  commentId: T:SparkPlug.Contracts.IQueryRequest
  fullName: SparkPlug.Contracts.IQueryRequest
  nameWithType: IQueryRequest
- uid: SparkPlug.Contracts.IQueryRequest.Includes
  name: Includes
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Includes
  commentId: P:SparkPlug.Contracts.IQueryRequest.Includes
  fullName: SparkPlug.Contracts.IQueryRequest.Includes
  nameWithType: IQueryRequest.Includes
- uid: SparkPlug.Contracts.IQueryRequest.Includes*
  name: Includes
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Includes_
  commentId: Overload:SparkPlug.Contracts.IQueryRequest.Includes
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequest.Includes
  nameWithType: IQueryRequest.Includes
- uid: SparkPlug.Contracts.IQueryRequest.Page
  name: Page
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Page
  commentId: P:SparkPlug.Contracts.IQueryRequest.Page
  fullName: SparkPlug.Contracts.IQueryRequest.Page
  nameWithType: IQueryRequest.Page
- uid: SparkPlug.Contracts.IQueryRequest.Page*
  name: Page
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Page_
  commentId: Overload:SparkPlug.Contracts.IQueryRequest.Page
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequest.Page
  nameWithType: IQueryRequest.Page
- uid: SparkPlug.Contracts.IQueryRequest.Select
  name: Select
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Select
  commentId: P:SparkPlug.Contracts.IQueryRequest.Select
  fullName: SparkPlug.Contracts.IQueryRequest.Select
  nameWithType: IQueryRequest.Select
- uid: SparkPlug.Contracts.IQueryRequest.Select*
  name: Select
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Select_
  commentId: Overload:SparkPlug.Contracts.IQueryRequest.Select
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequest.Select
  nameWithType: IQueryRequest.Select
- uid: SparkPlug.Contracts.IQueryRequest.Sort
  name: Sort
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Sort
  commentId: P:SparkPlug.Contracts.IQueryRequest.Sort
  fullName: SparkPlug.Contracts.IQueryRequest.Sort
  nameWithType: IQueryRequest.Sort
- uid: SparkPlug.Contracts.IQueryRequest.Sort*
  name: Sort
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Sort_
  commentId: Overload:SparkPlug.Contracts.IQueryRequest.Sort
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequest.Sort
  nameWithType: IQueryRequest.Sort
- uid: SparkPlug.Contracts.IQueryRequest.Where
  name: Where
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Where
  commentId: P:SparkPlug.Contracts.IQueryRequest.Where
  fullName: SparkPlug.Contracts.IQueryRequest.Where
  nameWithType: IQueryRequest.Where
- uid: SparkPlug.Contracts.IQueryRequest.Where*
  name: Where
  href: api/SparkPlug.Contracts.IQueryRequest.html#SparkPlug_Contracts_IQueryRequest_Where_
  commentId: Overload:SparkPlug.Contracts.IQueryRequest.Where
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequest.Where
  nameWithType: IQueryRequest.Where
- uid: SparkPlug.Contracts.IQueryRequestExtensions
  name: IQueryRequestExtensions
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html
  commentId: T:SparkPlug.Contracts.IQueryRequestExtensions
  fullName: SparkPlug.Contracts.IQueryRequestExtensions
  nameWithType: IQueryRequestExtensions
- uid: SparkPlug.Contracts.IQueryRequestExtensions.AndWhere(SparkPlug.Contracts.IQueryRequest,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name: AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_AndWhere_SparkPlug_Contracts_IQueryRequest_System_Func_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_CompositeFilter__
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.AndWhere(SparkPlug.Contracts.IQueryRequest,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name.vb: AndWhere(IQueryRequest, Func(Of CompositeFilter, CompositeFilter))
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.AndWhere(SparkPlug.Contracts.IQueryRequest, System.Func<SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter>)
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.AndWhere(SparkPlug.Contracts.IQueryRequest, System.Func(Of SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter))
  nameWithType: IQueryRequestExtensions.AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>)
  nameWithType.vb: IQueryRequestExtensions.AndWhere(IQueryRequest, Func(Of CompositeFilter, CompositeFilter))
- uid: SparkPlug.Contracts.IQueryRequestExtensions.AndWhere*
  name: AndWhere
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_AndWhere_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.AndWhere
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.AndWhere
  nameWithType: IQueryRequestExtensions.AndWhere
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Include)
  name: Include(IQueryRequest, Include)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Include_SparkPlug_Contracts_IQueryRequest_SparkPlug_Contracts_Include_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Include)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest, SparkPlug.Contracts.Include)
  nameWithType: IQueryRequestExtensions.Include(IQueryRequest, Include)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest,System.String)
  name: Include(IQueryRequest, string)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Include_SparkPlug_Contracts_IQueryRequest_System_String_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest,System.String)
  name.vb: Include(IQueryRequest, String)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest, string)
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Include(SparkPlug.Contracts.IQueryRequest, String)
  nameWithType: IQueryRequestExtensions.Include(IQueryRequest, string)
  nameWithType.vb: IQueryRequestExtensions.Include(IQueryRequest, String)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Include*
  name: Include
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Include_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.Include
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Include
  nameWithType: IQueryRequestExtensions.Include
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Includes(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Include[])
  name: Includes(IQueryRequest, params Include[])
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Includes_SparkPlug_Contracts_IQueryRequest_SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Includes(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Include[])
  name.vb: Includes(IQueryRequest, ParamArray Include())
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Includes(SparkPlug.Contracts.IQueryRequest, params SparkPlug.Contracts.Include[])
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Includes(SparkPlug.Contracts.IQueryRequest, ParamArray SparkPlug.Contracts.Include())
  nameWithType: IQueryRequestExtensions.Includes(IQueryRequest, params Include[])
  nameWithType.vb: IQueryRequestExtensions.Includes(IQueryRequest, ParamArray Include())
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Includes*
  name: Includes
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Includes_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.Includes
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Includes
  nameWithType: IQueryRequestExtensions.Includes
- uid: SparkPlug.Contracts.IQueryRequestExtensions.NextPage(SparkPlug.Contracts.IQueryRequest)
  name: NextPage(IQueryRequest)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_NextPage_SparkPlug_Contracts_IQueryRequest_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.NextPage(SparkPlug.Contracts.IQueryRequest)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.NextPage(SparkPlug.Contracts.IQueryRequest)
  nameWithType: IQueryRequestExtensions.NextPage(IQueryRequest)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.NextPage*
  name: NextPage
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_NextPage_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.NextPage
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.NextPage
  nameWithType: IQueryRequestExtensions.NextPage
- uid: SparkPlug.Contracts.IQueryRequestExtensions.OrWhere(SparkPlug.Contracts.IQueryRequest,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name: OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_OrWhere_SparkPlug_Contracts_IQueryRequest_System_Func_SparkPlug_Contracts_CompositeFilter_SparkPlug_Contracts_CompositeFilter__
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.OrWhere(SparkPlug.Contracts.IQueryRequest,System.Func{SparkPlug.Contracts.CompositeFilter,SparkPlug.Contracts.CompositeFilter})
  name.vb: OrWhere(IQueryRequest, Func(Of CompositeFilter, CompositeFilter))
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.OrWhere(SparkPlug.Contracts.IQueryRequest, System.Func<SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter>)
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.OrWhere(SparkPlug.Contracts.IQueryRequest, System.Func(Of SparkPlug.Contracts.CompositeFilter, SparkPlug.Contracts.CompositeFilter))
  nameWithType: IQueryRequestExtensions.OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>)
  nameWithType.vb: IQueryRequestExtensions.OrWhere(IQueryRequest, Func(Of CompositeFilter, CompositeFilter))
- uid: SparkPlug.Contracts.IQueryRequestExtensions.OrWhere*
  name: OrWhere
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_OrWhere_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.OrWhere
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.OrWhere
  nameWithType: IQueryRequestExtensions.OrWhere
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.PageContext)
  name: Page(IQueryRequest, PageContext)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Page_SparkPlug_Contracts_IQueryRequest_SparkPlug_Contracts_PageContext_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.PageContext)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest, SparkPlug.Contracts.PageContext)
  nameWithType: IQueryRequestExtensions.Page(IQueryRequest, PageContext)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest,System.Int32,System.Int32)
  name: Page(IQueryRequest, int, int)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Page_SparkPlug_Contracts_IQueryRequest_System_Int32_System_Int32_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest,System.Int32,System.Int32)
  name.vb: Page(IQueryRequest, Integer, Integer)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest, int, int)
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Page(SparkPlug.Contracts.IQueryRequest, Integer, Integer)
  nameWithType: IQueryRequestExtensions.Page(IQueryRequest, int, int)
  nameWithType.vb: IQueryRequestExtensions.Page(IQueryRequest, Integer, Integer)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Page*
  name: Page
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Page_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.Page
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Page
  nameWithType: IQueryRequestExtensions.Page
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Select(SparkPlug.Contracts.IQueryRequest,System.String[])
  name: Select(IQueryRequest, params string[])
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Select_SparkPlug_Contracts_IQueryRequest_System_String___
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Select(SparkPlug.Contracts.IQueryRequest,System.String[])
  name.vb: Select(IQueryRequest, ParamArray String())
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Select(SparkPlug.Contracts.IQueryRequest, params string[])
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Select(SparkPlug.Contracts.IQueryRequest, ParamArray String())
  nameWithType: IQueryRequestExtensions.Select(IQueryRequest, params string[])
  nameWithType.vb: IQueryRequestExtensions.Select(IQueryRequest, ParamArray String())
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Select*
  name: Select
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Select_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.Select
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Select
  nameWithType: IQueryRequestExtensions.Select
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Order)
  name: Sort(IQueryRequest, Order)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Sort_SparkPlug_Contracts_IQueryRequest_SparkPlug_Contracts_Order_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Order)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest, SparkPlug.Contracts.Order)
  nameWithType: IQueryRequestExtensions.Sort(IQueryRequest, Order)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Order[])
  name: Sort(IQueryRequest, Order[])
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Sort_SparkPlug_Contracts_IQueryRequest_SparkPlug_Contracts_Order___
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.Order[])
  name.vb: Sort(IQueryRequest, Order())
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest, SparkPlug.Contracts.Order[])
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest, SparkPlug.Contracts.Order())
  nameWithType: IQueryRequestExtensions.Sort(IQueryRequest, Order[])
  nameWithType.vb: IQueryRequestExtensions.Sort(IQueryRequest, Order())
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest,System.String,SparkPlug.Contracts.Direction)
  name: Sort(IQueryRequest, string, Direction)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Sort_SparkPlug_Contracts_IQueryRequest_System_String_SparkPlug_Contracts_Direction_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest,System.String,SparkPlug.Contracts.Direction)
  name.vb: Sort(IQueryRequest, String, Direction)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest, string, SparkPlug.Contracts.Direction)
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Sort(SparkPlug.Contracts.IQueryRequest, String, SparkPlug.Contracts.Direction)
  nameWithType: IQueryRequestExtensions.Sort(IQueryRequest, string, Direction)
  nameWithType.vb: IQueryRequestExtensions.Sort(IQueryRequest, String, Direction)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Sort*
  name: Sort
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Sort_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.Sort
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Sort
  nameWithType: IQueryRequestExtensions.Sort
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.IFilter)
  name: Where(IQueryRequest, IFilter)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Where_SparkPlug_Contracts_IQueryRequest_SparkPlug_Contracts_IFilter_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest,SparkPlug.Contracts.IFilter)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest, SparkPlug.Contracts.IFilter)
  nameWithType: IQueryRequestExtensions.Where(IQueryRequest, IFilter)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest,System.String,SparkPlug.Contracts.FieldOperator,System.Object)
  name: Where(IQueryRequest, string, FieldOperator, object)
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Where_SparkPlug_Contracts_IQueryRequest_System_String_SparkPlug_Contracts_FieldOperator_System_Object_
  commentId: M:SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest,System.String,SparkPlug.Contracts.FieldOperator,System.Object)
  name.vb: Where(IQueryRequest, String, FieldOperator, Object)
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest, string, SparkPlug.Contracts.FieldOperator, object)
  fullName.vb: SparkPlug.Contracts.IQueryRequestExtensions.Where(SparkPlug.Contracts.IQueryRequest, String, SparkPlug.Contracts.FieldOperator, Object)
  nameWithType: IQueryRequestExtensions.Where(IQueryRequest, string, FieldOperator, object)
  nameWithType.vb: IQueryRequestExtensions.Where(IQueryRequest, String, FieldOperator, Object)
- uid: SparkPlug.Contracts.IQueryRequestExtensions.Where*
  name: Where
  href: api/SparkPlug.Contracts.IQueryRequestExtensions.html#SparkPlug_Contracts_IQueryRequestExtensions_Where_
  commentId: Overload:SparkPlug.Contracts.IQueryRequestExtensions.Where
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryRequestExtensions.Where
  nameWithType: IQueryRequestExtensions.Where
- uid: SparkPlug.Contracts.IQueryResponse
  name: IQueryResponse
  href: api/SparkPlug.Contracts.IQueryResponse.html
  commentId: T:SparkPlug.Contracts.IQueryResponse
  fullName: SparkPlug.Contracts.IQueryResponse
  nameWithType: IQueryResponse
- uid: SparkPlug.Contracts.IQueryResponse.Data
  name: Data
  href: api/SparkPlug.Contracts.IQueryResponse.html#SparkPlug_Contracts_IQueryResponse_Data
  commentId: P:SparkPlug.Contracts.IQueryResponse.Data
  fullName: SparkPlug.Contracts.IQueryResponse.Data
  nameWithType: IQueryResponse.Data
- uid: SparkPlug.Contracts.IQueryResponse.Data*
  name: Data
  href: api/SparkPlug.Contracts.IQueryResponse.html#SparkPlug_Contracts_IQueryResponse_Data_
  commentId: Overload:SparkPlug.Contracts.IQueryResponse.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryResponse.Data
  nameWithType: IQueryResponse.Data
- uid: SparkPlug.Contracts.IQueryResponse.Page
  name: Page
  href: api/SparkPlug.Contracts.IQueryResponse.html#SparkPlug_Contracts_IQueryResponse_Page
  commentId: P:SparkPlug.Contracts.IQueryResponse.Page
  fullName: SparkPlug.Contracts.IQueryResponse.Page
  nameWithType: IQueryResponse.Page
- uid: SparkPlug.Contracts.IQueryResponse.Page*
  name: Page
  href: api/SparkPlug.Contracts.IQueryResponse.html#SparkPlug_Contracts_IQueryResponse_Page_
  commentId: Overload:SparkPlug.Contracts.IQueryResponse.Page
  isSpec: "True"
  fullName: SparkPlug.Contracts.IQueryResponse.Page
  nameWithType: IQueryResponse.Page
- uid: SparkPlug.Contracts.ISerializer
  name: ISerializer
  href: api/SparkPlug.Contracts.ISerializer.html
  commentId: T:SparkPlug.Contracts.ISerializer
  fullName: SparkPlug.Contracts.ISerializer
  nameWithType: ISerializer
- uid: SparkPlug.Contracts.ISerializer.Deserialize*
  name: Deserialize
  href: api/SparkPlug.Contracts.ISerializer.html#SparkPlug_Contracts_ISerializer_Deserialize_
  commentId: Overload:SparkPlug.Contracts.ISerializer.Deserialize
  isSpec: "True"
  fullName: SparkPlug.Contracts.ISerializer.Deserialize
  nameWithType: ISerializer.Deserialize
- uid: SparkPlug.Contracts.ISerializer.Deserialize``1(System.String)
  name: Deserialize<T>(string)
  href: api/SparkPlug.Contracts.ISerializer.html#SparkPlug_Contracts_ISerializer_Deserialize__1_System_String_
  commentId: M:SparkPlug.Contracts.ISerializer.Deserialize``1(System.String)
  name.vb: Deserialize(Of T)(String)
  fullName: SparkPlug.Contracts.ISerializer.Deserialize<T>(string)
  fullName.vb: SparkPlug.Contracts.ISerializer.Deserialize(Of T)(String)
  nameWithType: ISerializer.Deserialize<T>(string)
  nameWithType.vb: ISerializer.Deserialize(Of T)(String)
- uid: SparkPlug.Contracts.ISerializer.Serialize*
  name: Serialize
  href: api/SparkPlug.Contracts.ISerializer.html#SparkPlug_Contracts_ISerializer_Serialize_
  commentId: Overload:SparkPlug.Contracts.ISerializer.Serialize
  isSpec: "True"
  fullName: SparkPlug.Contracts.ISerializer.Serialize
  nameWithType: ISerializer.Serialize
- uid: SparkPlug.Contracts.ISerializer.Serialize``1(``0)
  name: Serialize<T>(T)
  href: api/SparkPlug.Contracts.ISerializer.html#SparkPlug_Contracts_ISerializer_Serialize__1___0_
  commentId: M:SparkPlug.Contracts.ISerializer.Serialize``1(``0)
  name.vb: Serialize(Of T)(T)
  fullName: SparkPlug.Contracts.ISerializer.Serialize<T>(T)
  fullName.vb: SparkPlug.Contracts.ISerializer.Serialize(Of T)(T)
  nameWithType: ISerializer.Serialize<T>(T)
  nameWithType.vb: ISerializer.Serialize(Of T)(T)
- uid: SparkPlug.Contracts.IUnaryFilter
  name: IUnaryFilter
  href: api/SparkPlug.Contracts.IUnaryFilter.html
  commentId: T:SparkPlug.Contracts.IUnaryFilter
  fullName: SparkPlug.Contracts.IUnaryFilter
  nameWithType: IUnaryFilter
- uid: SparkPlug.Contracts.IUnaryFilter.Op
  name: Op
  href: api/SparkPlug.Contracts.IUnaryFilter.html#SparkPlug_Contracts_IUnaryFilter_Op
  commentId: P:SparkPlug.Contracts.IUnaryFilter.Op
  fullName: SparkPlug.Contracts.IUnaryFilter.Op
  nameWithType: IUnaryFilter.Op
- uid: SparkPlug.Contracts.IUnaryFilter.Op*
  name: Op
  href: api/SparkPlug.Contracts.IUnaryFilter.html#SparkPlug_Contracts_IUnaryFilter_Op_
  commentId: Overload:SparkPlug.Contracts.IUnaryFilter.Op
  isSpec: "True"
  fullName: SparkPlug.Contracts.IUnaryFilter.Op
  nameWithType: IUnaryFilter.Op
- uid: SparkPlug.Contracts.Include
  name: Include
  href: api/SparkPlug.Contracts.Include.html
  commentId: T:SparkPlug.Contracts.Include
  fullName: SparkPlug.Contracts.Include
  nameWithType: Include
- uid: SparkPlug.Contracts.Include.#ctor(System.String)
  name: Include(string)
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include__ctor_System_String_
  commentId: M:SparkPlug.Contracts.Include.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Contracts.Include.Include(string)
  fullName.vb: SparkPlug.Contracts.Include.New(String)
  nameWithType: Include.Include(string)
  nameWithType.vb: Include.New(String)
- uid: SparkPlug.Contracts.Include.#ctor(System.String,System.String[],SparkPlug.Contracts.Include[])
  name: Include(string, string[], Include[]?)
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include__ctor_System_String_System_String___SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Contracts.Include.#ctor(System.String,System.String[],SparkPlug.Contracts.Include[])
  name.vb: New(String, String(), Include())
  fullName: SparkPlug.Contracts.Include.Include(string, string[], SparkPlug.Contracts.Include[]?)
  fullName.vb: SparkPlug.Contracts.Include.New(String, String(), SparkPlug.Contracts.Include())
  nameWithType: Include.Include(string, string[], Include[]?)
  nameWithType.vb: Include.New(String, String(), Include())
- uid: SparkPlug.Contracts.Include.#ctor*
  name: Include
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include__ctor_
  commentId: Overload:SparkPlug.Contracts.Include.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.Include.Include
  fullName.vb: SparkPlug.Contracts.Include.New
  nameWithType: Include.Include
  nameWithType.vb: Include.New
- uid: SparkPlug.Contracts.Include.Includes
  name: Includes
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include_Includes
  commentId: P:SparkPlug.Contracts.Include.Includes
  fullName: SparkPlug.Contracts.Include.Includes
  nameWithType: Include.Includes
- uid: SparkPlug.Contracts.Include.Includes*
  name: Includes
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include_Includes_
  commentId: Overload:SparkPlug.Contracts.Include.Includes
  isSpec: "True"
  fullName: SparkPlug.Contracts.Include.Includes
  nameWithType: Include.Includes
- uid: SparkPlug.Contracts.Include.Name
  name: Name
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include_Name
  commentId: P:SparkPlug.Contracts.Include.Name
  fullName: SparkPlug.Contracts.Include.Name
  nameWithType: Include.Name
- uid: SparkPlug.Contracts.Include.Name*
  name: Name
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include_Name_
  commentId: Overload:SparkPlug.Contracts.Include.Name
  isSpec: "True"
  fullName: SparkPlug.Contracts.Include.Name
  nameWithType: Include.Name
- uid: SparkPlug.Contracts.Include.Select
  name: Select
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include_Select
  commentId: P:SparkPlug.Contracts.Include.Select
  fullName: SparkPlug.Contracts.Include.Select
  nameWithType: Include.Select
- uid: SparkPlug.Contracts.Include.Select*
  name: Select
  href: api/SparkPlug.Contracts.Include.html#SparkPlug_Contracts_Include_Select_
  commentId: Overload:SparkPlug.Contracts.Include.Select
  isSpec: "True"
  fullName: SparkPlug.Contracts.Include.Select
  nameWithType: Include.Select
- uid: SparkPlug.Contracts.NewtonsoftSerializer
  name: NewtonsoftSerializer
  href: api/SparkPlug.Contracts.NewtonsoftSerializer.html
  commentId: T:SparkPlug.Contracts.NewtonsoftSerializer
  fullName: SparkPlug.Contracts.NewtonsoftSerializer
  nameWithType: NewtonsoftSerializer
- uid: SparkPlug.Contracts.NewtonsoftSerializer.Deserialize*
  name: Deserialize
  href: api/SparkPlug.Contracts.NewtonsoftSerializer.html#SparkPlug_Contracts_NewtonsoftSerializer_Deserialize_
  commentId: Overload:SparkPlug.Contracts.NewtonsoftSerializer.Deserialize
  isSpec: "True"
  fullName: SparkPlug.Contracts.NewtonsoftSerializer.Deserialize
  nameWithType: NewtonsoftSerializer.Deserialize
- uid: SparkPlug.Contracts.NewtonsoftSerializer.Deserialize``1(System.String)
  name: Deserialize<T>(string)
  href: api/SparkPlug.Contracts.NewtonsoftSerializer.html#SparkPlug_Contracts_NewtonsoftSerializer_Deserialize__1_System_String_
  commentId: M:SparkPlug.Contracts.NewtonsoftSerializer.Deserialize``1(System.String)
  name.vb: Deserialize(Of T)(String)
  fullName: SparkPlug.Contracts.NewtonsoftSerializer.Deserialize<T>(string)
  fullName.vb: SparkPlug.Contracts.NewtonsoftSerializer.Deserialize(Of T)(String)
  nameWithType: NewtonsoftSerializer.Deserialize<T>(string)
  nameWithType.vb: NewtonsoftSerializer.Deserialize(Of T)(String)
- uid: SparkPlug.Contracts.NewtonsoftSerializer.Serialize*
  name: Serialize
  href: api/SparkPlug.Contracts.NewtonsoftSerializer.html#SparkPlug_Contracts_NewtonsoftSerializer_Serialize_
  commentId: Overload:SparkPlug.Contracts.NewtonsoftSerializer.Serialize
  isSpec: "True"
  fullName: SparkPlug.Contracts.NewtonsoftSerializer.Serialize
  nameWithType: NewtonsoftSerializer.Serialize
- uid: SparkPlug.Contracts.NewtonsoftSerializer.Serialize``1(``0)
  name: Serialize<T>(T)
  href: api/SparkPlug.Contracts.NewtonsoftSerializer.html#SparkPlug_Contracts_NewtonsoftSerializer_Serialize__1___0_
  commentId: M:SparkPlug.Contracts.NewtonsoftSerializer.Serialize``1(``0)
  name.vb: Serialize(Of T)(T)
  fullName: SparkPlug.Contracts.NewtonsoftSerializer.Serialize<T>(T)
  fullName.vb: SparkPlug.Contracts.NewtonsoftSerializer.Serialize(Of T)(T)
  nameWithType: NewtonsoftSerializer.Serialize<T>(T)
  nameWithType.vb: NewtonsoftSerializer.Serialize(Of T)(T)
- uid: SparkPlug.Contracts.Order
  name: Order
  href: api/SparkPlug.Contracts.Order.html
  commentId: T:SparkPlug.Contracts.Order
  fullName: SparkPlug.Contracts.Order
  nameWithType: Order
- uid: SparkPlug.Contracts.Order.#ctor(System.String,SparkPlug.Contracts.Direction)
  name: Order(string, Direction)
  href: api/SparkPlug.Contracts.Order.html#SparkPlug_Contracts_Order__ctor_System_String_SparkPlug_Contracts_Direction_
  commentId: M:SparkPlug.Contracts.Order.#ctor(System.String,SparkPlug.Contracts.Direction)
  name.vb: New(String, Direction)
  fullName: SparkPlug.Contracts.Order.Order(string, SparkPlug.Contracts.Direction)
  fullName.vb: SparkPlug.Contracts.Order.New(String, SparkPlug.Contracts.Direction)
  nameWithType: Order.Order(string, Direction)
  nameWithType.vb: Order.New(String, Direction)
- uid: SparkPlug.Contracts.Order.#ctor*
  name: Order
  href: api/SparkPlug.Contracts.Order.html#SparkPlug_Contracts_Order__ctor_
  commentId: Overload:SparkPlug.Contracts.Order.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.Order.Order
  fullName.vb: SparkPlug.Contracts.Order.New
  nameWithType: Order.Order
  nameWithType.vb: Order.New
- uid: SparkPlug.Contracts.Order.Direction
  name: Direction
  href: api/SparkPlug.Contracts.Order.html#SparkPlug_Contracts_Order_Direction
  commentId: P:SparkPlug.Contracts.Order.Direction
  fullName: SparkPlug.Contracts.Order.Direction
  nameWithType: Order.Direction
- uid: SparkPlug.Contracts.Order.Direction*
  name: Direction
  href: api/SparkPlug.Contracts.Order.html#SparkPlug_Contracts_Order_Direction_
  commentId: Overload:SparkPlug.Contracts.Order.Direction
  isSpec: "True"
  fullName: SparkPlug.Contracts.Order.Direction
  nameWithType: Order.Direction
- uid: SparkPlug.Contracts.Order.Field
  name: Field
  href: api/SparkPlug.Contracts.Order.html#SparkPlug_Contracts_Order_Field
  commentId: P:SparkPlug.Contracts.Order.Field
  fullName: SparkPlug.Contracts.Order.Field
  nameWithType: Order.Field
- uid: SparkPlug.Contracts.Order.Field*
  name: Field
  href: api/SparkPlug.Contracts.Order.html#SparkPlug_Contracts_Order_Field_
  commentId: Overload:SparkPlug.Contracts.Order.Field
  isSpec: "True"
  fullName: SparkPlug.Contracts.Order.Field
  nameWithType: Order.Field
- uid: SparkPlug.Contracts.PageContext
  name: PageContext
  href: api/SparkPlug.Contracts.PageContext.html
  commentId: T:SparkPlug.Contracts.PageContext
  fullName: SparkPlug.Contracts.PageContext
  nameWithType: PageContext
- uid: SparkPlug.Contracts.PageContext.#ctor(System.Int32,System.Int32)
  name: PageContext(int, int)
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext__ctor_System_Int32_System_Int32_
  commentId: M:SparkPlug.Contracts.PageContext.#ctor(System.Int32,System.Int32)
  name.vb: New(Integer, Integer)
  fullName: SparkPlug.Contracts.PageContext.PageContext(int, int)
  fullName.vb: SparkPlug.Contracts.PageContext.New(Integer, Integer)
  nameWithType: PageContext.PageContext(int, int)
  nameWithType.vb: PageContext.New(Integer, Integer)
- uid: SparkPlug.Contracts.PageContext.#ctor*
  name: PageContext
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext__ctor_
  commentId: Overload:SparkPlug.Contracts.PageContext.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.PageContext.PageContext
  fullName.vb: SparkPlug.Contracts.PageContext.New
  nameWithType: PageContext.PageContext
  nameWithType.vb: PageContext.New
- uid: SparkPlug.Contracts.PageContext.PageNo
  name: PageNo
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_PageNo
  commentId: P:SparkPlug.Contracts.PageContext.PageNo
  fullName: SparkPlug.Contracts.PageContext.PageNo
  nameWithType: PageContext.PageNo
- uid: SparkPlug.Contracts.PageContext.PageNo*
  name: PageNo
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_PageNo_
  commentId: Overload:SparkPlug.Contracts.PageContext.PageNo
  isSpec: "True"
  fullName: SparkPlug.Contracts.PageContext.PageNo
  nameWithType: PageContext.PageNo
- uid: SparkPlug.Contracts.PageContext.PageSize
  name: PageSize
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_PageSize
  commentId: P:SparkPlug.Contracts.PageContext.PageSize
  fullName: SparkPlug.Contracts.PageContext.PageSize
  nameWithType: PageContext.PageSize
- uid: SparkPlug.Contracts.PageContext.PageSize*
  name: PageSize
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_PageSize_
  commentId: Overload:SparkPlug.Contracts.PageContext.PageSize
  isSpec: "True"
  fullName: SparkPlug.Contracts.PageContext.PageSize
  nameWithType: PageContext.PageSize
- uid: SparkPlug.Contracts.PageContext.Skip
  name: Skip
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_Skip
  commentId: P:SparkPlug.Contracts.PageContext.Skip
  fullName: SparkPlug.Contracts.PageContext.Skip
  nameWithType: PageContext.Skip
- uid: SparkPlug.Contracts.PageContext.Skip*
  name: Skip
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_Skip_
  commentId: Overload:SparkPlug.Contracts.PageContext.Skip
  isSpec: "True"
  fullName: SparkPlug.Contracts.PageContext.Skip
  nameWithType: PageContext.Skip
- uid: SparkPlug.Contracts.PageContext.Total
  name: Total
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_Total
  commentId: P:SparkPlug.Contracts.PageContext.Total
  fullName: SparkPlug.Contracts.PageContext.Total
  nameWithType: PageContext.Total
- uid: SparkPlug.Contracts.PageContext.Total*
  name: Total
  href: api/SparkPlug.Contracts.PageContext.html#SparkPlug_Contracts_PageContext_Total_
  commentId: Overload:SparkPlug.Contracts.PageContext.Total
  isSpec: "True"
  fullName: SparkPlug.Contracts.PageContext.Total
  nameWithType: PageContext.Total
- uid: SparkPlug.Contracts.QueryRequest
  name: QueryRequest
  href: api/SparkPlug.Contracts.QueryRequest.html
  commentId: T:SparkPlug.Contracts.QueryRequest
  fullName: SparkPlug.Contracts.QueryRequest
  nameWithType: QueryRequest
- uid: SparkPlug.Contracts.QueryRequest.#ctor
  name: QueryRequest()
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest__ctor
  commentId: M:SparkPlug.Contracts.QueryRequest.#ctor
  name.vb: New()
  fullName: SparkPlug.Contracts.QueryRequest.QueryRequest()
  fullName.vb: SparkPlug.Contracts.QueryRequest.New()
  nameWithType: QueryRequest.QueryRequest()
  nameWithType.vb: QueryRequest.New()
- uid: SparkPlug.Contracts.QueryRequest.#ctor(SparkPlug.Contracts.PageContext)
  name: QueryRequest(PageContext)
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest__ctor_SparkPlug_Contracts_PageContext_
  commentId: M:SparkPlug.Contracts.QueryRequest.#ctor(SparkPlug.Contracts.PageContext)
  name.vb: New(PageContext)
  fullName: SparkPlug.Contracts.QueryRequest.QueryRequest(SparkPlug.Contracts.PageContext)
  fullName.vb: SparkPlug.Contracts.QueryRequest.New(SparkPlug.Contracts.PageContext)
  nameWithType: QueryRequest.QueryRequest(PageContext)
  nameWithType.vb: QueryRequest.New(PageContext)
- uid: SparkPlug.Contracts.QueryRequest.#ctor(System.String[],SparkPlug.Contracts.Include[],SparkPlug.Contracts.Filter,SparkPlug.Contracts.Order[],SparkPlug.Contracts.PageContext)
  name: QueryRequest(string[], Include[]?, Filter?, Order[]?, PageContext?)
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest__ctor_System_String___SparkPlug_Contracts_Include___SparkPlug_Contracts_Filter_SparkPlug_Contracts_Order___SparkPlug_Contracts_PageContext_
  commentId: M:SparkPlug.Contracts.QueryRequest.#ctor(System.String[],SparkPlug.Contracts.Include[],SparkPlug.Contracts.Filter,SparkPlug.Contracts.Order[],SparkPlug.Contracts.PageContext)
  name.vb: New(String(), Include(), Filter, Order(), PageContext)
  fullName: SparkPlug.Contracts.QueryRequest.QueryRequest(string[], SparkPlug.Contracts.Include[]?, SparkPlug.Contracts.Filter?, SparkPlug.Contracts.Order[]?, SparkPlug.Contracts.PageContext?)
  fullName.vb: SparkPlug.Contracts.QueryRequest.New(String(), SparkPlug.Contracts.Include(), SparkPlug.Contracts.Filter, SparkPlug.Contracts.Order(), SparkPlug.Contracts.PageContext)
  nameWithType: QueryRequest.QueryRequest(string[], Include[]?, Filter?, Order[]?, PageContext?)
  nameWithType.vb: QueryRequest.New(String(), Include(), Filter, Order(), PageContext)
- uid: SparkPlug.Contracts.QueryRequest.#ctor*
  name: QueryRequest
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest__ctor_
  commentId: Overload:SparkPlug.Contracts.QueryRequest.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.QueryRequest.QueryRequest
  fullName.vb: SparkPlug.Contracts.QueryRequest.New
  nameWithType: QueryRequest.QueryRequest
  nameWithType.vb: QueryRequest.New
- uid: SparkPlug.Contracts.QueryRequest.Includes
  name: Includes
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Includes
  commentId: P:SparkPlug.Contracts.QueryRequest.Includes
  fullName: SparkPlug.Contracts.QueryRequest.Includes
  nameWithType: QueryRequest.Includes
- uid: SparkPlug.Contracts.QueryRequest.Includes*
  name: Includes
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Includes_
  commentId: Overload:SparkPlug.Contracts.QueryRequest.Includes
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryRequest.Includes
  nameWithType: QueryRequest.Includes
- uid: SparkPlug.Contracts.QueryRequest.Page
  name: Page
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Page
  commentId: P:SparkPlug.Contracts.QueryRequest.Page
  fullName: SparkPlug.Contracts.QueryRequest.Page
  nameWithType: QueryRequest.Page
- uid: SparkPlug.Contracts.QueryRequest.Page*
  name: Page
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Page_
  commentId: Overload:SparkPlug.Contracts.QueryRequest.Page
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryRequest.Page
  nameWithType: QueryRequest.Page
- uid: SparkPlug.Contracts.QueryRequest.Select
  name: Select
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Select
  commentId: P:SparkPlug.Contracts.QueryRequest.Select
  fullName: SparkPlug.Contracts.QueryRequest.Select
  nameWithType: QueryRequest.Select
- uid: SparkPlug.Contracts.QueryRequest.Select*
  name: Select
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Select_
  commentId: Overload:SparkPlug.Contracts.QueryRequest.Select
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryRequest.Select
  nameWithType: QueryRequest.Select
- uid: SparkPlug.Contracts.QueryRequest.Sort
  name: Sort
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Sort
  commentId: P:SparkPlug.Contracts.QueryRequest.Sort
  fullName: SparkPlug.Contracts.QueryRequest.Sort
  nameWithType: QueryRequest.Sort
- uid: SparkPlug.Contracts.QueryRequest.Sort*
  name: Sort
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Sort_
  commentId: Overload:SparkPlug.Contracts.QueryRequest.Sort
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryRequest.Sort
  nameWithType: QueryRequest.Sort
- uid: SparkPlug.Contracts.QueryRequest.Where
  name: Where
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Where
  commentId: P:SparkPlug.Contracts.QueryRequest.Where
  fullName: SparkPlug.Contracts.QueryRequest.Where
  nameWithType: QueryRequest.Where
- uid: SparkPlug.Contracts.QueryRequest.Where*
  name: Where
  href: api/SparkPlug.Contracts.QueryRequest.html#SparkPlug_Contracts_QueryRequest_Where_
  commentId: Overload:SparkPlug.Contracts.QueryRequest.Where
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryRequest.Where
  nameWithType: QueryRequest.Where
- uid: SparkPlug.Contracts.QueryResponse
  name: QueryResponse
  href: api/SparkPlug.Contracts.QueryResponse.html
  commentId: T:SparkPlug.Contracts.QueryResponse
  fullName: SparkPlug.Contracts.QueryResponse
  nameWithType: QueryResponse
- uid: SparkPlug.Contracts.QueryResponse.#ctor(System.Collections.Generic.IEnumerable{System.Object},SparkPlug.Contracts.IPageContext)
  name: QueryResponse(IEnumerable<object>?, IPageContext?)
  href: api/SparkPlug.Contracts.QueryResponse.html#SparkPlug_Contracts_QueryResponse__ctor_System_Collections_Generic_IEnumerable_System_Object__SparkPlug_Contracts_IPageContext_
  commentId: M:SparkPlug.Contracts.QueryResponse.#ctor(System.Collections.Generic.IEnumerable{System.Object},SparkPlug.Contracts.IPageContext)
  name.vb: New(IEnumerable(Of Object), IPageContext)
  fullName: SparkPlug.Contracts.QueryResponse.QueryResponse(System.Collections.Generic.IEnumerable<object>?, SparkPlug.Contracts.IPageContext?)
  fullName.vb: SparkPlug.Contracts.QueryResponse.New(System.Collections.Generic.IEnumerable(Of Object), SparkPlug.Contracts.IPageContext)
  nameWithType: QueryResponse.QueryResponse(IEnumerable<object>?, IPageContext?)
  nameWithType.vb: QueryResponse.New(IEnumerable(Of Object), IPageContext)
- uid: SparkPlug.Contracts.QueryResponse.#ctor*
  name: QueryResponse
  href: api/SparkPlug.Contracts.QueryResponse.html#SparkPlug_Contracts_QueryResponse__ctor_
  commentId: Overload:SparkPlug.Contracts.QueryResponse.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.QueryResponse.QueryResponse
  fullName.vb: SparkPlug.Contracts.QueryResponse.New
  nameWithType: QueryResponse.QueryResponse
  nameWithType.vb: QueryResponse.New
- uid: SparkPlug.Contracts.QueryResponse.Data
  name: Data
  href: api/SparkPlug.Contracts.QueryResponse.html#SparkPlug_Contracts_QueryResponse_Data
  commentId: P:SparkPlug.Contracts.QueryResponse.Data
  fullName: SparkPlug.Contracts.QueryResponse.Data
  nameWithType: QueryResponse.Data
- uid: SparkPlug.Contracts.QueryResponse.Data*
  name: Data
  href: api/SparkPlug.Contracts.QueryResponse.html#SparkPlug_Contracts_QueryResponse_Data_
  commentId: Overload:SparkPlug.Contracts.QueryResponse.Data
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryResponse.Data
  nameWithType: QueryResponse.Data
- uid: SparkPlug.Contracts.QueryResponse.Page
  name: Page
  href: api/SparkPlug.Contracts.QueryResponse.html#SparkPlug_Contracts_QueryResponse_Page
  commentId: P:SparkPlug.Contracts.QueryResponse.Page
  fullName: SparkPlug.Contracts.QueryResponse.Page
  nameWithType: QueryResponse.Page
- uid: SparkPlug.Contracts.QueryResponse.Page*
  name: Page
  href: api/SparkPlug.Contracts.QueryResponse.html#SparkPlug_Contracts_QueryResponse_Page_
  commentId: Overload:SparkPlug.Contracts.QueryResponse.Page
  isSpec: "True"
  fullName: SparkPlug.Contracts.QueryResponse.Page
  nameWithType: QueryResponse.Page
- uid: SparkPlug.Contracts.UnaryFilter
  name: UnaryFilter
  href: api/SparkPlug.Contracts.UnaryFilter.html
  commentId: T:SparkPlug.Contracts.UnaryFilter
  fullName: SparkPlug.Contracts.UnaryFilter
  nameWithType: UnaryFilter
- uid: SparkPlug.Contracts.UnaryFilter.#ctor(System.String,SparkPlug.Contracts.UnaryOperator)
  name: UnaryFilter(string, UnaryOperator)
  href: api/SparkPlug.Contracts.UnaryFilter.html#SparkPlug_Contracts_UnaryFilter__ctor_System_String_SparkPlug_Contracts_UnaryOperator_
  commentId: M:SparkPlug.Contracts.UnaryFilter.#ctor(System.String,SparkPlug.Contracts.UnaryOperator)
  name.vb: New(String, UnaryOperator)
  fullName: SparkPlug.Contracts.UnaryFilter.UnaryFilter(string, SparkPlug.Contracts.UnaryOperator)
  fullName.vb: SparkPlug.Contracts.UnaryFilter.New(String, SparkPlug.Contracts.UnaryOperator)
  nameWithType: UnaryFilter.UnaryFilter(string, UnaryOperator)
  nameWithType.vb: UnaryFilter.New(String, UnaryOperator)
- uid: SparkPlug.Contracts.UnaryFilter.#ctor*
  name: UnaryFilter
  href: api/SparkPlug.Contracts.UnaryFilter.html#SparkPlug_Contracts_UnaryFilter__ctor_
  commentId: Overload:SparkPlug.Contracts.UnaryFilter.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Contracts.UnaryFilter.UnaryFilter
  fullName.vb: SparkPlug.Contracts.UnaryFilter.New
  nameWithType: UnaryFilter.UnaryFilter
  nameWithType.vb: UnaryFilter.New
- uid: SparkPlug.Contracts.UnaryFilter.Op
  name: Op
  href: api/SparkPlug.Contracts.UnaryFilter.html#SparkPlug_Contracts_UnaryFilter_Op
  commentId: P:SparkPlug.Contracts.UnaryFilter.Op
  fullName: SparkPlug.Contracts.UnaryFilter.Op
  nameWithType: UnaryFilter.Op
- uid: SparkPlug.Contracts.UnaryFilter.Op*
  name: Op
  href: api/SparkPlug.Contracts.UnaryFilter.html#SparkPlug_Contracts_UnaryFilter_Op_
  commentId: Overload:SparkPlug.Contracts.UnaryFilter.Op
  isSpec: "True"
  fullName: SparkPlug.Contracts.UnaryFilter.Op
  nameWithType: UnaryFilter.Op
- uid: SparkPlug.Contracts.UnaryOperator
  name: UnaryOperator
  href: api/SparkPlug.Contracts.UnaryOperator.html
  commentId: T:SparkPlug.Contracts.UnaryOperator
  fullName: SparkPlug.Contracts.UnaryOperator
  nameWithType: UnaryOperator
- uid: SparkPlug.Contracts.UnaryOperator.IsNotNull
  name: IsNotNull
  href: api/SparkPlug.Contracts.UnaryOperator.html#SparkPlug_Contracts_UnaryOperator_IsNotNull
  commentId: F:SparkPlug.Contracts.UnaryOperator.IsNotNull
  fullName: SparkPlug.Contracts.UnaryOperator.IsNotNull
  nameWithType: UnaryOperator.IsNotNull
- uid: SparkPlug.Contracts.UnaryOperator.IsNull
  name: IsNull
  href: api/SparkPlug.Contracts.UnaryOperator.html#SparkPlug_Contracts_UnaryOperator_IsNull
  commentId: F:SparkPlug.Contracts.UnaryOperator.IsNull
  fullName: SparkPlug.Contracts.UnaryOperator.IsNull
  nameWithType: UnaryOperator.IsNull
- uid: SparkPlug.Hosts
  name: SparkPlug.Hosts
  href: api/SparkPlug.Hosts.html
  commentId: N:SparkPlug.Hosts
  fullName: SparkPlug.Hosts
  nameWithType: SparkPlug.Hosts
- uid: SparkPlug.Hosts.ModuleLoader
  name: ModuleLoader
  href: api/SparkPlug.Hosts.ModuleLoader.html
  commentId: T:SparkPlug.Hosts.ModuleLoader
  fullName: SparkPlug.Hosts.ModuleLoader
  nameWithType: ModuleLoader
- uid: SparkPlug.Hosts.ModuleLoader.AddAllModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddAllModules(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Hosts.ModuleLoader.html#SparkPlug_Hosts_ModuleLoader_AddAllModules_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Hosts.ModuleLoader.AddAllModules(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Hosts.ModuleLoader.AddAllModules(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: ModuleLoader.AddAllModules(IServiceCollection, IConfiguration)
- uid: SparkPlug.Hosts.ModuleLoader.AddAllModules*
  name: AddAllModules
  href: api/SparkPlug.Hosts.ModuleLoader.html#SparkPlug_Hosts_ModuleLoader_AddAllModules_
  commentId: Overload:SparkPlug.Hosts.ModuleLoader.AddAllModules
  isSpec: "True"
  fullName: SparkPlug.Hosts.ModuleLoader.AddAllModules
  nameWithType: ModuleLoader.AddAllModules
- uid: SparkPlug.Hosts.ModuleLoader.UseAllMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseAllMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Hosts.ModuleLoader.html#SparkPlug_Hosts_ModuleLoader_UseAllMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Hosts.ModuleLoader.UseAllMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Hosts.ModuleLoader.UseAllMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: ModuleLoader.UseAllMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Hosts.ModuleLoader.UseAllMiddelwares*
  name: UseAllMiddelwares
  href: api/SparkPlug.Hosts.ModuleLoader.html#SparkPlug_Hosts_ModuleLoader_UseAllMiddelwares_
  commentId: Overload:SparkPlug.Hosts.ModuleLoader.UseAllMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Hosts.ModuleLoader.UseAllMiddelwares
  nameWithType: ModuleLoader.UseAllMiddelwares
- uid: SparkPlug.Hosts.ModuleLoader.UseAllModules(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseAllModules(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Hosts.ModuleLoader.html#SparkPlug_Hosts_ModuleLoader_UseAllModules_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Hosts.ModuleLoader.UseAllModules(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Hosts.ModuleLoader.UseAllModules(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: ModuleLoader.UseAllModules(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Hosts.ModuleLoader.UseAllModules*
  name: UseAllModules
  href: api/SparkPlug.Hosts.ModuleLoader.html#SparkPlug_Hosts_ModuleLoader_UseAllModules_
  commentId: Overload:SparkPlug.Hosts.ModuleLoader.UseAllModules
  isSpec: "True"
  fullName: SparkPlug.Hosts.ModuleLoader.UseAllModules
  nameWithType: ModuleLoader.UseAllModules
- uid: SparkPlug.Hosts.Program
  name: Program
  href: api/SparkPlug.Hosts.Program.html
  commentId: T:SparkPlug.Hosts.Program
  fullName: SparkPlug.Hosts.Program
  nameWithType: Program
- uid: SparkPlug.Hosts.Program.Main(System.String[])
  name: Main(string[])
  href: api/SparkPlug.Hosts.Program.html#SparkPlug_Hosts_Program_Main_System_String___
  commentId: M:SparkPlug.Hosts.Program.Main(System.String[])
  name.vb: Main(String())
  fullName: SparkPlug.Hosts.Program.Main(string[])
  fullName.vb: SparkPlug.Hosts.Program.Main(String())
  nameWithType: Program.Main(string[])
  nameWithType.vb: Program.Main(String())
- uid: SparkPlug.Hosts.Program.Main*
  name: Main
  href: api/SparkPlug.Hosts.Program.html#SparkPlug_Hosts_Program_Main_
  commentId: Overload:SparkPlug.Hosts.Program.Main
  isSpec: "True"
  fullName: SparkPlug.Hosts.Program.Main
  nameWithType: Program.Main
- uid: SparkPlug.Hosts.Program.Run*
  name: Run
  href: api/SparkPlug.Hosts.Program.html#SparkPlug_Hosts_Program_Run_
  commentId: Overload:SparkPlug.Hosts.Program.Run
  isSpec: "True"
  fullName: SparkPlug.Hosts.Program.Run
  nameWithType: Program.Run
- uid: SparkPlug.Hosts.Program.Run``1(System.String[])
  name: Run<TStartup>(string[])
  href: api/SparkPlug.Hosts.Program.html#SparkPlug_Hosts_Program_Run__1_System_String___
  commentId: M:SparkPlug.Hosts.Program.Run``1(System.String[])
  name.vb: Run(Of TStartup)(String())
  fullName: SparkPlug.Hosts.Program.Run<TStartup>(string[])
  fullName.vb: SparkPlug.Hosts.Program.Run(Of TStartup)(String())
  nameWithType: Program.Run<TStartup>(string[])
  nameWithType.vb: Program.Run(Of TStartup)(String())
- uid: SparkPlug.Hosts.Startup
  name: Startup
  href: api/SparkPlug.Hosts.Startup.html
  commentId: T:SparkPlug.Hosts.Startup
  fullName: SparkPlug.Hosts.Startup
  nameWithType: Startup
- uid: SparkPlug.Hosts.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)
  name: Startup(IConfiguration)
  href: api/SparkPlug.Hosts.Startup.html#SparkPlug_Hosts_Startup__ctor_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Hosts.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)
  name.vb: New(IConfiguration)
  fullName: SparkPlug.Hosts.Startup.Startup(Microsoft.Extensions.Configuration.IConfiguration)
  fullName.vb: SparkPlug.Hosts.Startup.New(Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: Startup.Startup(IConfiguration)
  nameWithType.vb: Startup.New(IConfiguration)
- uid: SparkPlug.Hosts.Startup.#ctor*
  name: Startup
  href: api/SparkPlug.Hosts.Startup.html#SparkPlug_Hosts_Startup__ctor_
  commentId: Overload:SparkPlug.Hosts.Startup.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Hosts.Startup.Startup
  fullName.vb: SparkPlug.Hosts.Startup.New
  nameWithType: Startup.Startup
  nameWithType.vb: Startup.New
- uid: SparkPlug.Hosts.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: Configure(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Hosts.Startup.html#SparkPlug_Hosts_Startup_Configure_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Hosts.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Hosts.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: Startup.Configure(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Hosts.Startup.Configure*
  name: Configure
  href: api/SparkPlug.Hosts.Startup.html#SparkPlug_Hosts_Startup_Configure_
  commentId: Overload:SparkPlug.Hosts.Startup.Configure
  isSpec: "True"
  fullName: SparkPlug.Hosts.Startup.Configure
  nameWithType: Startup.Configure
- uid: SparkPlug.Hosts.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  name: ConfigureServices(IServiceCollection)
  href: api/SparkPlug.Hosts.Startup.html#SparkPlug_Hosts_Startup_ConfigureServices_Microsoft_Extensions_DependencyInjection_IServiceCollection_
  commentId: M:SparkPlug.Hosts.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  fullName: SparkPlug.Hosts.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)
  nameWithType: Startup.ConfigureServices(IServiceCollection)
- uid: SparkPlug.Hosts.Startup.ConfigureServices*
  name: ConfigureServices
  href: api/SparkPlug.Hosts.Startup.html#SparkPlug_Hosts_Startup_ConfigureServices_
  commentId: Overload:SparkPlug.Hosts.Startup.ConfigureServices
  isSpec: "True"
  fullName: SparkPlug.Hosts.Startup.ConfigureServices
  nameWithType: Startup.ConfigureServices
- uid: SparkPlug.Persistence.Abstractions
  name: SparkPlug.Persistence.Abstractions
  href: api/SparkPlug.Persistence.Abstractions.html
  commentId: N:SparkPlug.Persistence.Abstractions
  fullName: SparkPlug.Persistence.Abstractions
  nameWithType: SparkPlug.Persistence.Abstractions
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache
  name: AssemblyCache
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html
  commentId: T:SparkPlug.Persistence.Abstractions.AssemblyCache
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache
  nameWithType: AssemblyCache
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache.Assemblies
  name: Assemblies
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html#SparkPlug_Persistence_Abstractions_AssemblyCache_Assemblies
  commentId: P:SparkPlug.Persistence.Abstractions.AssemblyCache.Assemblies
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache.Assemblies
  nameWithType: AssemblyCache.Assemblies
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache.Assemblies*
  name: Assemblies
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html#SparkPlug_Persistence_Abstractions_AssemblyCache_Assemblies_
  commentId: Overload:SparkPlug.Persistence.Abstractions.AssemblyCache.Assemblies
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache.Assemblies
  nameWithType: AssemblyCache.Assemblies
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache.EntityTypeConfiguration
  name: EntityTypeConfiguration
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html#SparkPlug_Persistence_Abstractions_AssemblyCache_EntityTypeConfiguration
  commentId: P:SparkPlug.Persistence.Abstractions.AssemblyCache.EntityTypeConfiguration
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache.EntityTypeConfiguration
  nameWithType: AssemblyCache.EntityTypeConfiguration
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache.EntityTypeConfiguration*
  name: EntityTypeConfiguration
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html#SparkPlug_Persistence_Abstractions_AssemblyCache_EntityTypeConfiguration_
  commentId: Overload:SparkPlug.Persistence.Abstractions.AssemblyCache.EntityTypeConfiguration
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache.EntityTypeConfiguration
  nameWithType: AssemblyCache.EntityTypeConfiguration
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache.Types
  name: Types
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html#SparkPlug_Persistence_Abstractions_AssemblyCache_Types
  commentId: P:SparkPlug.Persistence.Abstractions.AssemblyCache.Types
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache.Types
  nameWithType: AssemblyCache.Types
- uid: SparkPlug.Persistence.Abstractions.AssemblyCache.Types*
  name: Types
  href: api/SparkPlug.Persistence.Abstractions.AssemblyCache.html#SparkPlug_Persistence_Abstractions_AssemblyCache_Types_
  commentId: Overload:SparkPlug.Persistence.Abstractions.AssemblyCache.Types
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.AssemblyCache.Types
  nameWithType: AssemblyCache.Types
- uid: SparkPlug.Persistence.Abstractions.BaseService`2
  name: BaseService<TId, TEntity>
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html
  commentId: T:SparkPlug.Persistence.Abstractions.BaseService`2
  name.vb: BaseService(Of TId, TEntity)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity)
  nameWithType: BaseService<TId, TEntity>
  nameWithType.vb: BaseService(Of TId, TEntity)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.#ctor(System.IServiceProvider)
  name: BaseService(IServiceProvider)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.BaseService(System.IServiceProvider)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).New(System.IServiceProvider)
  nameWithType: BaseService<TId, TEntity>.BaseService(IServiceProvider)
  nameWithType.vb: BaseService(Of TId, TEntity).New(IServiceProvider)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.#ctor*
  name: BaseService
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.BaseService
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).New
  nameWithType: BaseService<TId, TEntity>.BaseService
  nameWithType.vb: BaseService(Of TId, TEntity).New
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: CountAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_CountAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).CountAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.CountAsync*
  name: CountAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_CountAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.CountAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.CountAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).CountAsync
  nameWithType: BaseService<TId, TEntity>.CountAsync
  nameWithType.vb: BaseService(Of TId, TEntity).CountAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_CreateAsync_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.CreateAsync(SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).CreateAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.CreateAsync*
  name: CreateAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_CreateAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.CreateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.CreateAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).CreateAsync
  nameWithType: BaseService<TId, TEntity>.CreateAsync
  nameWithType.vb: BaseService(Of TId, TEntity).CreateAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name: CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_CreateManyAsync_SparkPlug_Contracts_ICommandRequest__1____System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name.vb: CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.CreateManyAsync(SparkPlug.Contracts.ICommandRequest<TEntity[]>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).CreateManyAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity()), System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.CreateManyAsync*
  name: CreateManyAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_CreateManyAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.CreateManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.CreateManyAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).CreateManyAsync
  nameWithType: BaseService<TId, TEntity>.CreateManyAsync
  nameWithType.vb: BaseService(Of TId, TEntity).CreateManyAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.DeleteAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).DeleteAsync(TId, System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.DeleteAsync(TId, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).DeleteAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.DeleteAsync*
  name: DeleteAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_DeleteAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.DeleteAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.DeleteAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).DeleteAsync
  nameWithType: BaseService<TId, TEntity>.DeleteAsync
  nameWithType.vb: BaseService(Of TId, TEntity).DeleteAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: FindAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_FindAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).FindAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.FindAsync*
  name: FindAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_FindAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.FindAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.FindAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).FindAsync
  nameWithType: BaseService<TId, TEntity>.FindAsync
  nameWithType.vb: BaseService(Of TId, TEntity).FindAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetAsync(`0,System.Threading.CancellationToken)
  name: GetAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.GetAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetAsync(TId, System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.GetAsync(TId, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).GetAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetAsync*
  name: GetAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.GetAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetAsync
  nameWithType: BaseService<TId, TEntity>.GetAsync
  nameWithType.vb: BaseService(Of TId, TEntity).GetAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name: GetManyAsync(TId[], CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetManyAsync__0___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name.vb: GetManyAsync(TId(), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetManyAsync(TId[], System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetManyAsync(TId(), System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.GetManyAsync(TId[], CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).GetManyAsync(TId(), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetManyAsync*
  name: GetManyAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetManyAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.GetManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetManyAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetManyAsync
  nameWithType: BaseService<TId, TEntity>.GetManyAsync
  nameWithType.vb: BaseService(Of TId, TEntity).GetManyAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetRepository
  name: GetRepository()
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetRepository
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.GetRepository
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetRepository()
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetRepository()
  nameWithType: BaseService<TId, TEntity>.GetRepository()
  nameWithType.vb: BaseService(Of TId, TEntity).GetRepository()
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetRepository*
  name: GetRepository
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetRepository_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.GetRepository
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetRepository
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetRepository
  nameWithType: BaseService<TId, TEntity>.GetRepository
  nameWithType.vb: BaseService(Of TId, TEntity).GetRepository
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetService*
  name: GetService
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetService_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.GetService
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetService
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetService
  nameWithType: BaseService<TId, TEntity>.GetService
  nameWithType.vb: BaseService(Of TId, TEntity).GetService
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.GetService``1
  name: GetService<TService>()
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_GetService__1
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.GetService``1
  name.vb: GetService(Of TService)()
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.GetService<TService>()
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).GetService(Of TService)()
  nameWithType: BaseService<TId, TEntity>.GetService<TService>()
  nameWithType.vb: BaseService(Of TId, TEntity).GetService(Of TService)()
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name: PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_PatchAsync__0_SparkPlug_Contracts_ICommandRequest_Microsoft_AspNetCore_JsonPatch_JsonPatchDocument__1___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name.vb: PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.PatchAsync(TId, SparkPlug.Contracts.ICommandRequest<Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TEntity>>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).PatchAsync(TId, SparkPlug.Contracts.ICommandRequest(Of Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TEntity)), System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.PatchAsync*
  name: PatchAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_PatchAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.PatchAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.PatchAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).PatchAsync
  nameWithType: BaseService<TId, TEntity>.PatchAsync
  nameWithType.vb: BaseService(Of TId, TEntity).PatchAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: QueryAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_QueryAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).QueryAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.QueryAsync*
  name: QueryAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_QueryAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.QueryAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.QueryAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).QueryAsync
  nameWithType: BaseService<TId, TEntity>.QueryAsync
  nameWithType.vb: BaseService(Of TId, TEntity).QueryAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_ReplaceAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.ReplaceAsync*
  name: ReplaceAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_ReplaceAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.ReplaceAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.ReplaceAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).ReplaceAsync
  nameWithType: BaseService<TId, TEntity>.ReplaceAsync
  nameWithType.vb: BaseService(Of TId, TEntity).ReplaceAsync
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_UpdateAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.BaseService`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: BaseService<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: BaseService(Of TId, TEntity).UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.BaseService`2.UpdateAsync*
  name: UpdateAsync
  href: api/SparkPlug.Persistence.Abstractions.BaseService-2.html#SparkPlug_Persistence_Abstractions_BaseService_2_UpdateAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.BaseService`2.UpdateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.BaseService<TId, TEntity>.UpdateAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.BaseService(Of TId, TEntity).UpdateAsync
  nameWithType: BaseService<TId, TEntity>.UpdateAsync
  nameWithType.vb: BaseService(Of TId, TEntity).UpdateAsync
- uid: SparkPlug.Persistence.Abstractions.CreateEntityException
  name: CreateEntityException
  href: api/SparkPlug.Persistence.Abstractions.CreateEntityException.html
  commentId: T:SparkPlug.Persistence.Abstractions.CreateEntityException
  fullName: SparkPlug.Persistence.Abstractions.CreateEntityException
  nameWithType: CreateEntityException
- uid: SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor
  name: CreateEntityException()
  href: api/SparkPlug.Persistence.Abstractions.CreateEntityException.html#SparkPlug_Persistence_Abstractions_CreateEntityException__ctor
  commentId: M:SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor
  name.vb: New()
  fullName: SparkPlug.Persistence.Abstractions.CreateEntityException.CreateEntityException()
  fullName.vb: SparkPlug.Persistence.Abstractions.CreateEntityException.New()
  nameWithType: CreateEntityException.CreateEntityException()
  nameWithType.vb: CreateEntityException.New()
- uid: SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor(System.String)
  name: CreateEntityException(string?)
  href: api/SparkPlug.Persistence.Abstractions.CreateEntityException.html#SparkPlug_Persistence_Abstractions_CreateEntityException__ctor_System_String_
  commentId: M:SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Persistence.Abstractions.CreateEntityException.CreateEntityException(string?)
  fullName.vb: SparkPlug.Persistence.Abstractions.CreateEntityException.New(String)
  nameWithType: CreateEntityException.CreateEntityException(string?)
  nameWithType.vb: CreateEntityException.New(String)
- uid: SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor(System.String,System.Exception)
  name: CreateEntityException(string?, Exception?)
  href: api/SparkPlug.Persistence.Abstractions.CreateEntityException.html#SparkPlug_Persistence_Abstractions_CreateEntityException__ctor_System_String_System_Exception_
  commentId: M:SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor(System.String,System.Exception)
  name.vb: New(String, Exception)
  fullName: SparkPlug.Persistence.Abstractions.CreateEntityException.CreateEntityException(string?, System.Exception?)
  fullName.vb: SparkPlug.Persistence.Abstractions.CreateEntityException.New(String, System.Exception)
  nameWithType: CreateEntityException.CreateEntityException(string?, Exception?)
  nameWithType.vb: CreateEntityException.New(String, Exception)
- uid: SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor*
  name: CreateEntityException
  href: api/SparkPlug.Persistence.Abstractions.CreateEntityException.html#SparkPlug_Persistence_Abstractions_CreateEntityException__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.CreateEntityException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.CreateEntityException.CreateEntityException
  fullName.vb: SparkPlug.Persistence.Abstractions.CreateEntityException.New
  nameWithType: CreateEntityException.CreateEntityException
  nameWithType.vb: CreateEntityException.New
- uid: SparkPlug.Persistence.Abstractions.DbConfig
  name: DbConfig
  href: api/SparkPlug.Persistence.Abstractions.DbConfig.html
  commentId: T:SparkPlug.Persistence.Abstractions.DbConfig
  fullName: SparkPlug.Persistence.Abstractions.DbConfig
  nameWithType: DbConfig
- uid: SparkPlug.Persistence.Abstractions.DbConfig.ConnectionString
  name: ConnectionString
  href: api/SparkPlug.Persistence.Abstractions.DbConfig.html#SparkPlug_Persistence_Abstractions_DbConfig_ConnectionString
  commentId: P:SparkPlug.Persistence.Abstractions.DbConfig.ConnectionString
  fullName: SparkPlug.Persistence.Abstractions.DbConfig.ConnectionString
  nameWithType: DbConfig.ConnectionString
- uid: SparkPlug.Persistence.Abstractions.DbConfig.ConnectionString*
  name: ConnectionString
  href: api/SparkPlug.Persistence.Abstractions.DbConfig.html#SparkPlug_Persistence_Abstractions_DbConfig_ConnectionString_
  commentId: Overload:SparkPlug.Persistence.Abstractions.DbConfig.ConnectionString
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.DbConfig.ConnectionString
  nameWithType: DbConfig.ConnectionString
- uid: SparkPlug.Persistence.Abstractions.DeleteEntityException
  name: DeleteEntityException
  href: api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html
  commentId: T:SparkPlug.Persistence.Abstractions.DeleteEntityException
  fullName: SparkPlug.Persistence.Abstractions.DeleteEntityException
  nameWithType: DeleteEntityException
- uid: SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor
  name: DeleteEntityException()
  href: api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html#SparkPlug_Persistence_Abstractions_DeleteEntityException__ctor
  commentId: M:SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor
  name.vb: New()
  fullName: SparkPlug.Persistence.Abstractions.DeleteEntityException.DeleteEntityException()
  fullName.vb: SparkPlug.Persistence.Abstractions.DeleteEntityException.New()
  nameWithType: DeleteEntityException.DeleteEntityException()
  nameWithType.vb: DeleteEntityException.New()
- uid: SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor(System.String)
  name: DeleteEntityException(string?)
  href: api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html#SparkPlug_Persistence_Abstractions_DeleteEntityException__ctor_System_String_
  commentId: M:SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Persistence.Abstractions.DeleteEntityException.DeleteEntityException(string?)
  fullName.vb: SparkPlug.Persistence.Abstractions.DeleteEntityException.New(String)
  nameWithType: DeleteEntityException.DeleteEntityException(string?)
  nameWithType.vb: DeleteEntityException.New(String)
- uid: SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor(System.String,System.Exception)
  name: DeleteEntityException(string?, Exception?)
  href: api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html#SparkPlug_Persistence_Abstractions_DeleteEntityException__ctor_System_String_System_Exception_
  commentId: M:SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor(System.String,System.Exception)
  name.vb: New(String, Exception)
  fullName: SparkPlug.Persistence.Abstractions.DeleteEntityException.DeleteEntityException(string?, System.Exception?)
  fullName.vb: SparkPlug.Persistence.Abstractions.DeleteEntityException.New(String, System.Exception)
  nameWithType: DeleteEntityException.DeleteEntityException(string?, Exception?)
  nameWithType.vb: DeleteEntityException.New(String, Exception)
- uid: SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor*
  name: DeleteEntityException
  href: api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html#SparkPlug_Persistence_Abstractions_DeleteEntityException__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.DeleteEntityException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.DeleteEntityException.DeleteEntityException
  fullName.vb: SparkPlug.Persistence.Abstractions.DeleteEntityException.New
  nameWithType: DeleteEntityException.DeleteEntityException
  nameWithType.vb: DeleteEntityException.New
- uid: SparkPlug.Persistence.Abstractions.EntityExtentions
  name: EntityExtentions
  href: api/SparkPlug.Persistence.Abstractions.EntityExtentions.html
  commentId: T:SparkPlug.Persistence.Abstractions.EntityExtentions
  fullName: SparkPlug.Persistence.Abstractions.EntityExtentions
  nameWithType: EntityExtentions
- uid: SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable*
  name: Auditable
  href: api/SparkPlug.Persistence.Abstractions.EntityExtentions.html#SparkPlug_Persistence_Abstractions_EntityExtentions_Auditable_
  commentId: Overload:SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable
  nameWithType: EntityExtentions.Auditable
- uid: SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable``2(``1,``0,System.DateTime,System.Boolean)
  name: Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)
  href: api/SparkPlug.Persistence.Abstractions.EntityExtentions.html#SparkPlug_Persistence_Abstractions_EntityExtentions_Auditable__2___1___0_System_DateTime_System_Boolean_
  commentId: M:SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable``2(``1,``0,System.DateTime,System.Boolean)
  name.vb: Auditable(Of TId, TEntity)(TEntity, TId, Date, Boolean)
  fullName: SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, System.DateTime, bool)
  fullName.vb: SparkPlug.Persistence.Abstractions.EntityExtentions.Auditable(Of TId, TEntity)(TEntity, TId, Date, Boolean)
  nameWithType: EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)
  nameWithType.vb: EntityExtentions.Auditable(Of TId, TEntity)(TEntity, TId, Date, Boolean)
- uid: SparkPlug.Persistence.Abstractions.HomeDbAttribute
  name: HomeDbAttribute
  href: api/SparkPlug.Persistence.Abstractions.HomeDbAttribute.html
  commentId: T:SparkPlug.Persistence.Abstractions.HomeDbAttribute
  fullName: SparkPlug.Persistence.Abstractions.HomeDbAttribute
  nameWithType: HomeDbAttribute
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1
  name: IAuditableEntity<TId>
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.IAuditableEntity`1
  name.vb: IAuditableEntity(Of TId)
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId)
  nameWithType: IAuditableEntity<TId>
  nameWithType.vb: IAuditableEntity(Of TId)
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedAt
  name: CreatedAt
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_CreatedAt
  commentId: P:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedAt
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.CreatedAt
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).CreatedAt
  nameWithType: IAuditableEntity<TId>.CreatedAt
  nameWithType.vb: IAuditableEntity(Of TId).CreatedAt
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedAt*
  name: CreatedAt
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_CreatedAt_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedAt
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.CreatedAt
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).CreatedAt
  nameWithType: IAuditableEntity<TId>.CreatedAt
  nameWithType.vb: IAuditableEntity(Of TId).CreatedAt
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedBy
  name: CreatedBy
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_CreatedBy
  commentId: P:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedBy
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.CreatedBy
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).CreatedBy
  nameWithType: IAuditableEntity<TId>.CreatedBy
  nameWithType.vb: IAuditableEntity(Of TId).CreatedBy
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedBy*
  name: CreatedBy
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_CreatedBy_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.CreatedBy
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.CreatedBy
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).CreatedBy
  nameWithType: IAuditableEntity<TId>.CreatedBy
  nameWithType.vb: IAuditableEntity(Of TId).CreatedBy
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedAt
  name: ModifiedAt
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_ModifiedAt
  commentId: P:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedAt
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.ModifiedAt
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).ModifiedAt
  nameWithType: IAuditableEntity<TId>.ModifiedAt
  nameWithType.vb: IAuditableEntity(Of TId).ModifiedAt
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedAt*
  name: ModifiedAt
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_ModifiedAt_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedAt
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.ModifiedAt
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).ModifiedAt
  nameWithType: IAuditableEntity<TId>.ModifiedAt
  nameWithType.vb: IAuditableEntity(Of TId).ModifiedAt
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedBy
  name: ModifiedBy
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_ModifiedBy
  commentId: P:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedBy
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.ModifiedBy
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).ModifiedBy
  nameWithType: IAuditableEntity<TId>.ModifiedBy
  nameWithType.vb: IAuditableEntity(Of TId).ModifiedBy
- uid: SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedBy*
  name: ModifiedBy
  href: api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html#SparkPlug_Persistence_Abstractions_IAuditableEntity_1_ModifiedBy_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IAuditableEntity`1.ModifiedBy
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IAuditableEntity<TId>.ModifiedBy
  fullName.vb: SparkPlug.Persistence.Abstractions.IAuditableEntity(Of TId).ModifiedBy
  nameWithType: IAuditableEntity<TId>.ModifiedBy
  nameWithType.vb: IAuditableEntity(Of TId).ModifiedBy
- uid: SparkPlug.Persistence.Abstractions.IBaseEntity`1
  name: IBaseEntity<TId>
  href: api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.IBaseEntity`1
  name.vb: IBaseEntity(Of TId)
  fullName: SparkPlug.Persistence.Abstractions.IBaseEntity<TId>
  fullName.vb: SparkPlug.Persistence.Abstractions.IBaseEntity(Of TId)
  nameWithType: IBaseEntity<TId>
  nameWithType.vb: IBaseEntity(Of TId)
- uid: SparkPlug.Persistence.Abstractions.IBaseEntity`1.Id
  name: Id
  href: api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html#SparkPlug_Persistence_Abstractions_IBaseEntity_1_Id
  commentId: P:SparkPlug.Persistence.Abstractions.IBaseEntity`1.Id
  fullName: SparkPlug.Persistence.Abstractions.IBaseEntity<TId>.Id
  fullName.vb: SparkPlug.Persistence.Abstractions.IBaseEntity(Of TId).Id
  nameWithType: IBaseEntity<TId>.Id
  nameWithType.vb: IBaseEntity(Of TId).Id
- uid: SparkPlug.Persistence.Abstractions.IBaseEntity`1.Id*
  name: Id
  href: api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html#SparkPlug_Persistence_Abstractions_IBaseEntity_1_Id_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IBaseEntity`1.Id
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IBaseEntity<TId>.Id
  fullName.vb: SparkPlug.Persistence.Abstractions.IBaseEntity(Of TId).Id
  nameWithType: IBaseEntity<TId>.Id
  nameWithType.vb: IBaseEntity(Of TId).Id
- uid: SparkPlug.Persistence.Abstractions.ICompositeEntity
  name: ICompositeEntity
  href: api/SparkPlug.Persistence.Abstractions.ICompositeEntity.html
  commentId: T:SparkPlug.Persistence.Abstractions.ICompositeEntity
  fullName: SparkPlug.Persistence.Abstractions.ICompositeEntity
  nameWithType: ICompositeEntity
- uid: SparkPlug.Persistence.Abstractions.IConcurrencyEntity
  name: IConcurrencyEntity
  href: api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html
  commentId: T:SparkPlug.Persistence.Abstractions.IConcurrencyEntity
  fullName: SparkPlug.Persistence.Abstractions.IConcurrencyEntity
  nameWithType: IConcurrencyEntity
- uid: SparkPlug.Persistence.Abstractions.IConcurrencyEntity.Revision
  name: Revision
  href: api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html#SparkPlug_Persistence_Abstractions_IConcurrencyEntity_Revision
  commentId: P:SparkPlug.Persistence.Abstractions.IConcurrencyEntity.Revision
  fullName: SparkPlug.Persistence.Abstractions.IConcurrencyEntity.Revision
  nameWithType: IConcurrencyEntity.Revision
- uid: SparkPlug.Persistence.Abstractions.IConcurrencyEntity.Revision*
  name: Revision
  href: api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html#SparkPlug_Persistence_Abstractions_IConcurrencyEntity_Revision_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IConcurrencyEntity.Revision
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IConcurrencyEntity.Revision
  nameWithType: IConcurrencyEntity.Revision
- uid: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider
  name: IDbContextOptionsProvider
  href: api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html
  commentId: T:SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider
  fullName: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider
  nameWithType: IDbContextOptionsProvider
- uid: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption(System.String)
  name: GetDbContextOption(string)
  href: api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html#SparkPlug_Persistence_Abstractions_IDbContextOptionsProvider_GetDbContextOption_System_String_
  commentId: M:SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption(System.String)
  name.vb: GetDbContextOption(String)
  fullName: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption(string)
  fullName.vb: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption(String)
  nameWithType: IDbContextOptionsProvider.GetDbContextOption(string)
  nameWithType.vb: IDbContextOptionsProvider.GetDbContextOption(String)
- uid: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption*
  name: GetDbContextOption
  href: api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html#SparkPlug_Persistence_Abstractions_IDbContextOptionsProvider_GetDbContextOption_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.GetDbContextOption
  nameWithType: IDbContextOptionsProvider.GetDbContextOption
- uid: SparkPlug.Persistence.Abstractions.IDeletableEntity
  name: IDeletableEntity
  href: api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html
  commentId: T:SparkPlug.Persistence.Abstractions.IDeletableEntity
  fullName: SparkPlug.Persistence.Abstractions.IDeletableEntity
  nameWithType: IDeletableEntity
- uid: SparkPlug.Persistence.Abstractions.IDeletableEntity.Status
  name: Status
  href: api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html#SparkPlug_Persistence_Abstractions_IDeletableEntity_Status
  commentId: P:SparkPlug.Persistence.Abstractions.IDeletableEntity.Status
  fullName: SparkPlug.Persistence.Abstractions.IDeletableEntity.Status
  nameWithType: IDeletableEntity.Status
- uid: SparkPlug.Persistence.Abstractions.IDeletableEntity.Status*
  name: Status
  href: api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html#SparkPlug_Persistence_Abstractions_IDeletableEntity_Status_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IDeletableEntity.Status
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IDeletableEntity.Status
  nameWithType: IDeletableEntity.Status
- uid: SparkPlug.Persistence.Abstractions.IMultiTenantEntity`1
  name: IMultiTenantEntity<TId>
  href: api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.IMultiTenantEntity`1
  name.vb: IMultiTenantEntity(Of TId)
  fullName: SparkPlug.Persistence.Abstractions.IMultiTenantEntity<TId>
  fullName.vb: SparkPlug.Persistence.Abstractions.IMultiTenantEntity(Of TId)
  nameWithType: IMultiTenantEntity<TId>
  nameWithType.vb: IMultiTenantEntity(Of TId)
- uid: SparkPlug.Persistence.Abstractions.IMultiTenantEntity`1.TenantId
  name: TenantId
  href: api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html#SparkPlug_Persistence_Abstractions_IMultiTenantEntity_1_TenantId
  commentId: P:SparkPlug.Persistence.Abstractions.IMultiTenantEntity`1.TenantId
  fullName: SparkPlug.Persistence.Abstractions.IMultiTenantEntity<TId>.TenantId
  fullName.vb: SparkPlug.Persistence.Abstractions.IMultiTenantEntity(Of TId).TenantId
  nameWithType: IMultiTenantEntity<TId>.TenantId
  nameWithType.vb: IMultiTenantEntity(Of TId).TenantId
- uid: SparkPlug.Persistence.Abstractions.IMultiTenantEntity`1.TenantId*
  name: TenantId
  href: api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html#SparkPlug_Persistence_Abstractions_IMultiTenantEntity_1_TenantId_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IMultiTenantEntity`1.TenantId
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IMultiTenantEntity<TId>.TenantId
  fullName.vb: SparkPlug.Persistence.Abstractions.IMultiTenantEntity(Of TId).TenantId
  nameWithType: IMultiTenantEntity<TId>.TenantId
  nameWithType.vb: IMultiTenantEntity(Of TId).TenantId
- uid: SparkPlug.Persistence.Abstractions.IRepositoryProvider
  name: IRepositoryProvider
  href: api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html
  commentId: T:SparkPlug.Persistence.Abstractions.IRepositoryProvider
  fullName: SparkPlug.Persistence.Abstractions.IRepositoryProvider
  nameWithType: IRepositoryProvider
- uid: SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository*
  name: GetRepository
  href: api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html#SparkPlug_Persistence_Abstractions_IRepositoryProvider_GetRepository_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository
  nameWithType: IRepositoryProvider.GetRepository
- uid: SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository``2
  name: GetRepository<TId, TEntity>()
  href: api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html#SparkPlug_Persistence_Abstractions_IRepositoryProvider_GetRepository__2
  commentId: M:SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository``2
  name.vb: GetRepository(Of TId, TEntity)()
  fullName: SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository<TId, TEntity>()
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepositoryProvider.GetRepository(Of TId, TEntity)()
  nameWithType: IRepositoryProvider.GetRepository<TId, TEntity>()
  nameWithType.vb: IRepositoryProvider.GetRepository(Of TId, TEntity)()
- uid: SparkPlug.Persistence.Abstractions.IRepository`2
  name: IRepository<TId, TEntity>
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html
  commentId: T:SparkPlug.Persistence.Abstractions.IRepository`2
  name.vb: IRepository(Of TId, TEntity)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity)
  nameWithType: IRepository<TId, TEntity>
  nameWithType.vb: IRepository(Of TId, TEntity)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: CountAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_CountAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).CountAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.CountAsync*
  name: CountAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_CountAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.CountAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.CountAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).CountAsync
  nameWithType: IRepository<TId, TEntity>.CountAsync
  nameWithType.vb: IRepository(Of TId, TEntity).CountAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_CreateAsync_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.CreateAsync(SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).CreateAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.CreateAsync*
  name: CreateAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_CreateAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.CreateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.CreateAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).CreateAsync
  nameWithType: IRepository<TId, TEntity>.CreateAsync
  nameWithType.vb: IRepository(Of TId, TEntity).CreateAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name: CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_CreateManyAsync_SparkPlug_Contracts_ICommandRequest__1____System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name.vb: CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.CreateManyAsync(SparkPlug.Contracts.ICommandRequest<TEntity[]>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).CreateManyAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity()), System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.CreateManyAsync*
  name: CreateManyAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_CreateManyAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.CreateManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.CreateManyAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).CreateManyAsync
  nameWithType: IRepository<TId, TEntity>.CreateManyAsync
  nameWithType.vb: IRepository(Of TId, TEntity).CreateManyAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.DeleteAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).DeleteAsync(TId, System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).DeleteAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.DeleteAsync*
  name: DeleteAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_DeleteAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.DeleteAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.DeleteAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).DeleteAsync
  nameWithType: IRepository<TId, TEntity>.DeleteAsync
  nameWithType.vb: IRepository(Of TId, TEntity).DeleteAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: FindAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_FindAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).FindAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.FindAsync*
  name: FindAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_FindAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.FindAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.FindAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).FindAsync
  nameWithType: IRepository<TId, TEntity>.FindAsync
  nameWithType.vb: IRepository(Of TId, TEntity).FindAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.GetAsync(`0,System.Threading.CancellationToken)
  name: GetAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_GetAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.GetAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.GetAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).GetAsync(TId, System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.GetAsync(TId, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).GetAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.GetAsync*
  name: GetAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_GetAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.GetAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.GetAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).GetAsync
  nameWithType: IRepository<TId, TEntity>.GetAsync
  nameWithType.vb: IRepository(Of TId, TEntity).GetAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name: GetManyAsync(TId[], CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_GetManyAsync__0___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name.vb: GetManyAsync(TId(), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.GetManyAsync(TId[], System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).GetManyAsync(TId(), System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).GetManyAsync(TId(), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.GetManyAsync*
  name: GetManyAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_GetManyAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.GetManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.GetManyAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).GetManyAsync
  nameWithType: IRepository<TId, TEntity>.GetManyAsync
  nameWithType.vb: IRepository(Of TId, TEntity).GetManyAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name: PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_PatchAsync__0_SparkPlug_Contracts_ICommandRequest_Microsoft_AspNetCore_JsonPatch_JsonPatchDocument__1___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name.vb: PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.PatchAsync(TId, SparkPlug.Contracts.ICommandRequest<Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TEntity>>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).PatchAsync(TId, SparkPlug.Contracts.ICommandRequest(Of Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TEntity)), System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.PatchAsync*
  name: PatchAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_PatchAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.PatchAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.PatchAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).PatchAsync
  nameWithType: IRepository<TId, TEntity>.PatchAsync
  nameWithType.vb: IRepository(Of TId, TEntity).PatchAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: QueryAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_QueryAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).QueryAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.QueryAsync*
  name: QueryAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_QueryAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.QueryAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.QueryAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).QueryAsync
  nameWithType: IRepository<TId, TEntity>.QueryAsync
  nameWithType.vb: IRepository(Of TId, TEntity).QueryAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_ReplaceAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.ReplaceAsync*
  name: ReplaceAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_ReplaceAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.ReplaceAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.ReplaceAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).ReplaceAsync
  nameWithType: IRepository<TId, TEntity>.ReplaceAsync
  nameWithType.vb: IRepository(Of TId, TEntity).ReplaceAsync
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_UpdateAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.Abstractions.IRepository`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: IRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: IRepository(Of TId, TEntity).UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.Abstractions.IRepository`2.UpdateAsync*
  name: UpdateAsync
  href: api/SparkPlug.Persistence.Abstractions.IRepository-2.html#SparkPlug_Persistence_Abstractions_IRepository_2_UpdateAsync_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRepository`2.UpdateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRepository<TId, TEntity>.UpdateAsync
  fullName.vb: SparkPlug.Persistence.Abstractions.IRepository(Of TId, TEntity).UpdateAsync
  nameWithType: IRepository<TId, TEntity>.UpdateAsync
  nameWithType.vb: IRepository(Of TId, TEntity).UpdateAsync
- uid: SparkPlug.Persistence.Abstractions.IRequestContext`1
  name: IRequestContext<TId>
  href: api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.IRequestContext`1
  name.vb: IRequestContext(Of TId)
  fullName: SparkPlug.Persistence.Abstractions.IRequestContext<TId>
  fullName.vb: SparkPlug.Persistence.Abstractions.IRequestContext(Of TId)
  nameWithType: IRequestContext<TId>
  nameWithType.vb: IRequestContext(Of TId)
- uid: SparkPlug.Persistence.Abstractions.IRequestContext`1.UserId
  name: UserId
  href: api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html#SparkPlug_Persistence_Abstractions_IRequestContext_1_UserId
  commentId: P:SparkPlug.Persistence.Abstractions.IRequestContext`1.UserId
  fullName: SparkPlug.Persistence.Abstractions.IRequestContext<TId>.UserId
  fullName.vb: SparkPlug.Persistence.Abstractions.IRequestContext(Of TId).UserId
  nameWithType: IRequestContext<TId>.UserId
  nameWithType.vb: IRequestContext(Of TId).UserId
- uid: SparkPlug.Persistence.Abstractions.IRequestContext`1.UserId*
  name: UserId
  href: api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html#SparkPlug_Persistence_Abstractions_IRequestContext_1_UserId_
  commentId: Overload:SparkPlug.Persistence.Abstractions.IRequestContext`1.UserId
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.IRequestContext<TId>.UserId
  fullName.vb: SparkPlug.Persistence.Abstractions.IRequestContext(Of TId).UserId
  nameWithType: IRequestContext<TId>.UserId
  nameWithType.vb: IRequestContext(Of TId).UserId
- uid: SparkPlug.Persistence.Abstractions.ITenant
  name: ITenant
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html
  commentId: T:SparkPlug.Persistence.Abstractions.ITenant
  fullName: SparkPlug.Persistence.Abstractions.ITenant
  nameWithType: ITenant
- uid: SparkPlug.Persistence.Abstractions.ITenant.Id
  name: Id
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html#SparkPlug_Persistence_Abstractions_ITenant_Id
  commentId: P:SparkPlug.Persistence.Abstractions.ITenant.Id
  fullName: SparkPlug.Persistence.Abstractions.ITenant.Id
  nameWithType: ITenant.Id
- uid: SparkPlug.Persistence.Abstractions.ITenant.Id*
  name: Id
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html#SparkPlug_Persistence_Abstractions_ITenant_Id_
  commentId: Overload:SparkPlug.Persistence.Abstractions.ITenant.Id
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.ITenant.Id
  nameWithType: ITenant.Id
- uid: SparkPlug.Persistence.Abstractions.ITenant.Name
  name: Name
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html#SparkPlug_Persistence_Abstractions_ITenant_Name
  commentId: P:SparkPlug.Persistence.Abstractions.ITenant.Name
  fullName: SparkPlug.Persistence.Abstractions.ITenant.Name
  nameWithType: ITenant.Name
- uid: SparkPlug.Persistence.Abstractions.ITenant.Name*
  name: Name
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html#SparkPlug_Persistence_Abstractions_ITenant_Name_
  commentId: Overload:SparkPlug.Persistence.Abstractions.ITenant.Name
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.ITenant.Name
  nameWithType: ITenant.Name
- uid: SparkPlug.Persistence.Abstractions.ITenant.Options
  name: Options
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html#SparkPlug_Persistence_Abstractions_ITenant_Options
  commentId: P:SparkPlug.Persistence.Abstractions.ITenant.Options
  fullName: SparkPlug.Persistence.Abstractions.ITenant.Options
  nameWithType: ITenant.Options
- uid: SparkPlug.Persistence.Abstractions.ITenant.Options*
  name: Options
  href: api/SparkPlug.Persistence.Abstractions.ITenant.html#SparkPlug_Persistence_Abstractions_ITenant_Options_
  commentId: Overload:SparkPlug.Persistence.Abstractions.ITenant.Options
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.ITenant.Options
  nameWithType: ITenant.Options
- uid: SparkPlug.Persistence.Abstractions.ITenantOptions`1
  name: ITenantOptions<TOptions>
  href: api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.ITenantOptions`1
  name.vb: ITenantOptions(Of TOptions)
  fullName: SparkPlug.Persistence.Abstractions.ITenantOptions<TOptions>
  fullName.vb: SparkPlug.Persistence.Abstractions.ITenantOptions(Of TOptions)
  nameWithType: ITenantOptions<TOptions>
  nameWithType.vb: ITenantOptions(Of TOptions)
- uid: SparkPlug.Persistence.Abstractions.ITenantOptions`1.Value
  name: Value
  href: api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html#SparkPlug_Persistence_Abstractions_ITenantOptions_1_Value
  commentId: P:SparkPlug.Persistence.Abstractions.ITenantOptions`1.Value
  fullName: SparkPlug.Persistence.Abstractions.ITenantOptions<TOptions>.Value
  fullName.vb: SparkPlug.Persistence.Abstractions.ITenantOptions(Of TOptions).Value
  nameWithType: ITenantOptions<TOptions>.Value
  nameWithType.vb: ITenantOptions(Of TOptions).Value
- uid: SparkPlug.Persistence.Abstractions.ITenantOptions`1.Value*
  name: Value
  href: api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html#SparkPlug_Persistence_Abstractions_ITenantOptions_1_Value_
  commentId: Overload:SparkPlug.Persistence.Abstractions.ITenantOptions`1.Value
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.ITenantOptions<TOptions>.Value
  fullName.vb: SparkPlug.Persistence.Abstractions.ITenantOptions(Of TOptions).Value
  nameWithType: ITenantOptions<TOptions>.Value
  nameWithType.vb: ITenantOptions(Of TOptions).Value
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1
  name: PagedResult<TResult>
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.PagedResult`1
  name.vb: PagedResult(Of TResult)
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult)
  nameWithType: PagedResult<TResult>
  nameWithType.vb: PagedResult(Of TResult)
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)
  name: PagedResult(IEnumerable<TResult>, long)
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html#SparkPlug_Persistence_Abstractions_PagedResult_1__ctor_System_Collections_Generic_IEnumerable__0__System_Int64_
  commentId: M:SparkPlug.Persistence.Abstractions.PagedResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64)
  name.vb: New(IEnumerable(Of TResult), Long)
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>.PagedResult(System.Collections.Generic.IEnumerable<TResult>, long)
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult).New(System.Collections.Generic.IEnumerable(Of TResult), Long)
  nameWithType: PagedResult<TResult>.PagedResult(IEnumerable<TResult>, long)
  nameWithType.vb: PagedResult(Of TResult).New(IEnumerable(Of TResult), Long)
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1.#ctor*
  name: PagedResult
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html#SparkPlug_Persistence_Abstractions_PagedResult_1__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PagedResult`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>.PagedResult
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult).New
  nameWithType: PagedResult<TResult>.PagedResult
  nameWithType.vb: PagedResult(Of TResult).New
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1.Count
  name: Count
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html#SparkPlug_Persistence_Abstractions_PagedResult_1_Count
  commentId: P:SparkPlug.Persistence.Abstractions.PagedResult`1.Count
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>.Count
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult).Count
  nameWithType: PagedResult<TResult>.Count
  nameWithType.vb: PagedResult(Of TResult).Count
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1.Count*
  name: Count
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html#SparkPlug_Persistence_Abstractions_PagedResult_1_Count_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PagedResult`1.Count
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>.Count
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult).Count
  nameWithType: PagedResult<TResult>.Count
  nameWithType.vb: PagedResult(Of TResult).Count
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1.Items
  name: Items
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html#SparkPlug_Persistence_Abstractions_PagedResult_1_Items
  commentId: P:SparkPlug.Persistence.Abstractions.PagedResult`1.Items
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>.Items
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult).Items
  nameWithType: PagedResult<TResult>.Items
  nameWithType.vb: PagedResult(Of TResult).Items
- uid: SparkPlug.Persistence.Abstractions.PagedResult`1.Items*
  name: Items
  href: api/SparkPlug.Persistence.Abstractions.PagedResult-1.html#SparkPlug_Persistence_Abstractions_PagedResult_1_Items_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PagedResult`1.Items
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.PagedResult<TResult>.Items
  fullName.vb: SparkPlug.Persistence.Abstractions.PagedResult(Of TResult).Items
  nameWithType: PagedResult<TResult>.Items
  nameWithType.vb: PagedResult(Of TResult).Items
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule
  name: PersistanceAbstractionModule
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html
  commentId: T:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule
  nameWithType: PersistanceAbstractionModule
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html#SparkPlug_Persistence_Abstractions_PersistanceAbstractionModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: PersistanceAbstractionModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html#SparkPlug_Persistence_Abstractions_PersistanceAbstractionModule_AddModule_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.AddModule
  nameWithType: PersistanceAbstractionModule.AddModule
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html#SparkPlug_Persistence_Abstractions_PersistanceAbstractionModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: PersistanceAbstractionModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html#SparkPlug_Persistence_Abstractions_PersistanceAbstractionModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseMiddelwares
  nameWithType: PersistanceAbstractionModule.UseMiddelwares
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html#SparkPlug_Persistence_Abstractions_PersistanceAbstractionModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: PersistanceAbstractionModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html#SparkPlug_Persistence_Abstractions_PersistanceAbstractionModule_UseModule_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.UseModule
  nameWithType: PersistanceAbstractionModule.UseModule
- uid: SparkPlug.Persistence.Abstractions.PersistenceException
  name: PersistenceException
  href: api/SparkPlug.Persistence.Abstractions.PersistenceException.html
  commentId: T:SparkPlug.Persistence.Abstractions.PersistenceException
  fullName: SparkPlug.Persistence.Abstractions.PersistenceException
  nameWithType: PersistenceException
- uid: SparkPlug.Persistence.Abstractions.PersistenceException.#ctor
  name: PersistenceException()
  href: api/SparkPlug.Persistence.Abstractions.PersistenceException.html#SparkPlug_Persistence_Abstractions_PersistenceException__ctor
  commentId: M:SparkPlug.Persistence.Abstractions.PersistenceException.#ctor
  name.vb: New()
  fullName: SparkPlug.Persistence.Abstractions.PersistenceException.PersistenceException()
  fullName.vb: SparkPlug.Persistence.Abstractions.PersistenceException.New()
  nameWithType: PersistenceException.PersistenceException()
  nameWithType.vb: PersistenceException.New()
- uid: SparkPlug.Persistence.Abstractions.PersistenceException.#ctor(System.String)
  name: PersistenceException(string?)
  href: api/SparkPlug.Persistence.Abstractions.PersistenceException.html#SparkPlug_Persistence_Abstractions_PersistenceException__ctor_System_String_
  commentId: M:SparkPlug.Persistence.Abstractions.PersistenceException.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Persistence.Abstractions.PersistenceException.PersistenceException(string?)
  fullName.vb: SparkPlug.Persistence.Abstractions.PersistenceException.New(String)
  nameWithType: PersistenceException.PersistenceException(string?)
  nameWithType.vb: PersistenceException.New(String)
- uid: SparkPlug.Persistence.Abstractions.PersistenceException.#ctor(System.String,System.Exception)
  name: PersistenceException(string?, Exception?)
  href: api/SparkPlug.Persistence.Abstractions.PersistenceException.html#SparkPlug_Persistence_Abstractions_PersistenceException__ctor_System_String_System_Exception_
  commentId: M:SparkPlug.Persistence.Abstractions.PersistenceException.#ctor(System.String,System.Exception)
  name.vb: New(String, Exception)
  fullName: SparkPlug.Persistence.Abstractions.PersistenceException.PersistenceException(string?, System.Exception?)
  fullName.vb: SparkPlug.Persistence.Abstractions.PersistenceException.New(String, System.Exception)
  nameWithType: PersistenceException.PersistenceException(string?, Exception?)
  nameWithType.vb: PersistenceException.New(String, Exception)
- uid: SparkPlug.Persistence.Abstractions.PersistenceException.#ctor*
  name: PersistenceException
  href: api/SparkPlug.Persistence.Abstractions.PersistenceException.html#SparkPlug_Persistence_Abstractions_PersistenceException__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.PersistenceException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.PersistenceException.PersistenceException
  fullName.vb: SparkPlug.Persistence.Abstractions.PersistenceException.New
  nameWithType: PersistenceException.PersistenceException
  nameWithType.vb: PersistenceException.New
- uid: SparkPlug.Persistence.Abstractions.QueryEntityException
  name: QueryEntityException
  href: api/SparkPlug.Persistence.Abstractions.QueryEntityException.html
  commentId: T:SparkPlug.Persistence.Abstractions.QueryEntityException
  fullName: SparkPlug.Persistence.Abstractions.QueryEntityException
  nameWithType: QueryEntityException
- uid: SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor
  name: QueryEntityException()
  href: api/SparkPlug.Persistence.Abstractions.QueryEntityException.html#SparkPlug_Persistence_Abstractions_QueryEntityException__ctor
  commentId: M:SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor
  name.vb: New()
  fullName: SparkPlug.Persistence.Abstractions.QueryEntityException.QueryEntityException()
  fullName.vb: SparkPlug.Persistence.Abstractions.QueryEntityException.New()
  nameWithType: QueryEntityException.QueryEntityException()
  nameWithType.vb: QueryEntityException.New()
- uid: SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor(System.String)
  name: QueryEntityException(string?)
  href: api/SparkPlug.Persistence.Abstractions.QueryEntityException.html#SparkPlug_Persistence_Abstractions_QueryEntityException__ctor_System_String_
  commentId: M:SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Persistence.Abstractions.QueryEntityException.QueryEntityException(string?)
  fullName.vb: SparkPlug.Persistence.Abstractions.QueryEntityException.New(String)
  nameWithType: QueryEntityException.QueryEntityException(string?)
  nameWithType.vb: QueryEntityException.New(String)
- uid: SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor(System.String,System.Exception)
  name: QueryEntityException(string?, Exception?)
  href: api/SparkPlug.Persistence.Abstractions.QueryEntityException.html#SparkPlug_Persistence_Abstractions_QueryEntityException__ctor_System_String_System_Exception_
  commentId: M:SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor(System.String,System.Exception)
  name.vb: New(String, Exception)
  fullName: SparkPlug.Persistence.Abstractions.QueryEntityException.QueryEntityException(string?, System.Exception?)
  fullName.vb: SparkPlug.Persistence.Abstractions.QueryEntityException.New(String, System.Exception)
  nameWithType: QueryEntityException.QueryEntityException(string?, Exception?)
  nameWithType.vb: QueryEntityException.New(String, Exception)
- uid: SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor*
  name: QueryEntityException
  href: api/SparkPlug.Persistence.Abstractions.QueryEntityException.html#SparkPlug_Persistence_Abstractions_QueryEntityException__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.QueryEntityException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.QueryEntityException.QueryEntityException
  fullName.vb: SparkPlug.Persistence.Abstractions.QueryEntityException.New
  nameWithType: QueryEntityException.QueryEntityException
  nameWithType.vb: QueryEntityException.New
- uid: SparkPlug.Persistence.Abstractions.RequestContext`1
  name: RequestContext<TId>
  href: api/SparkPlug.Persistence.Abstractions.RequestContext-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.RequestContext`1
  name.vb: RequestContext(Of TId)
  fullName: SparkPlug.Persistence.Abstractions.RequestContext<TId>
  fullName.vb: SparkPlug.Persistence.Abstractions.RequestContext(Of TId)
  nameWithType: RequestContext<TId>
  nameWithType.vb: RequestContext(Of TId)
- uid: SparkPlug.Persistence.Abstractions.RequestContext`1.UserId
  name: UserId
  href: api/SparkPlug.Persistence.Abstractions.RequestContext-1.html#SparkPlug_Persistence_Abstractions_RequestContext_1_UserId
  commentId: P:SparkPlug.Persistence.Abstractions.RequestContext`1.UserId
  fullName: SparkPlug.Persistence.Abstractions.RequestContext<TId>.UserId
  fullName.vb: SparkPlug.Persistence.Abstractions.RequestContext(Of TId).UserId
  nameWithType: RequestContext<TId>.UserId
  nameWithType.vb: RequestContext(Of TId).UserId
- uid: SparkPlug.Persistence.Abstractions.RequestContext`1.UserId*
  name: UserId
  href: api/SparkPlug.Persistence.Abstractions.RequestContext-1.html#SparkPlug_Persistence_Abstractions_RequestContext_1_UserId_
  commentId: Overload:SparkPlug.Persistence.Abstractions.RequestContext`1.UserId
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.RequestContext<TId>.UserId
  fullName.vb: SparkPlug.Persistence.Abstractions.RequestContext(Of TId).UserId
  nameWithType: RequestContext<TId>.UserId
  nameWithType.vb: RequestContext(Of TId).UserId
- uid: SparkPlug.Persistence.Abstractions.Status
  name: Status
  href: api/SparkPlug.Persistence.Abstractions.Status.html
  commentId: T:SparkPlug.Persistence.Abstractions.Status
  fullName: SparkPlug.Persistence.Abstractions.Status
  nameWithType: Status
- uid: SparkPlug.Persistence.Abstractions.Status.Deleted
  name: Deleted
  href: api/SparkPlug.Persistence.Abstractions.Status.html#SparkPlug_Persistence_Abstractions_Status_Deleted
  commentId: F:SparkPlug.Persistence.Abstractions.Status.Deleted
  fullName: SparkPlug.Persistence.Abstractions.Status.Deleted
  nameWithType: Status.Deleted
- uid: SparkPlug.Persistence.Abstractions.Status.Live
  name: Live
  href: api/SparkPlug.Persistence.Abstractions.Status.html#SparkPlug_Persistence_Abstractions_Status_Live
  commentId: F:SparkPlug.Persistence.Abstractions.Status.Live
  fullName: SparkPlug.Persistence.Abstractions.Status.Live
  nameWithType: Status.Live
- uid: SparkPlug.Persistence.Abstractions.TenantDbAttribute
  name: TenantDbAttribute
  href: api/SparkPlug.Persistence.Abstractions.TenantDbAttribute.html
  commentId: T:SparkPlug.Persistence.Abstractions.TenantDbAttribute
  fullName: SparkPlug.Persistence.Abstractions.TenantDbAttribute
  nameWithType: TenantDbAttribute
- uid: SparkPlug.Persistence.Abstractions.TenantOptions`1
  name: TenantOptions<TOptions>
  href: api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html
  commentId: T:SparkPlug.Persistence.Abstractions.TenantOptions`1
  name.vb: TenantOptions(Of TOptions)
  fullName: SparkPlug.Persistence.Abstractions.TenantOptions<TOptions>
  fullName.vb: SparkPlug.Persistence.Abstractions.TenantOptions(Of TOptions)
  nameWithType: TenantOptions<TOptions>
  nameWithType.vb: TenantOptions(Of TOptions)
- uid: SparkPlug.Persistence.Abstractions.TenantOptions`1.#ctor(SparkPlug.Persistence.Abstractions.ITenant)
  name: TenantOptions(ITenant)
  href: api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html#SparkPlug_Persistence_Abstractions_TenantOptions_1__ctor_SparkPlug_Persistence_Abstractions_ITenant_
  commentId: M:SparkPlug.Persistence.Abstractions.TenantOptions`1.#ctor(SparkPlug.Persistence.Abstractions.ITenant)
  name.vb: New(ITenant)
  fullName: SparkPlug.Persistence.Abstractions.TenantOptions<TOptions>.TenantOptions(SparkPlug.Persistence.Abstractions.ITenant)
  fullName.vb: SparkPlug.Persistence.Abstractions.TenantOptions(Of TOptions).New(SparkPlug.Persistence.Abstractions.ITenant)
  nameWithType: TenantOptions<TOptions>.TenantOptions(ITenant)
  nameWithType.vb: TenantOptions(Of TOptions).New(ITenant)
- uid: SparkPlug.Persistence.Abstractions.TenantOptions`1.#ctor*
  name: TenantOptions
  href: api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html#SparkPlug_Persistence_Abstractions_TenantOptions_1__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.TenantOptions`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.TenantOptions<TOptions>.TenantOptions
  fullName.vb: SparkPlug.Persistence.Abstractions.TenantOptions(Of TOptions).New
  nameWithType: TenantOptions<TOptions>.TenantOptions
  nameWithType.vb: TenantOptions(Of TOptions).New
- uid: SparkPlug.Persistence.Abstractions.TenantOptions`1.Value
  name: Value
  href: api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html#SparkPlug_Persistence_Abstractions_TenantOptions_1_Value
  commentId: P:SparkPlug.Persistence.Abstractions.TenantOptions`1.Value
  fullName: SparkPlug.Persistence.Abstractions.TenantOptions<TOptions>.Value
  fullName.vb: SparkPlug.Persistence.Abstractions.TenantOptions(Of TOptions).Value
  nameWithType: TenantOptions<TOptions>.Value
  nameWithType.vb: TenantOptions(Of TOptions).Value
- uid: SparkPlug.Persistence.Abstractions.TenantOptions`1.Value*
  name: Value
  href: api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html#SparkPlug_Persistence_Abstractions_TenantOptions_1_Value_
  commentId: Overload:SparkPlug.Persistence.Abstractions.TenantOptions`1.Value
  isSpec: "True"
  fullName: SparkPlug.Persistence.Abstractions.TenantOptions<TOptions>.Value
  fullName.vb: SparkPlug.Persistence.Abstractions.TenantOptions(Of TOptions).Value
  nameWithType: TenantOptions<TOptions>.Value
  nameWithType.vb: TenantOptions(Of TOptions).Value
- uid: SparkPlug.Persistence.Abstractions.UpdateEntityException
  name: UpdateEntityException
  href: api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html
  commentId: T:SparkPlug.Persistence.Abstractions.UpdateEntityException
  fullName: SparkPlug.Persistence.Abstractions.UpdateEntityException
  nameWithType: UpdateEntityException
- uid: SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor
  name: UpdateEntityException()
  href: api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html#SparkPlug_Persistence_Abstractions_UpdateEntityException__ctor
  commentId: M:SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor
  name.vb: New()
  fullName: SparkPlug.Persistence.Abstractions.UpdateEntityException.UpdateEntityException()
  fullName.vb: SparkPlug.Persistence.Abstractions.UpdateEntityException.New()
  nameWithType: UpdateEntityException.UpdateEntityException()
  nameWithType.vb: UpdateEntityException.New()
- uid: SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor(System.String)
  name: UpdateEntityException(string?)
  href: api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html#SparkPlug_Persistence_Abstractions_UpdateEntityException__ctor_System_String_
  commentId: M:SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Persistence.Abstractions.UpdateEntityException.UpdateEntityException(string?)
  fullName.vb: SparkPlug.Persistence.Abstractions.UpdateEntityException.New(String)
  nameWithType: UpdateEntityException.UpdateEntityException(string?)
  nameWithType.vb: UpdateEntityException.New(String)
- uid: SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor(System.String,System.Exception)
  name: UpdateEntityException(string?, Exception?)
  href: api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html#SparkPlug_Persistence_Abstractions_UpdateEntityException__ctor_System_String_System_Exception_
  commentId: M:SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor(System.String,System.Exception)
  name.vb: New(String, Exception)
  fullName: SparkPlug.Persistence.Abstractions.UpdateEntityException.UpdateEntityException(string?, System.Exception?)
  fullName.vb: SparkPlug.Persistence.Abstractions.UpdateEntityException.New(String, System.Exception)
  nameWithType: UpdateEntityException.UpdateEntityException(string?, Exception?)
  nameWithType.vb: UpdateEntityException.New(String, Exception)
- uid: SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor*
  name: UpdateEntityException
  href: api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html#SparkPlug_Persistence_Abstractions_UpdateEntityException__ctor_
  commentId: Overload:SparkPlug.Persistence.Abstractions.UpdateEntityException.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.Abstractions.UpdateEntityException.UpdateEntityException
  fullName.vb: SparkPlug.Persistence.Abstractions.UpdateEntityException.New
  nameWithType: UpdateEntityException.UpdateEntityException
  nameWithType.vb: UpdateEntityException.New
- uid: SparkPlug.Persistence.EntityFramework
  name: SparkPlug.Persistence.EntityFramework
  href: api/SparkPlug.Persistence.EntityFramework.html
  commentId: N:SparkPlug.Persistence.EntityFramework
  fullName: SparkPlug.Persistence.EntityFramework
  nameWithType: SparkPlug.Persistence.EntityFramework
- uid: SparkPlug.Persistence.EntityFramework.Configuration
  name: SparkPlug.Persistence.EntityFramework.Configuration
  href: api/SparkPlug.Persistence.EntityFramework.Configuration.html
  commentId: N:SparkPlug.Persistence.EntityFramework.Configuration
  fullName: SparkPlug.Persistence.EntityFramework.Configuration
  nameWithType: SparkPlug.Persistence.EntityFramework.Configuration
- uid: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions
  name: SqlDbOptions
  href: api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions
  fullName: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions
  nameWithType: SqlDbOptions
- uid: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConfigPath
  name: ConfigPath
  href: api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html#SparkPlug_Persistence_EntityFramework_Configuration_SqlDbOptions_ConfigPath
  commentId: F:SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConfigPath
  fullName: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConfigPath
  nameWithType: SqlDbOptions.ConfigPath
- uid: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConnectionString
  name: ConnectionString
  href: api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html#SparkPlug_Persistence_EntityFramework_Configuration_SqlDbOptions_ConnectionString
  commentId: P:SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConnectionString
  fullName: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConnectionString
  nameWithType: SqlDbOptions.ConnectionString
- uid: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConnectionString*
  name: ConnectionString
  href: api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html#SparkPlug_Persistence_EntityFramework_Configuration_SqlDbOptions_ConnectionString_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConnectionString
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.ConnectionString
  nameWithType: SqlDbOptions.ConnectionString
- uid: SparkPlug.Persistence.EntityFramework.Context
  name: SparkPlug.Persistence.EntityFramework.Context
  href: api/SparkPlug.Persistence.EntityFramework.Context.html
  commentId: N:SparkPlug.Persistence.EntityFramework.Context
  fullName: SparkPlug.Persistence.EntityFramework.Context
  nameWithType: SparkPlug.Persistence.EntityFramework.Context
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext
  name: HomeDbContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.HomeDbContext
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext
  nameWithType: HomeDbContext
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.#ctor(SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration,SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions)
  name: HomeDbContext(IHomeDbModelConfiguration, HomeDbContextOptions)
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html#SparkPlug_Persistence_EntityFramework_Context_HomeDbContext__ctor_SparkPlug_Persistence_EntityFramework_Context_IHomeDbModelConfiguration_SparkPlug_Persistence_EntityFramework_Context_HomeDbContextOptions_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.#ctor(SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration,SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions)
  name.vb: New(IHomeDbModelConfiguration, HomeDbContextOptions)
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.HomeDbContext(SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration, SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.New(SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration, SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions)
  nameWithType: HomeDbContext.HomeDbContext(IHomeDbModelConfiguration, HomeDbContextOptions)
  nameWithType.vb: HomeDbContext.New(IHomeDbModelConfiguration, HomeDbContextOptions)
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.#ctor*
  name: HomeDbContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html#SparkPlug_Persistence_EntityFramework_Context_HomeDbContext__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.HomeDbContext
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.New
  nameWithType: HomeDbContext.HomeDbContext
  nameWithType.vb: HomeDbContext.New
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.ModelConfigProvider
  name: ModelConfigProvider
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html#SparkPlug_Persistence_EntityFramework_Context_HomeDbContext_ModelConfigProvider
  commentId: P:SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.ModelConfigProvider
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.ModelConfigProvider
  nameWithType: HomeDbContext.ModelConfigProvider
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.ModelConfigProvider*
  name: ModelConfigProvider
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html#SparkPlug_Persistence_EntityFramework_Context_HomeDbContext_ModelConfigProvider_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.ModelConfigProvider
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.ModelConfigProvider
  nameWithType: HomeDbContext.ModelConfigProvider
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions
  name: HomeDbContextOptions
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions
  nameWithType: HomeDbContextOptions
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.#ctor(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider,Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.Abstractions.DbConfig})
  name: HomeDbContextOptions(IDbContextOptionsProvider, IOptions<DbConfig>)
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_HomeDbContextOptions__ctor_SparkPlug_Persistence_Abstractions_IDbContextOptionsProvider_Microsoft_Extensions_Options_IOptions_SparkPlug_Persistence_Abstractions_DbConfig__
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.#ctor(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider,Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.Abstractions.DbConfig})
  name.vb: New(IDbContextOptionsProvider, IOptions(Of DbConfig))
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.HomeDbContextOptions(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider, Microsoft.Extensions.Options.IOptions<SparkPlug.Persistence.Abstractions.DbConfig>)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.New(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider, Microsoft.Extensions.Options.IOptions(Of SparkPlug.Persistence.Abstractions.DbConfig))
  nameWithType: HomeDbContextOptions.HomeDbContextOptions(IDbContextOptionsProvider, IOptions<DbConfig>)
  nameWithType.vb: HomeDbContextOptions.New(IDbContextOptionsProvider, IOptions(Of DbConfig))
- uid: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.#ctor*
  name: HomeDbContextOptions
  href: api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_HomeDbContextOptions__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.HomeDbContextOptions
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.New
  nameWithType: HomeDbContextOptions.HomeDbContextOptions
  nameWithType.vb: HomeDbContextOptions.New
- uid: SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration
  name: IHomeDbModelConfiguration
  href: api/SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration
  fullName: SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration
  nameWithType: IHomeDbModelConfiguration
- uid: SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration
  name: ISqlDbModelConfiguration
  href: api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration
  fullName: SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration
  nameWithType: ISqlDbModelConfiguration
- uid: SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: Configure(ModelBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html#SparkPlug_Persistence_EntityFramework_Context_ISqlDbModelConfiguration_Configure_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: ISqlDbModelConfiguration.Configure(ModelBuilder)
- uid: SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.Configure*
  name: Configure
  href: api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html#SparkPlug_Persistence_EntityFramework_Context_ISqlDbModelConfiguration_Configure_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.Configure
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.Configure
  nameWithType: ISqlDbModelConfiguration.Configure
- uid: SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration
  name: ITenantDbModelConfiguration
  href: api/SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration
  fullName: SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration
  nameWithType: ITenantDbModelConfiguration
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext
  name: SqlDbContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext
  nameWithType: SqlDbContext
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)
  name: SqlDbContext(DbContextOptions)
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext__ctor_Microsoft_EntityFrameworkCore_DbContextOptions_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)
  name.vb: New(DbContextOptions)
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SqlDbContext(Microsoft.EntityFrameworkCore.DbContextOptions)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.New(Microsoft.EntityFrameworkCore.DbContextOptions)
  nameWithType: SqlDbContext.SqlDbContext(DbContextOptions)
  nameWithType.vb: SqlDbContext.New(DbContextOptions)
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.#ctor*
  name: SqlDbContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SqlDbContext
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.New
  nameWithType: SqlDbContext.SqlDbContext
  nameWithType.vb: SqlDbContext.New
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.ModelConfigProvider
  name: ModelConfigProvider
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_ModelConfigProvider
  commentId: P:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.ModelConfigProvider
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.ModelConfigProvider
  nameWithType: SqlDbContext.ModelConfigProvider
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.ModelConfigProvider*
  name: ModelConfigProvider
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_ModelConfigProvider_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.ModelConfigProvider
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.ModelConfigProvider
  nameWithType: SqlDbContext.ModelConfigProvider
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: OnModelCreating(ModelBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_OnModelCreating_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: SqlDbContext.OnModelCreating(ModelBuilder)
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.OnModelCreating*
  name: OnModelCreating
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_OnModelCreating_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.OnModelCreating
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.OnModelCreating
  nameWithType: SqlDbContext.OnModelCreating
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync*
  name: SaveChangesAsync
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_SaveChangesAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync
  nameWithType: SqlDbContext.SaveChangesAsync
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync``1(``0,System.Threading.CancellationToken)
  name: SaveChangesAsync<TId>(TId, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_SaveChangesAsync__1___0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync``1(``0,System.Threading.CancellationToken)
  name.vb: SaveChangesAsync(Of TId)(TId, CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync<TId>(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.SaveChangesAsync(Of TId)(TId, System.Threading.CancellationToken)
  nameWithType: SqlDbContext.SaveChangesAsync<TId>(TId, CancellationToken)
  nameWithType.vb: SqlDbContext.SaveChangesAsync(Of TId)(TId, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions
  name: SqlDbContextOptions
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions
  nameWithType: SqlDbContextOptions
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.#ctor(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider,System.String)
  name: SqlDbContextOptions(IDbContextOptionsProvider, string)
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContextOptions__ctor_SparkPlug_Persistence_Abstractions_IDbContextOptionsProvider_System_String_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.#ctor(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider,System.String)
  name.vb: New(IDbContextOptionsProvider, String)
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.SqlDbContextOptions(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider, string)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.New(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider, String)
  nameWithType: SqlDbContextOptions.SqlDbContextOptions(IDbContextOptionsProvider, string)
  nameWithType.vb: SqlDbContextOptions.New(IDbContextOptionsProvider, String)
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.#ctor*
  name: SqlDbContextOptions
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContextOptions__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.SqlDbContextOptions
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.New
  nameWithType: SqlDbContextOptions.SqlDbContextOptions
  nameWithType.vb: SqlDbContextOptions.New
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.Value
  name: Value
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContextOptions_Value
  commentId: P:SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.Value
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.Value
  nameWithType: SqlDbContextOptions.Value
- uid: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.Value*
  name: Value
  href: api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_SqlDbContextOptions_Value_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.Value
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.Value
  nameWithType: SqlDbContextOptions.Value
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext
  name: TenantDbContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.TenantDbContext
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext
  nameWithType: TenantDbContext
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.#ctor(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration,SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  name: TenantDbContext(ITenantDbModelConfiguration, TenantDbContextOptions)
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbContext__ctor_SparkPlug_Persistence_EntityFramework_Context_ITenantDbModelConfiguration_SparkPlug_Persistence_EntityFramework_Context_TenantDbContextOptions_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.#ctor(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration,SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  name.vb: New(ITenantDbModelConfiguration, TenantDbContextOptions)
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.TenantDbContext(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration, SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.New(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration, SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  nameWithType: TenantDbContext.TenantDbContext(ITenantDbModelConfiguration, TenantDbContextOptions)
  nameWithType.vb: TenantDbContext.New(ITenantDbModelConfiguration, TenantDbContextOptions)
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.#ctor*
  name: TenantDbContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbContext__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.TenantDbContext
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.New
  nameWithType: TenantDbContext.TenantDbContext
  nameWithType.vb: TenantDbContext.New
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.ModelConfigProvider
  name: ModelConfigProvider
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbContext_ModelConfigProvider
  commentId: P:SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.ModelConfigProvider
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.ModelConfigProvider
  nameWithType: TenantDbContext.ModelConfigProvider
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.ModelConfigProvider*
  name: ModelConfigProvider
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbContext_ModelConfigProvider_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.ModelConfigProvider
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.ModelConfigProvider
  nameWithType: TenantDbContext.ModelConfigProvider
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions
  name: TenantDbContextOptions
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions
  nameWithType: TenantDbContextOptions
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.#ctor(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider,SparkPlug.Persistence.Abstractions.ITenantOptions{SparkPlug.Persistence.Abstractions.DbConfig})
  name: TenantDbContextOptions(IDbContextOptionsProvider, ITenantOptions<DbConfig>)
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbContextOptions__ctor_SparkPlug_Persistence_Abstractions_IDbContextOptionsProvider_SparkPlug_Persistence_Abstractions_ITenantOptions_SparkPlug_Persistence_Abstractions_DbConfig__
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.#ctor(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider,SparkPlug.Persistence.Abstractions.ITenantOptions{SparkPlug.Persistence.Abstractions.DbConfig})
  name.vb: New(IDbContextOptionsProvider, ITenantOptions(Of DbConfig))
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.TenantDbContextOptions(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider, SparkPlug.Persistence.Abstractions.ITenantOptions<SparkPlug.Persistence.Abstractions.DbConfig>)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.New(SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider, SparkPlug.Persistence.Abstractions.ITenantOptions(Of SparkPlug.Persistence.Abstractions.DbConfig))
  nameWithType: TenantDbContextOptions.TenantDbContextOptions(IDbContextOptionsProvider, ITenantOptions<DbConfig>)
  nameWithType.vb: TenantDbContextOptions.New(IDbContextOptionsProvider, ITenantOptions(Of DbConfig))
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.#ctor*
  name: TenantDbContextOptions
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbContextOptions__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.TenantDbContextOptions
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.New
  nameWithType: TenantDbContextOptions.TenantDbContextOptions
  nameWithType.vb: TenantDbContextOptions.New
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext
  name: TenantDbMigrationContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext
  nameWithType: TenantDbMigrationContext
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.#ctor(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration,SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  name: TenantDbMigrationContext(ITenantDbModelConfiguration, TenantDbContextOptions)
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbMigrationContext__ctor_SparkPlug_Persistence_EntityFramework_Context_ITenantDbModelConfiguration_SparkPlug_Persistence_EntityFramework_Context_TenantDbContextOptions_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.#ctor(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration,SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  name.vb: New(ITenantDbModelConfiguration, TenantDbContextOptions)
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.TenantDbMigrationContext(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration, SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.New(SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration, SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions)
  nameWithType: TenantDbMigrationContext.TenantDbMigrationContext(ITenantDbModelConfiguration, TenantDbContextOptions)
  nameWithType.vb: TenantDbMigrationContext.New(ITenantDbModelConfiguration, TenantDbContextOptions)
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.#ctor*
  name: TenantDbMigrationContext
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbMigrationContext__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.TenantDbMigrationContext
  fullName.vb: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.New
  nameWithType: TenantDbMigrationContext.TenantDbMigrationContext
  nameWithType.vb: TenantDbMigrationContext.New
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: OnModelCreating(ModelBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbMigrationContext_OnModelCreating_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: TenantDbMigrationContext.OnModelCreating(ModelBuilder)
- uid: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.OnModelCreating*
  name: OnModelCreating
  href: api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html#SparkPlug_Persistence_EntityFramework_Context_TenantDbMigrationContext_OnModelCreating_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.OnModelCreating
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.OnModelCreating
  nameWithType: TenantDbMigrationContext.OnModelCreating
- uid: SparkPlug.Persistence.EntityFramework.Expressions
  name: Expressions
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Expressions
  fullName: SparkPlug.Persistence.EntityFramework.Expressions
  nameWithType: Expressions
- uid: SparkPlug.Persistence.EntityFramework.Expressions.Parse(System.Object,System.Type)
  name: Parse(object?, Type)
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html#SparkPlug_Persistence_EntityFramework_Expressions_Parse_System_Object_System_Type_
  commentId: M:SparkPlug.Persistence.EntityFramework.Expressions.Parse(System.Object,System.Type)
  name.vb: Parse(Object, Type)
  fullName: SparkPlug.Persistence.EntityFramework.Expressions.Parse(object?, System.Type)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Expressions.Parse(Object, System.Type)
  nameWithType: Expressions.Parse(object?, Type)
  nameWithType.vb: Expressions.Parse(Object, Type)
- uid: SparkPlug.Persistence.EntityFramework.Expressions.Parse*
  name: Parse
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html#SparkPlug_Persistence_EntityFramework_Expressions_Parse_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Expressions.Parse
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Expressions.Parse
  nameWithType: Expressions.Parse
- uid: SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly(System.Object)
  name: ToDateOnly(object)
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html#SparkPlug_Persistence_EntityFramework_Expressions_ToDateOnly_System_Object_
  commentId: M:SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly(System.Object)
  name.vb: ToDateOnly(Object)
  fullName: SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly(object)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly(Object)
  nameWithType: Expressions.ToDateOnly(object)
  nameWithType.vb: Expressions.ToDateOnly(Object)
- uid: SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly*
  name: ToDateOnly
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html#SparkPlug_Persistence_EntityFramework_Expressions_ToDateOnly_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Expressions.ToDateOnly
  nameWithType: Expressions.ToDateOnly
- uid: SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime(System.Object)
  name: ToUniversalTime(object)
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html#SparkPlug_Persistence_EntityFramework_Expressions_ToUniversalTime_System_Object_
  commentId: M:SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime(System.Object)
  name.vb: ToUniversalTime(Object)
  fullName: SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime(object)
  fullName.vb: SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime(Object)
  nameWithType: Expressions.ToUniversalTime(object)
  nameWithType.vb: Expressions.ToUniversalTime(Object)
- uid: SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime*
  name: ToUniversalTime
  href: api/SparkPlug.Persistence.EntityFramework.Expressions.html#SparkPlug_Persistence_EntityFramework_Expressions_ToUniversalTime_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Expressions.ToUniversalTime
  nameWithType: Expressions.ToUniversalTime
- uid: SparkPlug.Persistence.EntityFramework.FilterExtentions
  name: FilterExtentions
  href: api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.FilterExtentions
  fullName: SparkPlug.Persistence.EntityFramework.FilterExtentions
  nameWithType: FilterExtentions
- uid: SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression*
  name: GetFilterExpression
  href: api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html#SparkPlug_Persistence_EntityFramework_FilterExtentions_GetFilterExpression_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression
  nameWithType: FilterExtentions.GetFilterExpression
- uid: SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression``1(SparkPlug.Contracts.IFilter)
  name: GetFilterExpression<TEntity>(IFilter)
  href: api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html#SparkPlug_Persistence_EntityFramework_FilterExtentions_GetFilterExpression__1_SparkPlug_Contracts_IFilter_
  commentId: M:SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression``1(SparkPlug.Contracts.IFilter)
  name.vb: GetFilterExpression(Of TEntity)(IFilter)
  fullName: SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression<TEntity>(SparkPlug.Contracts.IFilter)
  fullName.vb: SparkPlug.Persistence.EntityFramework.FilterExtentions.GetFilterExpression(Of TEntity)(SparkPlug.Contracts.IFilter)
  nameWithType: FilterExtentions.GetFilterExpression<TEntity>(IFilter)
  nameWithType.vb: FilterExtentions.GetFilterExpression(Of TEntity)(IFilter)
- uid: SparkPlug.Persistence.EntityFramework.HealthCheck
  name: SparkPlug.Persistence.EntityFramework.HealthCheck
  href: api/SparkPlug.Persistence.EntityFramework.HealthCheck.html
  commentId: N:SparkPlug.Persistence.EntityFramework.HealthCheck
  fullName: SparkPlug.Persistence.EntityFramework.HealthCheck
  nameWithType: SparkPlug.Persistence.EntityFramework.HealthCheck
- uid: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck
  name: SqlDbHealthCheck
  href: api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html
  commentId: T:SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck
  fullName: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck
  nameWithType: SqlDbHealthCheck
- uid: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.#ctor(SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  name: SqlDbHealthCheck(HomeDbContext)
  href: api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html#SparkPlug_Persistence_EntityFramework_HealthCheck_SqlDbHealthCheck__ctor_SparkPlug_Persistence_EntityFramework_Context_HomeDbContext_
  commentId: M:SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.#ctor(SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  name.vb: New(HomeDbContext)
  fullName: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.SqlDbHealthCheck(SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  fullName.vb: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.New(SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  nameWithType: SqlDbHealthCheck.SqlDbHealthCheck(HomeDbContext)
  nameWithType.vb: SqlDbHealthCheck.New(HomeDbContext)
- uid: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.#ctor*
  name: SqlDbHealthCheck
  href: api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html#SparkPlug_Persistence_EntityFramework_HealthCheck_SqlDbHealthCheck__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.SqlDbHealthCheck
  fullName.vb: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.New
  nameWithType: SqlDbHealthCheck.SqlDbHealthCheck
  nameWithType.vb: SqlDbHealthCheck.New
- uid: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  name: CheckHealthAsync(HealthCheckContext, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html#SparkPlug_Persistence_EntityFramework_HealthCheck_SqlDbHealthCheck_CheckHealthAsync_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckContext_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext, System.Threading.CancellationToken)
  nameWithType: SqlDbHealthCheck.CheckHealthAsync(HealthCheckContext, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.CheckHealthAsync*
  name: CheckHealthAsync
  href: api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html#SparkPlug_Persistence_EntityFramework_HealthCheck_SqlDbHealthCheck_CheckHealthAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.CheckHealthAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.CheckHealthAsync
  nameWithType: SqlDbHealthCheck.CheckHealthAsync
- uid: SparkPlug.Persistence.EntityFramework.HomeModelConfigurations
  name: HomeModelConfigurations
  href: api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html
  commentId: T:SparkPlug.Persistence.EntityFramework.HomeModelConfigurations
  fullName: SparkPlug.Persistence.EntityFramework.HomeModelConfigurations
  nameWithType: HomeModelConfigurations
- uid: SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: Configure(ModelBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html#SparkPlug_Persistence_EntityFramework_HomeModelConfigurations_Configure_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: HomeModelConfigurations.Configure(ModelBuilder)
- uid: SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.Configure*
  name: Configure
  href: api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html#SparkPlug_Persistence_EntityFramework_HomeModelConfigurations_Configure_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.Configure
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.Configure
  nameWithType: HomeModelConfigurations.Configure
- uid: SparkPlug.Persistence.EntityFramework.HomeOptions`1
  name: HomeOptions<TOptions>
  href: api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html
  commentId: T:SparkPlug.Persistence.EntityFramework.HomeOptions`1
  name.vb: HomeOptions(Of TOptions)
  fullName: SparkPlug.Persistence.EntityFramework.HomeOptions<TOptions>
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeOptions(Of TOptions)
  nameWithType: HomeOptions<TOptions>
  nameWithType.vb: HomeOptions(Of TOptions)
- uid: SparkPlug.Persistence.EntityFramework.HomeOptions`1.#ctor(Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions})
  name: HomeOptions(IOptions<SqlDbOptions>)
  href: api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html#SparkPlug_Persistence_EntityFramework_HomeOptions_1__ctor_Microsoft_Extensions_Options_IOptions_SparkPlug_Persistence_EntityFramework_Configuration_SqlDbOptions__
  commentId: M:SparkPlug.Persistence.EntityFramework.HomeOptions`1.#ctor(Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions})
  name.vb: New(IOptions(Of SqlDbOptions))
  fullName: SparkPlug.Persistence.EntityFramework.HomeOptions<TOptions>.HomeOptions(Microsoft.Extensions.Options.IOptions<SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions>)
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeOptions(Of TOptions).New(Microsoft.Extensions.Options.IOptions(Of SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions))
  nameWithType: HomeOptions<TOptions>.HomeOptions(IOptions<SqlDbOptions>)
  nameWithType.vb: HomeOptions(Of TOptions).New(IOptions(Of SqlDbOptions))
- uid: SparkPlug.Persistence.EntityFramework.HomeOptions`1.#ctor*
  name: HomeOptions
  href: api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html#SparkPlug_Persistence_EntityFramework_HomeOptions_1__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.HomeOptions`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.HomeOptions<TOptions>.HomeOptions
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeOptions(Of TOptions).New
  nameWithType: HomeOptions<TOptions>.HomeOptions
  nameWithType.vb: HomeOptions(Of TOptions).New
- uid: SparkPlug.Persistence.EntityFramework.HomeOptions`1.Value
  name: Value
  href: api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html#SparkPlug_Persistence_EntityFramework_HomeOptions_1_Value
  commentId: P:SparkPlug.Persistence.EntityFramework.HomeOptions`1.Value
  fullName: SparkPlug.Persistence.EntityFramework.HomeOptions<TOptions>.Value
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeOptions(Of TOptions).Value
  nameWithType: HomeOptions<TOptions>.Value
  nameWithType.vb: HomeOptions(Of TOptions).Value
- uid: SparkPlug.Persistence.EntityFramework.HomeOptions`1.Value*
  name: Value
  href: api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html#SparkPlug_Persistence_EntityFramework_HomeOptions_1_Value_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.HomeOptions`1.Value
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.HomeOptions<TOptions>.Value
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeOptions(Of TOptions).Value
  nameWithType: HomeOptions<TOptions>.Value
  nameWithType.vb: HomeOptions(Of TOptions).Value
- uid: SparkPlug.Persistence.EntityFramework.HomeRepository`2
  name: HomeRepository<TId, TEntity>
  href: api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html
  commentId: T:SparkPlug.Persistence.EntityFramework.HomeRepository`2
  name.vb: HomeRepository(Of TId, TEntity)
  fullName: SparkPlug.Persistence.EntityFramework.HomeRepository<TId, TEntity>
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeRepository(Of TId, TEntity)
  nameWithType: HomeRepository<TId, TEntity>
  nameWithType.vb: HomeRepository(Of TId, TEntity)
- uid: SparkPlug.Persistence.EntityFramework.HomeRepository`2.#ctor(System.IServiceProvider,SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  name: HomeRepository(IServiceProvider, HomeDbContext)
  href: api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html#SparkPlug_Persistence_EntityFramework_HomeRepository_2__ctor_System_IServiceProvider_SparkPlug_Persistence_EntityFramework_Context_HomeDbContext_
  commentId: M:SparkPlug.Persistence.EntityFramework.HomeRepository`2.#ctor(System.IServiceProvider,SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  name.vb: New(IServiceProvider, HomeDbContext)
  fullName: SparkPlug.Persistence.EntityFramework.HomeRepository<TId, TEntity>.HomeRepository(System.IServiceProvider, SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeRepository(Of TId, TEntity).New(System.IServiceProvider, SparkPlug.Persistence.EntityFramework.Context.HomeDbContext)
  nameWithType: HomeRepository<TId, TEntity>.HomeRepository(IServiceProvider, HomeDbContext)
  nameWithType.vb: HomeRepository(Of TId, TEntity).New(IServiceProvider, HomeDbContext)
- uid: SparkPlug.Persistence.EntityFramework.HomeRepository`2.#ctor*
  name: HomeRepository
  href: api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html#SparkPlug_Persistence_EntityFramework_HomeRepository_2__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.HomeRepository`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.HomeRepository<TId, TEntity>.HomeRepository
  fullName.vb: SparkPlug.Persistence.EntityFramework.HomeRepository(Of TId, TEntity).New
  nameWithType: HomeRepository<TId, TEntity>.HomeRepository
  nameWithType.vb: HomeRepository(Of TId, TEntity).New
- uid: SparkPlug.Persistence.EntityFramework.ModelConfigurations
  name: ModelConfigurations
  href: api/SparkPlug.Persistence.EntityFramework.ModelConfigurations.html
  commentId: T:SparkPlug.Persistence.EntityFramework.ModelConfigurations
  fullName: SparkPlug.Persistence.EntityFramework.ModelConfigurations
  nameWithType: ModelConfigurations
- uid: SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure*
  name: Configure
  href: api/SparkPlug.Persistence.EntityFramework.ModelConfigurations.html#SparkPlug_Persistence_EntityFramework_ModelConfigurations_Configure_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure
  nameWithType: ModelConfigurations.Configure
- uid: SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure``1(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: Configure<T>(ModelBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.ModelConfigurations.html#SparkPlug_Persistence_EntityFramework_ModelConfigurations_Configure__1_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure``1(Microsoft.EntityFrameworkCore.ModelBuilder)
  name.vb: Configure(Of T)(ModelBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure<T>(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName.vb: SparkPlug.Persistence.EntityFramework.ModelConfigurations.Configure(Of T)(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: ModelConfigurations.Configure<T>(ModelBuilder)
  nameWithType.vb: ModelConfigurations.Configure(Of T)(ModelBuilder)
- uid: SparkPlug.Persistence.EntityFramework.Models
  name: SparkPlug.Persistence.EntityFramework.Models
  href: api/SparkPlug.Persistence.EntityFramework.Models.html
  commentId: N:SparkPlug.Persistence.EntityFramework.Models
  fullName: SparkPlug.Persistence.EntityFramework.Models
  nameWithType: SparkPlug.Persistence.EntityFramework.Models
- uid: SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1
  name: BaseEntity<TId>
  href: api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1
  name.vb: BaseEntity(Of TId)
  fullName: SparkPlug.Persistence.EntityFramework.Models.BaseEntity<TId>
  fullName.vb: SparkPlug.Persistence.EntityFramework.Models.BaseEntity(Of TId)
  nameWithType: BaseEntity<TId>
  nameWithType.vb: BaseEntity(Of TId)
- uid: SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.GetId
  name: GetId()
  href: api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html#SparkPlug_Persistence_EntityFramework_Models_BaseEntity_1_GetId
  commentId: M:SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.GetId
  fullName: SparkPlug.Persistence.EntityFramework.Models.BaseEntity<TId>.GetId()
  fullName.vb: SparkPlug.Persistence.EntityFramework.Models.BaseEntity(Of TId).GetId()
  nameWithType: BaseEntity<TId>.GetId()
  nameWithType.vb: BaseEntity(Of TId).GetId()
- uid: SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.GetId*
  name: GetId
  href: api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html#SparkPlug_Persistence_EntityFramework_Models_BaseEntity_1_GetId_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.GetId
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Models.BaseEntity<TId>.GetId
  fullName.vb: SparkPlug.Persistence.EntityFramework.Models.BaseEntity(Of TId).GetId
  nameWithType: BaseEntity<TId>.GetId
  nameWithType.vb: BaseEntity(Of TId).GetId
- uid: SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.Id
  name: Id
  href: api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html#SparkPlug_Persistence_EntityFramework_Models_BaseEntity_1_Id
  commentId: P:SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.Id
  fullName: SparkPlug.Persistence.EntityFramework.Models.BaseEntity<TId>.Id
  fullName.vb: SparkPlug.Persistence.EntityFramework.Models.BaseEntity(Of TId).Id
  nameWithType: BaseEntity<TId>.Id
  nameWithType.vb: BaseEntity(Of TId).Id
- uid: SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.Id*
  name: Id
  href: api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html#SparkPlug_Persistence_EntityFramework_Models_BaseEntity_1_Id_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.Models.BaseEntity`1.Id
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.Models.BaseEntity<TId>.Id
  fullName.vb: SparkPlug.Persistence.EntityFramework.Models.BaseEntity(Of TId).Id
  nameWithType: BaseEntity<TId>.Id
  nameWithType.vb: BaseEntity(Of TId).Id
- uid: SparkPlug.Persistence.EntityFramework.Names
  name: Names
  href: api/SparkPlug.Persistence.EntityFramework.Names.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Names
  fullName: SparkPlug.Persistence.EntityFramework.Names
  nameWithType: Names
- uid: SparkPlug.Persistence.EntityFramework.Names.DateOnly
  name: DateOnly
  href: api/SparkPlug.Persistence.EntityFramework.Names.html#SparkPlug_Persistence_EntityFramework_Names_DateOnly
  commentId: F:SparkPlug.Persistence.EntityFramework.Names.DateOnly
  fullName: SparkPlug.Persistence.EntityFramework.Names.DateOnly
  nameWithType: Names.DateOnly
- uid: SparkPlug.Persistence.EntityFramework.Names.DateTime
  name: DateTime
  href: api/SparkPlug.Persistence.EntityFramework.Names.html#SparkPlug_Persistence_EntityFramework_Names_DateTime
  commentId: F:SparkPlug.Persistence.EntityFramework.Names.DateTime
  fullName: SparkPlug.Persistence.EntityFramework.Names.DateTime
  nameWithType: Names.DateTime
- uid: SparkPlug.Persistence.EntityFramework.Names.EnumerableContains
  name: EnumerableContains
  href: api/SparkPlug.Persistence.EntityFramework.Names.html#SparkPlug_Persistence_EntityFramework_Names_EnumerableContains
  commentId: F:SparkPlug.Persistence.EntityFramework.Names.EnumerableContains
  fullName: SparkPlug.Persistence.EntityFramework.Names.EnumerableContains
  nameWithType: Names.EnumerableContains
- uid: SparkPlug.Persistence.EntityFramework.Names.Int32
  name: Int32
  href: api/SparkPlug.Persistence.EntityFramework.Names.html#SparkPlug_Persistence_EntityFramework_Names_Int32
  commentId: F:SparkPlug.Persistence.EntityFramework.Names.Int32
  fullName: SparkPlug.Persistence.EntityFramework.Names.Int32
  nameWithType: Names.Int32
- uid: SparkPlug.Persistence.EntityFramework.Names.Int64
  name: Int64
  href: api/SparkPlug.Persistence.EntityFramework.Names.html#SparkPlug_Persistence_EntityFramework_Names_Int64
  commentId: F:SparkPlug.Persistence.EntityFramework.Names.Int64
  fullName: SparkPlug.Persistence.EntityFramework.Names.Int64
  nameWithType: Names.Int64
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions
  name: PersistanceEntityFrameworkExtensions
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions
  nameWithType: PersistanceEntityFrameworkExtensions
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.ApplyMigrations(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: ApplyMigrations(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkExtensions_ApplyMigrations_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.ApplyMigrations(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.ApplyMigrations(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: PersistanceEntityFrameworkExtensions.ApplyMigrations(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.ApplyMigrations*
  name: ApplyMigrations
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkExtensions_ApplyMigrations_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.ApplyMigrations
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.ApplyMigrations
  nameWithType: PersistanceEntityFrameworkExtensions.ApplyMigrations
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule
  name: PersistanceEntityFrameworkModule
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html
  commentId: T:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule
  nameWithType: PersistanceEntityFrameworkModule
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: PersistanceEntityFrameworkModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkModule_AddModule_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.AddModule
  nameWithType: PersistanceEntityFrameworkModule.AddModule
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: PersistanceEntityFrameworkModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseMiddelwares
  nameWithType: PersistanceEntityFrameworkModule.UseMiddelwares
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: PersistanceEntityFrameworkModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html#SparkPlug_Persistence_EntityFramework_PersistanceEntityFrameworkModule_UseModule_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.UseModule
  nameWithType: PersistanceEntityFrameworkModule.UseModule
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql
  name: SparkPlug.Persistence.EntityFramework.PostgreSql
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.html
  commentId: N:SparkPlug.Persistence.EntityFramework.PostgreSql
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql
  nameWithType: SparkPlug.Persistence.EntityFramework.PostgreSql
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider
  name: DbContextOptionsProvider
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.html
  commentId: T:SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider
  nameWithType: DbContextOptionsProvider
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption(System.String)
  name: GetDbContextOption(string)
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.html#SparkPlug_Persistence_EntityFramework_PostgreSql_DbContextOptionsProvider_GetDbContextOption_System_String_
  commentId: M:SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption(System.String)
  name.vb: GetDbContextOption(String)
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption(string)
  fullName.vb: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption(String)
  nameWithType: DbContextOptionsProvider.GetDbContextOption(string)
  nameWithType.vb: DbContextOptionsProvider.GetDbContextOption(String)
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption*
  name: GetDbContextOption
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.html#SparkPlug_Persistence_EntityFramework_PostgreSql_DbContextOptionsProvider_GetDbContextOption_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.GetDbContextOption
  nameWithType: DbContextOptionsProvider.GetDbContextOption
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql
  name: EntityFrameworkPostgreSql
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html
  commentId: T:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql
  nameWithType: EntityFrameworkPostgreSql
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html#SparkPlug_Persistence_EntityFramework_PostgreSql_EntityFrameworkPostgreSql_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: EntityFrameworkPostgreSql.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.AddModule*
  name: AddModule
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html#SparkPlug_Persistence_EntityFramework_PostgreSql_EntityFrameworkPostgreSql_AddModule_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.AddModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.AddModule
  nameWithType: EntityFrameworkPostgreSql.AddModule
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html#SparkPlug_Persistence_EntityFramework_PostgreSql_EntityFrameworkPostgreSql_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: EntityFrameworkPostgreSql.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html#SparkPlug_Persistence_EntityFramework_PostgreSql_EntityFrameworkPostgreSql_UseMiddelwares_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseMiddelwares
  nameWithType: EntityFrameworkPostgreSql.UseMiddelwares
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html#SparkPlug_Persistence_EntityFramework_PostgreSql_EntityFrameworkPostgreSql_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: EntityFrameworkPostgreSql.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseModule*
  name: UseModule
  href: api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.html#SparkPlug_Persistence_EntityFramework_PostgreSql_EntityFrameworkPostgreSql_UseModule_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSql.UseModule
  nameWithType: EntityFrameworkPostgreSql.UseModule
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1
  name: QueryBuilder<TEntity>
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html
  commentId: T:SparkPlug.Persistence.EntityFramework.QueryBuilder`1
  name.vb: QueryBuilder(Of TEntity)
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity)
  nameWithType: QueryBuilder<TEntity>
  nameWithType.vb: QueryBuilder(Of TEntity)
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0},SparkPlug.Contracts.IQueryRequest)
  name: QueryBuilder(DbSet<TEntity>, IQueryRequest?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1__ctor_Microsoft_EntityFrameworkCore_DbSet__0__SparkPlug_Contracts_IQueryRequest_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.#ctor(Microsoft.EntityFrameworkCore.DbSet{`0},SparkPlug.Contracts.IQueryRequest)
  name.vb: New(DbSet(Of TEntity), IQueryRequest)
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.QueryBuilder(Microsoft.EntityFrameworkCore.DbSet<TEntity>, SparkPlug.Contracts.IQueryRequest?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).New(Microsoft.EntityFrameworkCore.DbSet(Of TEntity), SparkPlug.Contracts.IQueryRequest)
  nameWithType: QueryBuilder<TEntity>.QueryBuilder(DbSet<TEntity>, IQueryRequest?)
  nameWithType.vb: QueryBuilder(Of TEntity).New(DbSet(Of TEntity), IQueryRequest)
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.#ctor*
  name: QueryBuilder
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.QueryBuilder
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).New
  nameWithType: QueryBuilder<TEntity>.QueryBuilder
  nameWithType.vb: QueryBuilder(Of TEntity).New
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.CountAsync(System.Threading.CancellationToken)
  name: CountAsync(CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_CountAsync_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.CountAsync(System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.CountAsync(System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).CountAsync(System.Threading.CancellationToken)
  nameWithType: QueryBuilder<TEntity>.CountAsync(CancellationToken)
  nameWithType.vb: QueryBuilder(Of TEntity).CountAsync(CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.CountAsync*
  name: CountAsync
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_CountAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.CountAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.CountAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).CountAsync
  nameWithType: QueryBuilder<TEntity>.CountAsync
  nameWithType.vb: QueryBuilder(Of TEntity).CountAsync
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Project
  name: Project()
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Project
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Project
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Project()
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Project()
  nameWithType: QueryBuilder<TEntity>.Project()
  nameWithType.vb: QueryBuilder(Of TEntity).Project()
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Project*
  name: Project
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Project_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Project
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Project
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Project
  nameWithType: QueryBuilder<TEntity>.Project
  nameWithType.vb: QueryBuilder(Of TEntity).Project
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Query
  name: Query
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Query
  commentId: P:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Query
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Query
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Query
  nameWithType: QueryBuilder<TEntity>.Query
  nameWithType.vb: QueryBuilder(Of TEntity).Query
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Query*
  name: Query
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Query_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Query
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Query
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Query
  nameWithType: QueryBuilder<TEntity>.Query
  nameWithType.vb: QueryBuilder(Of TEntity).Query
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Request
  name: Request
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Request
  commentId: P:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Request
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Request
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Request
  nameWithType: QueryBuilder<TEntity>.Request
  nameWithType.vb: QueryBuilder(Of TEntity).Request
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Request*
  name: Request
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Request_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Request
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Request
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Request
  nameWithType: QueryBuilder<TEntity>.Request
  nameWithType.vb: QueryBuilder(Of TEntity).Request
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Select
  name: Select()
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Select
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Select
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Select()
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Select()
  nameWithType: QueryBuilder<TEntity>.Select()
  nameWithType.vb: QueryBuilder(Of TEntity).Select()
- uid: SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Select*
  name: Select
  href: api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html#SparkPlug_Persistence_EntityFramework_QueryBuilder_1_Select_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryBuilder`1.Select
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryBuilder<TEntity>.Select
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryBuilder(Of TEntity).Select
  nameWithType: QueryBuilder<TEntity>.Select
  nameWithType.vb: QueryBuilder(Of TEntity).Select
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions
  name: QueryExtentions
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html
  commentId: T:SparkPlug.Persistence.EntityFramework.QueryExtentions
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions
  nameWithType: QueryExtentions
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude*
  name: ApplyInclude
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyInclude_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude
  nameWithType: QueryExtentions.ApplyInclude
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Include,System.String)
  name: ApplyInclude<TEntity>(IQueryable<TEntity>, Include, string?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyInclude__1_System_Linq_IQueryable___0__SparkPlug_Contracts_Include_System_String_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Include,System.String)
  name.vb: ApplyInclude(Of TEntity)(IQueryable(Of TEntity), Include, String)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude<TEntity>(System.Linq.IQueryable<TEntity>, SparkPlug.Contracts.Include, string?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyInclude(Of TEntity)(System.Linq.IQueryable(Of TEntity), SparkPlug.Contracts.Include, String)
  nameWithType: QueryExtentions.ApplyInclude<TEntity>(IQueryable<TEntity>, Include, string?)
  nameWithType.vb: QueryExtentions.ApplyInclude(Of TEntity)(IQueryable(Of TEntity), Include, String)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes*
  name: ApplyIncludes
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyIncludes_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes
  nameWithType: QueryExtentions.ApplyIncludes
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Include[],System.String)
  name: ApplyIncludes<TEntity>(IQueryable<TEntity>, Include[]?, string?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyIncludes__1_System_Linq_IQueryable___0__SparkPlug_Contracts_Include___System_String_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Include[],System.String)
  name.vb: ApplyIncludes(Of TEntity)(IQueryable(Of TEntity), Include(), String)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes<TEntity>(System.Linq.IQueryable<TEntity>, SparkPlug.Contracts.Include[]?, string?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyIncludes(Of TEntity)(System.Linq.IQueryable(Of TEntity), SparkPlug.Contracts.Include(), String)
  nameWithType: QueryExtentions.ApplyIncludes<TEntity>(IQueryable<TEntity>, Include[]?, string?)
  nameWithType.vb: QueryExtentions.ApplyIncludes(Of TEntity)(IQueryable(Of TEntity), Include(), String)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext*
  name: ApplyPageContext
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyPageContext_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext
  nameWithType: QueryExtentions.ApplyPageContext
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.PageContext)
  name: ApplyPageContext<TEntity>(IQueryable<TEntity>, PageContext?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyPageContext__1_System_Linq_IQueryable___0__SparkPlug_Contracts_PageContext_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.PageContext)
  name.vb: ApplyPageContext(Of TEntity)(IQueryable(Of TEntity), PageContext)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext<TEntity>(System.Linq.IQueryable<TEntity>, SparkPlug.Contracts.PageContext?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyPageContext(Of TEntity)(System.Linq.IQueryable(Of TEntity), SparkPlug.Contracts.PageContext)
  nameWithType: QueryExtentions.ApplyPageContext<TEntity>(IQueryable<TEntity>, PageContext?)
  nameWithType.vb: QueryExtentions.ApplyPageContext(Of TEntity)(IQueryable(Of TEntity), PageContext)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection*
  name: ApplyProjection
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyProjection_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection
  nameWithType: QueryExtentions.ApplyProjection
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection``1(System.Linq.IQueryable{``0},System.String[],SparkPlug.Contracts.Include[])
  name: ApplyProjection<TEntity>(IQueryable<TEntity>, string[]?, Include[]?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyProjection__1_System_Linq_IQueryable___0__System_String___SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection``1(System.Linq.IQueryable{``0},System.String[],SparkPlug.Contracts.Include[])
  name.vb: ApplyProjection(Of TEntity)(IQueryable(Of TEntity), String(), Include())
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection<TEntity>(System.Linq.IQueryable<TEntity>, string[]?, SparkPlug.Contracts.Include[]?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyProjection(Of TEntity)(System.Linq.IQueryable(Of TEntity), String(), SparkPlug.Contracts.Include())
  nameWithType: QueryExtentions.ApplyProjection<TEntity>(IQueryable<TEntity>, string[]?, Include[]?)
  nameWithType.vb: QueryExtentions.ApplyProjection(Of TEntity)(IQueryable(Of TEntity), String(), Include())
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector*
  name: ApplySelector
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplySelector_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector
  nameWithType: QueryExtentions.ApplySelector
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector``1(System.Linq.IQueryable{``0},System.String[],SparkPlug.Contracts.Include[])
  name: ApplySelector<TEntity>(IQueryable<TEntity>, string[]?, Include[]?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplySelector__1_System_Linq_IQueryable___0__System_String___SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector``1(System.Linq.IQueryable{``0},System.String[],SparkPlug.Contracts.Include[])
  name.vb: ApplySelector(Of TEntity)(IQueryable(Of TEntity), String(), Include())
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector<TEntity>(System.Linq.IQueryable<TEntity>, string[]?, SparkPlug.Contracts.Include[]?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySelector(Of TEntity)(System.Linq.IQueryable(Of TEntity), String(), SparkPlug.Contracts.Include())
  nameWithType: QueryExtentions.ApplySelector<TEntity>(IQueryable<TEntity>, string[]?, Include[]?)
  nameWithType.vb: QueryExtentions.ApplySelector(Of TEntity)(IQueryable(Of TEntity), String(), Include())
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort*
  name: ApplySort
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplySort_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort
  nameWithType: QueryExtentions.ApplySort
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Order[])
  name: ApplySort<TEntity>(IQueryable<TEntity>, Order[]?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplySort__1_System_Linq_IQueryable___0__SparkPlug_Contracts_Order___
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Order[])
  name.vb: ApplySort(Of TEntity)(IQueryable(Of TEntity), Order())
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort<TEntity>(System.Linq.IQueryable<TEntity>, SparkPlug.Contracts.Order[]?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplySort(Of TEntity)(System.Linq.IQueryable(Of TEntity), SparkPlug.Contracts.Order())
  nameWithType: QueryExtentions.ApplySort<TEntity>(IQueryable<TEntity>, Order[]?)
  nameWithType.vb: QueryExtentions.ApplySort(Of TEntity)(IQueryable(Of TEntity), Order())
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere*
  name: ApplyWhere
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyWhere_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere
  nameWithType: QueryExtentions.ApplyWhere
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Filter)
  name: ApplyWhere<TEntity>(IQueryable<TEntity>, Filter?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ApplyWhere__1_System_Linq_IQueryable___0__SparkPlug_Contracts_Filter_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere``1(System.Linq.IQueryable{``0},SparkPlug.Contracts.Filter)
  name.vb: ApplyWhere(Of TEntity)(IQueryable(Of TEntity), Filter)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere<TEntity>(System.Linq.IQueryable<TEntity>, SparkPlug.Contracts.Filter?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ApplyWhere(Of TEntity)(System.Linq.IQueryable(Of TEntity), SparkPlug.Contracts.Filter)
  nameWithType: QueryExtentions.ApplyWhere<TEntity>(IQueryable<TEntity>, Filter?)
  nameWithType.vb: QueryExtentions.ApplyWhere(Of TEntity)(IQueryable(Of TEntity), Filter)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression(System.Type,System.Linq.Expressions.MemberExpression,System.String[],SparkPlug.Contracts.Include[])
  name: GetCollectionValueExpression(Type, MemberExpression, string[]?, Include[]?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetCollectionValueExpression_System_Type_System_Linq_Expressions_MemberExpression_System_String___SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression(System.Type,System.Linq.Expressions.MemberExpression,System.String[],SparkPlug.Contracts.Include[])
  name.vb: GetCollectionValueExpression(Type, MemberExpression, String(), Include())
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression(System.Type, System.Linq.Expressions.MemberExpression, string[]?, SparkPlug.Contracts.Include[]?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression(System.Type, System.Linq.Expressions.MemberExpression, String(), SparkPlug.Contracts.Include())
  nameWithType: QueryExtentions.GetCollectionValueExpression(Type, MemberExpression, string[]?, Include[]?)
  nameWithType.vb: QueryExtentions.GetCollectionValueExpression(Type, MemberExpression, String(), Include())
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression*
  name: GetCollectionValueExpression
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetCollectionValueExpression_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetCollectionValueExpression
  nameWithType: QueryExtentions.GetCollectionValueExpression
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetEnumValueExpression(System.Linq.Expressions.MemberExpression)
  name: GetEnumValueExpression(MemberExpression)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetEnumValueExpression_System_Linq_Expressions_MemberExpression_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetEnumValueExpression(System.Linq.Expressions.MemberExpression)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetEnumValueExpression(System.Linq.Expressions.MemberExpression)
  nameWithType: QueryExtentions.GetEnumValueExpression(MemberExpression)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetEnumValueExpression*
  name: GetEnumValueExpression
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetEnumValueExpression_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetEnumValueExpression
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetEnumValueExpression
  nameWithType: QueryExtentions.GetEnumValueExpression
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression(System.Type,System.Linq.Expressions.Expression,System.String[],SparkPlug.Contracts.Include[])
  name: GetJObjectValueExpression(Type, Expression, string[]?, Include[]?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetJObjectValueExpression_System_Type_System_Linq_Expressions_Expression_System_String___SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression(System.Type,System.Linq.Expressions.Expression,System.String[],SparkPlug.Contracts.Include[])
  name.vb: GetJObjectValueExpression(Type, Expression, String(), Include())
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression(System.Type, System.Linq.Expressions.Expression, string[]?, SparkPlug.Contracts.Include[]?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression(System.Type, System.Linq.Expressions.Expression, String(), SparkPlug.Contracts.Include())
  nameWithType: QueryExtentions.GetJObjectValueExpression(Type, Expression, string[]?, Include[]?)
  nameWithType.vb: QueryExtentions.GetJObjectValueExpression(Type, Expression, String(), Include())
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression*
  name: GetJObjectValueExpression
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetJObjectValueExpression_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetJObjectValueExpression
  nameWithType: QueryExtentions.GetJObjectValueExpression
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException(System.Type,System.Linq.Expressions.MemberExpression,System.String[],SparkPlug.Contracts.Include[])
  name: GetObjectMethodCallException(Type, MemberExpression, string[]?, Include[]?)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetObjectMethodCallException_System_Type_System_Linq_Expressions_MemberExpression_System_String___SparkPlug_Contracts_Include___
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException(System.Type,System.Linq.Expressions.MemberExpression,System.String[],SparkPlug.Contracts.Include[])
  name.vb: GetObjectMethodCallException(Type, MemberExpression, String(), Include())
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException(System.Type, System.Linq.Expressions.MemberExpression, string[]?, SparkPlug.Contracts.Include[]?)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException(System.Type, System.Linq.Expressions.MemberExpression, String(), SparkPlug.Contracts.Include())
  nameWithType: QueryExtentions.GetObjectMethodCallException(Type, MemberExpression, string[]?, Include[]?)
  nameWithType.vb: QueryExtentions.GetObjectMethodCallException(Type, MemberExpression, String(), Include())
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException*
  name: GetObjectMethodCallException
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetObjectMethodCallException_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetObjectMethodCallException
  nameWithType: QueryExtentions.GetObjectMethodCallException
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetPrimitiveMethodCallExpression(System.Type,System.Linq.Expressions.MemberExpression)
  name: GetPrimitiveMethodCallExpression(Type, MemberExpression)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetPrimitiveMethodCallExpression_System_Type_System_Linq_Expressions_MemberExpression_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetPrimitiveMethodCallExpression(System.Type,System.Linq.Expressions.MemberExpression)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetPrimitiveMethodCallExpression(System.Type, System.Linq.Expressions.MemberExpression)
  nameWithType: QueryExtentions.GetPrimitiveMethodCallExpression(Type, MemberExpression)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetPrimitiveMethodCallExpression*
  name: GetPrimitiveMethodCallExpression
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetPrimitiveMethodCallExpression_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetPrimitiveMethodCallExpression
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetPrimitiveMethodCallExpression
  nameWithType: QueryExtentions.GetPrimitiveMethodCallExpression
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetProperties(System.Type)
  name: GetProperties(Type)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetProperties_System_Type_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetProperties(System.Type)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetProperties(System.Type)
  nameWithType: QueryExtentions.GetProperties(Type)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetProperties*
  name: GetProperties
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetProperties_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetProperties
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetProperties
  nameWithType: QueryExtentions.GetProperties
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetValueExpression(System.Linq.Expressions.MemberExpression)
  name: GetValueExpression(MemberExpression)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetValueExpression_System_Linq_Expressions_MemberExpression_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetValueExpression(System.Linq.Expressions.MemberExpression)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetValueExpression(System.Linq.Expressions.MemberExpression)
  nameWithType: QueryExtentions.GetValueExpression(MemberExpression)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetValueExpression*
  name: GetValueExpression
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_GetValueExpression_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.GetValueExpression
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.GetValueExpression
  nameWithType: QueryExtentions.GetValueExpression
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase(System.String)
  name: ToCamelCase(string)
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ToCamelCase_System_String_
  commentId: M:SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase(System.String)
  name.vb: ToCamelCase(String)
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase(string)
  fullName.vb: SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase(String)
  nameWithType: QueryExtentions.ToCamelCase(string)
  nameWithType.vb: QueryExtentions.ToCamelCase(String)
- uid: SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase*
  name: ToCamelCase
  href: api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html#SparkPlug_Persistence_EntityFramework_QueryExtentions_ToCamelCase_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.QueryExtentions.ToCamelCase
  nameWithType: QueryExtentions.ToCamelCase
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant
  name: SingleTenant
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html
  commentId: T:SparkPlug.Persistence.EntityFramework.SingleTenant
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant
  nameWithType: SingleTenant
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.#ctor(Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions})
  name: SingleTenant(IOptions<SqlDbOptions>)
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant__ctor_Microsoft_Extensions_Options_IOptions_SparkPlug_Persistence_EntityFramework_Configuration_SqlDbOptions__
  commentId: M:SparkPlug.Persistence.EntityFramework.SingleTenant.#ctor(Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions})
  name.vb: New(IOptions(Of SqlDbOptions))
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.SingleTenant(Microsoft.Extensions.Options.IOptions<SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions>)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SingleTenant.New(Microsoft.Extensions.Options.IOptions(Of SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions))
  nameWithType: SingleTenant.SingleTenant(IOptions<SqlDbOptions>)
  nameWithType.vb: SingleTenant.New(IOptions(Of SqlDbOptions))
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.#ctor*
  name: SingleTenant
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SingleTenant.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.SingleTenant
  fullName.vb: SparkPlug.Persistence.EntityFramework.SingleTenant.New
  nameWithType: SingleTenant.SingleTenant
  nameWithType.vb: SingleTenant.New
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.Id
  name: Id
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant_Id
  commentId: P:SparkPlug.Persistence.EntityFramework.SingleTenant.Id
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.Id
  nameWithType: SingleTenant.Id
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.Id*
  name: Id
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant_Id_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SingleTenant.Id
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.Id
  nameWithType: SingleTenant.Id
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.Name
  name: Name
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant_Name
  commentId: P:SparkPlug.Persistence.EntityFramework.SingleTenant.Name
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.Name
  nameWithType: SingleTenant.Name
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.Name*
  name: Name
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant_Name_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SingleTenant.Name
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.Name
  nameWithType: SingleTenant.Name
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.Options
  name: Options
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant_Options
  commentId: P:SparkPlug.Persistence.EntityFramework.SingleTenant.Options
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.Options
  nameWithType: SingleTenant.Options
- uid: SparkPlug.Persistence.EntityFramework.SingleTenant.Options*
  name: Options
  href: api/SparkPlug.Persistence.EntityFramework.SingleTenant.html#SparkPlug_Persistence_EntityFramework_SingleTenant_Options_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SingleTenant.Options
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SingleTenant.Options
  nameWithType: SingleTenant.Options
- uid: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider
  name: SqlRepositoryProvider
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html
  commentId: T:SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider
  nameWithType: SqlRepositoryProvider
- uid: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.#ctor(System.IServiceProvider)
  name: SqlRepositoryProvider(IServiceProvider)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html#SparkPlug_Persistence_EntityFramework_SqlRepositoryProvider__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.SqlRepositoryProvider(System.IServiceProvider)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.New(System.IServiceProvider)
  nameWithType: SqlRepositoryProvider.SqlRepositoryProvider(IServiceProvider)
  nameWithType.vb: SqlRepositoryProvider.New(IServiceProvider)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.#ctor*
  name: SqlRepositoryProvider
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html#SparkPlug_Persistence_EntityFramework_SqlRepositoryProvider__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.SqlRepositoryProvider
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.New
  nameWithType: SqlRepositoryProvider.SqlRepositoryProvider
  nameWithType.vb: SqlRepositoryProvider.New
- uid: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository*
  name: GetRepository
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html#SparkPlug_Persistence_EntityFramework_SqlRepositoryProvider_GetRepository_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository
  nameWithType: SqlRepositoryProvider.GetRepository
- uid: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository``2
  name: GetRepository<TId, TEntity>()
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html#SparkPlug_Persistence_EntityFramework_SqlRepositoryProvider_GetRepository__2
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository``2
  name.vb: GetRepository(Of TId, TEntity)()
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository<TId, TEntity>()
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.GetRepository(Of TId, TEntity)()
  nameWithType: SqlRepositoryProvider.GetRepository<TId, TEntity>()
  nameWithType.vb: SqlRepositoryProvider.GetRepository(Of TId, TEntity)()
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2
  name: SqlRepository<TId, TEntity>
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html
  commentId: T:SparkPlug.Persistence.EntityFramework.SqlRepository`2
  name.vb: SqlRepository(Of TId, TEntity)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity)
  nameWithType: SqlRepository<TId, TEntity>
  nameWithType.vb: SqlRepository(Of TId, TEntity)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.#ctor(System.IServiceProvider,SparkPlug.Persistence.EntityFramework.Context.SqlDbContext)
  name: SqlRepository(IServiceProvider, SqlDbContext)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2__ctor_System_IServiceProvider_SparkPlug_Persistence_EntityFramework_Context_SqlDbContext_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.#ctor(System.IServiceProvider,SparkPlug.Persistence.EntityFramework.Context.SqlDbContext)
  name.vb: New(IServiceProvider, SqlDbContext)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.SqlRepository(System.IServiceProvider, SparkPlug.Persistence.EntityFramework.Context.SqlDbContext)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).New(System.IServiceProvider, SparkPlug.Persistence.EntityFramework.Context.SqlDbContext)
  nameWithType: SqlRepository<TId, TEntity>.SqlRepository(IServiceProvider, SqlDbContext)
  nameWithType.vb: SqlRepository(Of TId, TEntity).New(IServiceProvider, SqlDbContext)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.#ctor*
  name: SqlRepository
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.SqlRepository
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).New
  nameWithType: SqlRepository<TId, TEntity>.SqlRepository
  nameWithType.vb: SqlRepository(Of TId, TEntity).New
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: CountAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_CountAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).CountAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.CountAsync*
  name: CountAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_CountAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.CountAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.CountAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).CountAsync
  nameWithType: SqlRepository<TId, TEntity>.CountAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).CountAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_CreateAsync_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.CreateAsync(SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).CreateAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateAsync*
  name: CreateAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_CreateAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.CreateAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).CreateAsync
  nameWithType: SqlRepository<TId, TEntity>.CreateAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).CreateAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name: CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_CreateManyAsync_SparkPlug_Contracts_ICommandRequest__1____System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name.vb: CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.CreateManyAsync(SparkPlug.Contracts.ICommandRequest<TEntity[]>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).CreateManyAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity()), System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateManyAsync*
  name: CreateManyAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_CreateManyAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.CreateManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.CreateManyAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).CreateManyAsync
  nameWithType: SqlRepository<TId, TEntity>.CreateManyAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).CreateManyAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbContext
  name: DbContext
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_DbContext
  commentId: P:SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbContext
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.DbContext
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).DbContext
  nameWithType: SqlRepository<TId, TEntity>.DbContext
  nameWithType.vb: SqlRepository(Of TId, TEntity).DbContext
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbContext*
  name: DbContext
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_DbContext_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbContext
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.DbContext
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).DbContext
  nameWithType: SqlRepository<TId, TEntity>.DbContext
  nameWithType.vb: SqlRepository(Of TId, TEntity).DbContext
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbSet
  name: DbSet
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_DbSet
  commentId: P:SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbSet
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.DbSet
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).DbSet
  nameWithType: SqlRepository<TId, TEntity>.DbSet
  nameWithType.vb: SqlRepository(Of TId, TEntity).DbSet
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbSet*
  name: DbSet
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_DbSet_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.DbSet
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.DbSet
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).DbSet
  nameWithType: SqlRepository<TId, TEntity>.DbSet
  nameWithType.vb: SqlRepository(Of TId, TEntity).DbSet
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.DeleteAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).DeleteAsync(TId, System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).DeleteAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.DeleteAsync*
  name: DeleteAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_DeleteAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.DeleteAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.DeleteAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).DeleteAsync
  nameWithType: SqlRepository<TId, TEntity>.DeleteAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).DeleteAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: FindAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_FindAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).FindAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.FindAsync*
  name: FindAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_FindAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.FindAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.FindAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).FindAsync
  nameWithType: SqlRepository<TId, TEntity>.FindAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).FindAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetAsync(`0,System.Threading.CancellationToken)
  name: GetAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetAsync(TId, System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.GetAsync(TId, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetAsync*
  name: GetAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetAsync
  nameWithType: SqlRepository<TId, TEntity>.GetAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetDbSet
  name: GetDbSet()
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetDbSet
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetDbSet
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetDbSet()
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetDbSet()
  nameWithType: SqlRepository<TId, TEntity>.GetDbSet()
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetDbSet()
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetDbSet*
  name: GetDbSet
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetDbSet_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetDbSet
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetDbSet
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetDbSet
  nameWithType: SqlRepository<TId, TEntity>.GetDbSet
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetDbSet
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetDbSet``1
  name: GetDbSet<Entity>()
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetDbSet__1
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetDbSet``1
  name.vb: GetDbSet(Of Entity)()
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetDbSet<Entity>()
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetDbSet(Of Entity)()
  nameWithType: SqlRepository<TId, TEntity>.GetDbSet<Entity>()
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetDbSet(Of Entity)()
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name: GetManyAsync(TId[], CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetManyAsync__0___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name.vb: GetManyAsync(TId(), CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetManyAsync(TId[], System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetManyAsync(TId(), System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetManyAsync(TId(), CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetManyAsync*
  name: GetManyAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_GetManyAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.GetManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.GetManyAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).GetManyAsync
  nameWithType: SqlRepository<TId, TEntity>.GetManyAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).GetManyAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name: PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_PatchAsync__0_SparkPlug_Contracts_ICommandRequest_Microsoft_AspNetCore_JsonPatch_JsonPatchDocument__1___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name.vb: PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.PatchAsync(TId, SparkPlug.Contracts.ICommandRequest<Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TEntity>>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).PatchAsync(TId, SparkPlug.Contracts.ICommandRequest(Of Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TEntity)), System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.PatchAsync*
  name: PatchAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_PatchAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.PatchAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.PatchAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).PatchAsync
  nameWithType: SqlRepository<TId, TEntity>.PatchAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).PatchAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: QueryAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_QueryAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).QueryAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.QueryAsync*
  name: QueryAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_QueryAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.QueryAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.QueryAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).QueryAsync
  nameWithType: SqlRepository<TId, TEntity>.QueryAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).QueryAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_ReplaceAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.ReplaceAsync*
  name: ReplaceAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_ReplaceAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.ReplaceAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.ReplaceAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).ReplaceAsync
  nameWithType: SqlRepository<TId, TEntity>.ReplaceAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).ReplaceAsync
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_UpdateAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.EntityFramework.SqlRepository`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: SqlRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: SqlRepository(Of TId, TEntity).UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.EntityFramework.SqlRepository`2.UpdateAsync*
  name: UpdateAsync
  href: api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html#SparkPlug_Persistence_EntityFramework_SqlRepository_2_UpdateAsync_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.SqlRepository`2.UpdateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.SqlRepository<TId, TEntity>.UpdateAsync
  fullName.vb: SparkPlug.Persistence.EntityFramework.SqlRepository(Of TId, TEntity).UpdateAsync
  nameWithType: SqlRepository<TId, TEntity>.UpdateAsync
  nameWithType.vb: SqlRepository(Of TId, TEntity).UpdateAsync
- uid: SparkPlug.Persistence.EntityFramework.TenantModelConfigurations
  name: TenantModelConfigurations
  href: api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html
  commentId: T:SparkPlug.Persistence.EntityFramework.TenantModelConfigurations
  fullName: SparkPlug.Persistence.EntityFramework.TenantModelConfigurations
  nameWithType: TenantModelConfigurations
- uid: SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  name: Configure(ModelBuilder)
  href: api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html#SparkPlug_Persistence_EntityFramework_TenantModelConfigurations_Configure_Microsoft_EntityFrameworkCore_ModelBuilder_
  commentId: M:SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  fullName: SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.Configure(Microsoft.EntityFrameworkCore.ModelBuilder)
  nameWithType: TenantModelConfigurations.Configure(ModelBuilder)
- uid: SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.Configure*
  name: Configure
  href: api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html#SparkPlug_Persistence_EntityFramework_TenantModelConfigurations_Configure_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.Configure
  isSpec: "True"
  fullName: SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.Configure
  nameWithType: TenantModelConfigurations.Configure
- uid: SparkPlug.Persistence.EntityFramework.TenantRepository`2
  name: TenantRepository<TId, TEntity>
  href: api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html
  commentId: T:SparkPlug.Persistence.EntityFramework.TenantRepository`2
  name.vb: TenantRepository(Of TId, TEntity)
  fullName: SparkPlug.Persistence.EntityFramework.TenantRepository<TId, TEntity>
  fullName.vb: SparkPlug.Persistence.EntityFramework.TenantRepository(Of TId, TEntity)
  nameWithType: TenantRepository<TId, TEntity>
  nameWithType.vb: TenantRepository(Of TId, TEntity)
- uid: SparkPlug.Persistence.EntityFramework.TenantRepository`2.#ctor(System.IServiceProvider,SparkPlug.Persistence.EntityFramework.Context.TenantDbContext)
  name: TenantRepository(IServiceProvider, TenantDbContext)
  href: api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html#SparkPlug_Persistence_EntityFramework_TenantRepository_2__ctor_System_IServiceProvider_SparkPlug_Persistence_EntityFramework_Context_TenantDbContext_
  commentId: M:SparkPlug.Persistence.EntityFramework.TenantRepository`2.#ctor(System.IServiceProvider,SparkPlug.Persistence.EntityFramework.Context.TenantDbContext)
  name.vb: New(IServiceProvider, TenantDbContext)
  fullName: SparkPlug.Persistence.EntityFramework.TenantRepository<TId, TEntity>.TenantRepository(System.IServiceProvider, SparkPlug.Persistence.EntityFramework.Context.TenantDbContext)
  fullName.vb: SparkPlug.Persistence.EntityFramework.TenantRepository(Of TId, TEntity).New(System.IServiceProvider, SparkPlug.Persistence.EntityFramework.Context.TenantDbContext)
  nameWithType: TenantRepository<TId, TEntity>.TenantRepository(IServiceProvider, TenantDbContext)
  nameWithType.vb: TenantRepository(Of TId, TEntity).New(IServiceProvider, TenantDbContext)
- uid: SparkPlug.Persistence.EntityFramework.TenantRepository`2.#ctor*
  name: TenantRepository
  href: api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html#SparkPlug_Persistence_EntityFramework_TenantRepository_2__ctor_
  commentId: Overload:SparkPlug.Persistence.EntityFramework.TenantRepository`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.EntityFramework.TenantRepository<TId, TEntity>.TenantRepository
  fullName.vb: SparkPlug.Persistence.EntityFramework.TenantRepository(Of TId, TEntity).New
  nameWithType: TenantRepository<TId, TEntity>.TenantRepository
  nameWithType.vb: TenantRepository(Of TId, TEntity).New
- uid: SparkPlug.Persistence.EntityFramework.Types
  name: Types
  href: api/SparkPlug.Persistence.EntityFramework.Types.html
  commentId: T:SparkPlug.Persistence.EntityFramework.Types
  fullName: SparkPlug.Persistence.EntityFramework.Types
  nameWithType: Types
- uid: SparkPlug.Persistence.EntityFramework.Types.DateTimeType
  name: DateTimeType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_DateTimeType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.DateTimeType
  fullName: SparkPlug.Persistence.EntityFramework.Types.DateTimeType
  nameWithType: Types.DateTimeType
- uid: SparkPlug.Persistence.EntityFramework.Types.EnumerableType
  name: EnumerableType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_EnumerableType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.EnumerableType
  fullName: SparkPlug.Persistence.EntityFramework.Types.EnumerableType
  nameWithType: Types.EnumerableType
- uid: SparkPlug.Persistence.EntityFramework.Types.IntType
  name: IntType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_IntType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.IntType
  fullName: SparkPlug.Persistence.EntityFramework.Types.IntType
  nameWithType: Types.IntType
- uid: SparkPlug.Persistence.EntityFramework.Types.JArrayType
  name: JArrayType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_JArrayType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.JArrayType
  fullName: SparkPlug.Persistence.EntityFramework.Types.JArrayType
  nameWithType: Types.JArrayType
- uid: SparkPlug.Persistence.EntityFramework.Types.JObjectType
  name: JObjectType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_JObjectType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.JObjectType
  fullName: SparkPlug.Persistence.EntityFramework.Types.JObjectType
  nameWithType: Types.JObjectType
- uid: SparkPlug.Persistence.EntityFramework.Types.JTokenType
  name: JTokenType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_JTokenType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.JTokenType
  fullName: SparkPlug.Persistence.EntityFramework.Types.JTokenType
  nameWithType: Types.JTokenType
- uid: SparkPlug.Persistence.EntityFramework.Types.JsonIgnoreAttributeType
  name: JsonIgnoreAttributeType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_JsonIgnoreAttributeType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.JsonIgnoreAttributeType
  fullName: SparkPlug.Persistence.EntityFramework.Types.JsonIgnoreAttributeType
  nameWithType: Types.JsonIgnoreAttributeType
- uid: SparkPlug.Persistence.EntityFramework.Types.LongType
  name: LongType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_LongType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.LongType
  fullName: SparkPlug.Persistence.EntityFramework.Types.LongType
  nameWithType: Types.LongType
- uid: SparkPlug.Persistence.EntityFramework.Types.ObjectType
  name: ObjectType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_ObjectType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.ObjectType
  fullName: SparkPlug.Persistence.EntityFramework.Types.ObjectType
  nameWithType: Types.ObjectType
- uid: SparkPlug.Persistence.EntityFramework.Types.StringType
  name: StringType
  href: api/SparkPlug.Persistence.EntityFramework.Types.html#SparkPlug_Persistence_EntityFramework_Types_StringType
  commentId: F:SparkPlug.Persistence.EntityFramework.Types.StringType
  fullName: SparkPlug.Persistence.EntityFramework.Types.StringType
  nameWithType: Types.StringType
- uid: SparkPlug.Persistence.MongoDb
  name: SparkPlug.Persistence.MongoDb
  href: api/SparkPlug.Persistence.MongoDb.html
  commentId: N:SparkPlug.Persistence.MongoDb
  fullName: SparkPlug.Persistence.MongoDb
  nameWithType: SparkPlug.Persistence.MongoDb
- uid: SparkPlug.Persistence.MongoDb.Attributes
  name: SparkPlug.Persistence.MongoDb.Attributes
  href: api/SparkPlug.Persistence.MongoDb.Attributes.html
  commentId: N:SparkPlug.Persistence.MongoDb.Attributes
  fullName: SparkPlug.Persistence.MongoDb.Attributes
  nameWithType: SparkPlug.Persistence.MongoDb.Attributes
- uid: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute
  name: CollectionAttribute
  href: api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html
  commentId: T:SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute
  fullName: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute
  nameWithType: CollectionAttribute
- uid: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.#ctor(System.String)
  name: CollectionAttribute(string)
  href: api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html#SparkPlug_Persistence_MongoDb_Attributes_CollectionAttribute__ctor_System_String_
  commentId: M:SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.#ctor(System.String)
  name.vb: New(String)
  fullName: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.CollectionAttribute(string)
  fullName.vb: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.New(String)
  nameWithType: CollectionAttribute.CollectionAttribute(string)
  nameWithType.vb: CollectionAttribute.New(String)
- uid: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.#ctor*
  name: CollectionAttribute
  href: api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html#SparkPlug_Persistence_MongoDb_Attributes_CollectionAttribute__ctor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.CollectionAttribute
  fullName.vb: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.New
  nameWithType: CollectionAttribute.CollectionAttribute
  nameWithType.vb: CollectionAttribute.New
- uid: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.Name
  name: Name
  href: api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html#SparkPlug_Persistence_MongoDb_Attributes_CollectionAttribute_Name
  commentId: P:SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.Name
  fullName: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.Name
  nameWithType: CollectionAttribute.Name
- uid: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.Name*
  name: Name
  href: api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html#SparkPlug_Persistence_MongoDb_Attributes_CollectionAttribute_Name_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.Name
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.Name
  nameWithType: CollectionAttribute.Name
- uid: SparkPlug.Persistence.MongoDb.Configuration
  name: SparkPlug.Persistence.MongoDb.Configuration
  href: api/SparkPlug.Persistence.MongoDb.Configuration.html
  commentId: N:SparkPlug.Persistence.MongoDb.Configuration
  fullName: SparkPlug.Persistence.MongoDb.Configuration
  nameWithType: SparkPlug.Persistence.MongoDb.Configuration
- uid: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions
  name: MongoDbOptions
  href: api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html
  commentId: T:SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions
  fullName: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions
  nameWithType: MongoDbOptions
- uid: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.#ctor
  name: MongoDbOptions()
  href: api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html#SparkPlug_Persistence_MongoDb_Configuration_MongoDbOptions__ctor
  commentId: M:SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.#ctor
  name.vb: New()
  fullName: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.MongoDbOptions()
  fullName.vb: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.New()
  nameWithType: MongoDbOptions.MongoDbOptions()
  nameWithType.vb: MongoDbOptions.New()
- uid: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.#ctor*
  name: MongoDbOptions
  href: api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html#SparkPlug_Persistence_MongoDb_Configuration_MongoDbOptions__ctor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.MongoDbOptions
  fullName.vb: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.New
  nameWithType: MongoDbOptions.MongoDbOptions
  nameWithType.vb: MongoDbOptions.New
- uid: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConfigPath
  name: ConfigPath
  href: api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html#SparkPlug_Persistence_MongoDb_Configuration_MongoDbOptions_ConfigPath
  commentId: F:SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConfigPath
  fullName: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConfigPath
  nameWithType: MongoDbOptions.ConfigPath
- uid: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConnectionString
  name: ConnectionString
  href: api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html#SparkPlug_Persistence_MongoDb_Configuration_MongoDbOptions_ConnectionString
  commentId: P:SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConnectionString
  fullName: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConnectionString
  nameWithType: MongoDbOptions.ConnectionString
- uid: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConnectionString*
  name: ConnectionString
  href: api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html#SparkPlug_Persistence_MongoDb_Configuration_MongoDbOptions_ConnectionString_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConnectionString
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.ConnectionString
  nameWithType: MongoDbOptions.ConnectionString
- uid: SparkPlug.Persistence.MongoDb.Context
  name: SparkPlug.Persistence.MongoDb.Context
  href: api/SparkPlug.Persistence.MongoDb.Context.html
  commentId: N:SparkPlug.Persistence.MongoDb.Context
  fullName: SparkPlug.Persistence.MongoDb.Context
  nameWithType: SparkPlug.Persistence.MongoDb.Context
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient
  name: MongoDbClient
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html
  commentId: T:SparkPlug.Persistence.MongoDb.Context.MongoDbClient
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient
  nameWithType: MongoDbClient
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.#ctor(SparkPlug.Persistence.Abstractions.ITenantOptions{SparkPlug.Persistence.Abstractions.DbConfig})
  name: MongoDbClient(ITenantOptions<DbConfig>)
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient__ctor_SparkPlug_Persistence_Abstractions_ITenantOptions_SparkPlug_Persistence_Abstractions_DbConfig__
  commentId: M:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.#ctor(SparkPlug.Persistence.Abstractions.ITenantOptions{SparkPlug.Persistence.Abstractions.DbConfig})
  name.vb: New(ITenantOptions(Of DbConfig))
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.MongoDbClient(SparkPlug.Persistence.Abstractions.ITenantOptions<SparkPlug.Persistence.Abstractions.DbConfig>)
  fullName.vb: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.New(SparkPlug.Persistence.Abstractions.ITenantOptions(Of SparkPlug.Persistence.Abstractions.DbConfig))
  nameWithType: MongoDbClient.MongoDbClient(ITenantOptions<DbConfig>)
  nameWithType.vb: MongoDbClient.New(ITenantOptions(Of DbConfig))
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.#ctor*
  name: MongoDbClient
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient__ctor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.MongoDbClient
  fullName.vb: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.New
  nameWithType: MongoDbClient.MongoDbClient
  nameWithType.vb: MongoDbClient.New
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.Database
  name: Database
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient_Database
  commentId: P:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.Database
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.Database
  nameWithType: MongoDbClient.Database
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.Database*
  name: Database
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient_Database_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.Database
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.Database
  nameWithType: MongoDbClient.Database
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient(System.String)
  name: GetClient(string)
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient_GetClient_System_String_
  commentId: M:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient(System.String)
  name.vb: GetClient(String)
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient(string)
  fullName.vb: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient(String)
  nameWithType: MongoDbClient.GetClient(string)
  nameWithType.vb: MongoDbClient.GetClient(String)
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient*
  name: GetClient
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient_GetClient_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetClient
  nameWithType: MongoDbClient.GetClient
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection*
  name: GetCollection
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient_GetCollection_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection
  nameWithType: MongoDbClient.GetCollection
- uid: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection``1(System.String)
  name: GetCollection<TEntity>(string)
  href: api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html#SparkPlug_Persistence_MongoDb_Context_MongoDbClient_GetCollection__1_System_String_
  commentId: M:SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection``1(System.String)
  name.vb: GetCollection(Of TEntity)(String)
  fullName: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection<TEntity>(string)
  fullName.vb: SparkPlug.Persistence.MongoDb.Context.MongoDbClient.GetCollection(Of TEntity)(String)
  nameWithType: MongoDbClient.GetCollection<TEntity>(string)
  nameWithType.vb: MongoDbClient.GetCollection(Of TEntity)(String)
- uid: SparkPlug.Persistence.MongoDb.Extention
  name: Extention
  href: api/SparkPlug.Persistence.MongoDb.Extention.html
  commentId: T:SparkPlug.Persistence.MongoDb.Extention
  fullName: SparkPlug.Persistence.MongoDb.Extention
  nameWithType: Extention
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition*
  name: GetFilterDefinition
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinition_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition
  nameWithType: Extention.GetFilterDefinition
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.ICompositeFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name: GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinition__1_SparkPlug_Contracts_ICompositeFilter_MongoDB_Driver_FilterDefinitionBuilder___0__
  commentId: M:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.ICompositeFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name.vb: GetFilterDefinition(Of TEntity)(ICompositeFilter, FilterDefinitionBuilder(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition<TEntity>(SparkPlug.Contracts.ICompositeFilter, MongoDB.Driver.FilterDefinitionBuilder<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition(Of TEntity)(SparkPlug.Contracts.ICompositeFilter, MongoDB.Driver.FilterDefinitionBuilder(Of TEntity))
  nameWithType: Extention.GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>)
  nameWithType.vb: Extention.GetFilterDefinition(Of TEntity)(ICompositeFilter, FilterDefinitionBuilder(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.IFieldFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name: GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinition__1_SparkPlug_Contracts_IFieldFilter_MongoDB_Driver_FilterDefinitionBuilder___0__
  commentId: M:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.IFieldFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name.vb: GetFilterDefinition(Of TEntity)(IFieldFilter, FilterDefinitionBuilder(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition<TEntity>(SparkPlug.Contracts.IFieldFilter, MongoDB.Driver.FilterDefinitionBuilder<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition(Of TEntity)(SparkPlug.Contracts.IFieldFilter, MongoDB.Driver.FilterDefinitionBuilder(Of TEntity))
  nameWithType: Extention.GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>)
  nameWithType.vb: Extention.GetFilterDefinition(Of TEntity)(IFieldFilter, FilterDefinitionBuilder(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.IFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name: GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinition__1_SparkPlug_Contracts_IFilter_MongoDB_Driver_FilterDefinitionBuilder___0__
  commentId: M:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.IFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name.vb: GetFilterDefinition(Of TEntity)(IFilter, FilterDefinitionBuilder(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition<TEntity>(SparkPlug.Contracts.IFilter, MongoDB.Driver.FilterDefinitionBuilder<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition(Of TEntity)(SparkPlug.Contracts.IFilter, MongoDB.Driver.FilterDefinitionBuilder(Of TEntity))
  nameWithType: Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)
  nameWithType.vb: Extention.GetFilterDefinition(Of TEntity)(IFilter, FilterDefinitionBuilder(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.IUnaryFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name: GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinition__1_SparkPlug_Contracts_IUnaryFilter_MongoDB_Driver_FilterDefinitionBuilder___0__
  commentId: M:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition``1(SparkPlug.Contracts.IUnaryFilter,MongoDB.Driver.FilterDefinitionBuilder{``0})
  name.vb: GetFilterDefinition(Of TEntity)(IUnaryFilter, FilterDefinitionBuilder(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition<TEntity>(SparkPlug.Contracts.IUnaryFilter, MongoDB.Driver.FilterDefinitionBuilder<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinition(Of TEntity)(SparkPlug.Contracts.IUnaryFilter, MongoDB.Driver.FilterDefinitionBuilder(Of TEntity))
  nameWithType: Extention.GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>)
  nameWithType.vb: Extention.GetFilterDefinition(Of TEntity)(IUnaryFilter, FilterDefinitionBuilder(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions*
  name: GetFilterDefinitions
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinitions_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions
  nameWithType: Extention.GetFilterDefinitions
- uid: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions``1(SparkPlug.Contracts.IFilter[],MongoDB.Driver.FilterDefinitionBuilder{``0})
  name: GetFilterDefinitions<TEntity>(IFilter[], FilterDefinitionBuilder<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.Extention.html#SparkPlug_Persistence_MongoDb_Extention_GetFilterDefinitions__1_SparkPlug_Contracts_IFilter___MongoDB_Driver_FilterDefinitionBuilder___0__
  commentId: M:SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions``1(SparkPlug.Contracts.IFilter[],MongoDB.Driver.FilterDefinitionBuilder{``0})
  name.vb: GetFilterDefinitions(Of TEntity)(IFilter(), FilterDefinitionBuilder(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions<TEntity>(SparkPlug.Contracts.IFilter[], MongoDB.Driver.FilterDefinitionBuilder<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.Extention.GetFilterDefinitions(Of TEntity)(SparkPlug.Contracts.IFilter(), MongoDB.Driver.FilterDefinitionBuilder(Of TEntity))
  nameWithType: Extention.GetFilterDefinitions<TEntity>(IFilter[], FilterDefinitionBuilder<TEntity>)
  nameWithType.vb: Extention.GetFilterDefinitions(Of TEntity)(IFilter(), FilterDefinitionBuilder(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.HealthCheck
  name: SparkPlug.Persistence.MongoDb.HealthCheck
  href: api/SparkPlug.Persistence.MongoDb.HealthCheck.html
  commentId: N:SparkPlug.Persistence.MongoDb.HealthCheck
  fullName: SparkPlug.Persistence.MongoDb.HealthCheck
  nameWithType: SparkPlug.Persistence.MongoDb.HealthCheck
- uid: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck
  name: MongoDbHealthCheck
  href: api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html
  commentId: T:SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck
  fullName: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck
  nameWithType: MongoDbHealthCheck
- uid: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.#ctor(Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions})
  name: MongoDbHealthCheck(IOptions<MongoDbOptions>)
  href: api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html#SparkPlug_Persistence_MongoDb_HealthCheck_MongoDbHealthCheck__ctor_Microsoft_Extensions_Options_IOptions_SparkPlug_Persistence_MongoDb_Configuration_MongoDbOptions__
  commentId: M:SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.#ctor(Microsoft.Extensions.Options.IOptions{SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions})
  name.vb: New(IOptions(Of MongoDbOptions))
  fullName: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.MongoDbHealthCheck(Microsoft.Extensions.Options.IOptions<SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions>)
  fullName.vb: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.New(Microsoft.Extensions.Options.IOptions(Of SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions))
  nameWithType: MongoDbHealthCheck.MongoDbHealthCheck(IOptions<MongoDbOptions>)
  nameWithType.vb: MongoDbHealthCheck.New(IOptions(Of MongoDbOptions))
- uid: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.#ctor*
  name: MongoDbHealthCheck
  href: api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html#SparkPlug_Persistence_MongoDb_HealthCheck_MongoDbHealthCheck__ctor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.MongoDbHealthCheck
  fullName.vb: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.New
  nameWithType: MongoDbHealthCheck.MongoDbHealthCheck
  nameWithType.vb: MongoDbHealthCheck.New
- uid: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  name: CheckHealthAsync(HealthCheckContext, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html#SparkPlug_Persistence_MongoDb_HealthCheck_MongoDbHealthCheck_CheckHealthAsync_Microsoft_Extensions_Diagnostics_HealthChecks_HealthCheckContext_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext, System.Threading.CancellationToken)
  nameWithType: MongoDbHealthCheck.CheckHealthAsync(HealthCheckContext, CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.CheckHealthAsync*
  name: CheckHealthAsync
  href: api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html#SparkPlug_Persistence_MongoDb_HealthCheck_MongoDbHealthCheck_CheckHealthAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.CheckHealthAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.CheckHealthAsync
  nameWithType: MongoDbHealthCheck.CheckHealthAsync
- uid: SparkPlug.Persistence.MongoDb.Models
  name: SparkPlug.Persistence.MongoDb.Models
  href: api/SparkPlug.Persistence.MongoDb.Models.html
  commentId: N:SparkPlug.Persistence.MongoDb.Models
  fullName: SparkPlug.Persistence.MongoDb.Models
  nameWithType: SparkPlug.Persistence.MongoDb.Models
- uid: SparkPlug.Persistence.MongoDb.Models.BaseEntity`1
  name: BaseEntity<TId>
  href: api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html
  commentId: T:SparkPlug.Persistence.MongoDb.Models.BaseEntity`1
  name.vb: BaseEntity(Of TId)
  fullName: SparkPlug.Persistence.MongoDb.Models.BaseEntity<TId>
  fullName.vb: SparkPlug.Persistence.MongoDb.Models.BaseEntity(Of TId)
  nameWithType: BaseEntity<TId>
  nameWithType.vb: BaseEntity(Of TId)
- uid: SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.GetId
  name: GetId()
  href: api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html#SparkPlug_Persistence_MongoDb_Models_BaseEntity_1_GetId
  commentId: M:SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.GetId
  fullName: SparkPlug.Persistence.MongoDb.Models.BaseEntity<TId>.GetId()
  fullName.vb: SparkPlug.Persistence.MongoDb.Models.BaseEntity(Of TId).GetId()
  nameWithType: BaseEntity<TId>.GetId()
  nameWithType.vb: BaseEntity(Of TId).GetId()
- uid: SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.GetId*
  name: GetId
  href: api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html#SparkPlug_Persistence_MongoDb_Models_BaseEntity_1_GetId_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.GetId
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Models.BaseEntity<TId>.GetId
  fullName.vb: SparkPlug.Persistence.MongoDb.Models.BaseEntity(Of TId).GetId
  nameWithType: BaseEntity<TId>.GetId
  nameWithType.vb: BaseEntity(Of TId).GetId
- uid: SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.Id
  name: Id
  href: api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html#SparkPlug_Persistence_MongoDb_Models_BaseEntity_1_Id
  commentId: P:SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.Id
  fullName: SparkPlug.Persistence.MongoDb.Models.BaseEntity<TId>.Id
  fullName.vb: SparkPlug.Persistence.MongoDb.Models.BaseEntity(Of TId).Id
  nameWithType: BaseEntity<TId>.Id
  nameWithType.vb: BaseEntity(Of TId).Id
- uid: SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.Id*
  name: Id
  href: api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html#SparkPlug_Persistence_MongoDb_Models_BaseEntity_1_Id_
  commentId: Overload:SparkPlug.Persistence.MongoDb.Models.BaseEntity`1.Id
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.Models.BaseEntity<TId>.Id
  fullName.vb: SparkPlug.Persistence.MongoDb.Models.BaseEntity(Of TId).Id
  nameWithType: BaseEntity<TId>.Id
  nameWithType.vb: BaseEntity(Of TId).Id
- uid: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider
  name: MongoRepositoryProvider
  href: api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html
  commentId: T:SparkPlug.Persistence.MongoDb.MongoRepositoryProvider
  fullName: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider
  nameWithType: MongoRepositoryProvider
- uid: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.#ctor(System.IServiceProvider)
  name: MongoRepositoryProvider(IServiceProvider)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html#SparkPlug_Persistence_MongoDb_MongoRepositoryProvider__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.MongoRepositoryProvider(System.IServiceProvider)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.New(System.IServiceProvider)
  nameWithType: MongoRepositoryProvider.MongoRepositoryProvider(IServiceProvider)
  nameWithType.vb: MongoRepositoryProvider.New(IServiceProvider)
- uid: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.#ctor*
  name: MongoRepositoryProvider
  href: api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html#SparkPlug_Persistence_MongoDb_MongoRepositoryProvider__ctor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.MongoRepositoryProvider
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.New
  nameWithType: MongoRepositoryProvider.MongoRepositoryProvider
  nameWithType.vb: MongoRepositoryProvider.New
- uid: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository*
  name: GetRepository
  href: api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html#SparkPlug_Persistence_MongoDb_MongoRepositoryProvider_GetRepository_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository
  nameWithType: MongoRepositoryProvider.GetRepository
- uid: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository``2
  name: GetRepository<TId, TEntity>()
  href: api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html#SparkPlug_Persistence_MongoDb_MongoRepositoryProvider_GetRepository__2
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository``2
  name.vb: GetRepository(Of TId, TEntity)()
  fullName: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository<TId, TEntity>()
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.GetRepository(Of TId, TEntity)()
  nameWithType: MongoRepositoryProvider.GetRepository<TId, TEntity>()
  nameWithType.vb: MongoRepositoryProvider.GetRepository(Of TId, TEntity)()
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2
  name: MongoRepository<TId, TEntity>
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html
  commentId: T:SparkPlug.Persistence.MongoDb.MongoRepository`2
  name.vb: MongoRepository(Of TId, TEntity)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity)
  nameWithType: MongoRepository<TId, TEntity>
  nameWithType.vb: MongoRepository(Of TId, TEntity)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.#ctor(System.IServiceProvider)
  name: MongoRepository(IServiceProvider)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2__ctor_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.#ctor(System.IServiceProvider)
  name.vb: New(IServiceProvider)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.MongoRepository(System.IServiceProvider)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).New(System.IServiceProvider)
  nameWithType: MongoRepository<TId, TEntity>.MongoRepository(IServiceProvider)
  nameWithType.vb: MongoRepository(Of TId, TEntity).New(IServiceProvider)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.#ctor*
  name: MongoRepository
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2__ctor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.#ctor
  isSpec: "True"
  name.vb: New
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.MongoRepository
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).New
  nameWithType: MongoRepository<TId, TEntity>.MongoRepository
  nameWithType.vb: MongoRepository(Of TId, TEntity).New
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.Collection
  name: Collection
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_Collection
  commentId: P:SparkPlug.Persistence.MongoDb.MongoRepository`2.Collection
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.Collection
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).Collection
  nameWithType: MongoRepository<TId, TEntity>.Collection
  nameWithType.vb: MongoRepository(Of TId, TEntity).Collection
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.Collection*
  name: Collection
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_Collection_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.Collection
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.Collection
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).Collection
  nameWithType: MongoRepository<TId, TEntity>.Collection
  nameWithType.vb: MongoRepository(Of TId, TEntity).Collection
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: CountAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_CountAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.CountAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).CountAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).CountAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.CountAsync*
  name: CountAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_CountAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.CountAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.CountAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).CountAsync
  nameWithType: MongoRepository<TId, TEntity>.CountAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).CountAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_CreateAsync_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateAsync(SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.CreateAsync(SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).CreateAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).CreateAsync(ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateAsync*
  name: CreateAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_CreateAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.CreateAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).CreateAsync
  nameWithType: MongoRepository<TId, TEntity>.CreateAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).CreateAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name: CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_CreateManyAsync_SparkPlug_Contracts_ICommandRequest__1____System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateManyAsync(SparkPlug.Contracts.ICommandRequest{`1[]},System.Threading.CancellationToken)
  name.vb: CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.CreateManyAsync(SparkPlug.Contracts.ICommandRequest<TEntity[]>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).CreateManyAsync(SparkPlug.Contracts.ICommandRequest(Of TEntity()), System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).CreateManyAsync(ICommandRequest(Of TEntity()), CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateManyAsync*
  name: CreateManyAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_CreateManyAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.CreateManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.CreateManyAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).CreateManyAsync
  nameWithType: MongoRepository<TId, TEntity>.CreateManyAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).CreateManyAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  name: DeleteAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_DeleteAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.DeleteAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.DeleteAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).DeleteAsync(TId, System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).DeleteAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.DeleteAsync*
  name: DeleteAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_DeleteAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.DeleteAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.DeleteAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).DeleteAsync
  nameWithType: MongoRepository<TId, TEntity>.DeleteAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).DeleteAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: FindAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_FindAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.FindAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).FindAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).FindAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.FindAsync*
  name: FindAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_FindAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.FindAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.FindAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).FindAsync
  nameWithType: MongoRepository<TId, TEntity>.FindAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).FindAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetAsync(`0,System.Threading.CancellationToken)
  name: GetAsync(TId, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetAsync__0_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetAsync(`0,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetAsync(TId, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetAsync(TId, System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.GetAsync(TId, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetAsync(TId, CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetAsync*
  name: GetAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetAsync
  nameWithType: MongoRepository<TId, TEntity>.GetAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetByFilter(MongoDB.Driver.FilterDefinition{`1})
  name: GetByFilter(FilterDefinition<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetByFilter_MongoDB_Driver_FilterDefinition__1__
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetByFilter(MongoDB.Driver.FilterDefinition{`1})
  name.vb: GetByFilter(FilterDefinition(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetByFilter(MongoDB.Driver.FilterDefinition<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetByFilter(MongoDB.Driver.FilterDefinition(Of TEntity))
  nameWithType: MongoRepository<TId, TEntity>.GetByFilter(FilterDefinition<TEntity>)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetByFilter(FilterDefinition(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetByFilter*
  name: GetByFilter
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetByFilter_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetByFilter
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetByFilter
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetByFilter
  nameWithType: MongoRepository<TId, TEntity>.GetByFilter
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetByFilter
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamCursor(MongoDB.Driver.ChangeStreamFullDocumentOption)
  name: GetChangeStreamCursor(ChangeStreamFullDocumentOption)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetChangeStreamCursor_MongoDB_Driver_ChangeStreamFullDocumentOption_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamCursor(MongoDB.Driver.ChangeStreamFullDocumentOption)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetChangeStreamCursor(MongoDB.Driver.ChangeStreamFullDocumentOption)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetChangeStreamCursor(MongoDB.Driver.ChangeStreamFullDocumentOption)
  nameWithType: MongoRepository<TId, TEntity>.GetChangeStreamCursor(ChangeStreamFullDocumentOption)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetChangeStreamCursor(ChangeStreamFullDocumentOption)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamCursor*
  name: GetChangeStreamCursor
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetChangeStreamCursor_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamCursor
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetChangeStreamCursor
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetChangeStreamCursor
  nameWithType: MongoRepository<TId, TEntity>.GetChangeStreamCursor
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetChangeStreamCursor
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamOptions(MongoDB.Driver.ChangeStreamFullDocumentOption)
  name: GetChangeStreamOptions(ChangeStreamFullDocumentOption)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetChangeStreamOptions_MongoDB_Driver_ChangeStreamFullDocumentOption_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamOptions(MongoDB.Driver.ChangeStreamFullDocumentOption)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetChangeStreamOptions(MongoDB.Driver.ChangeStreamFullDocumentOption)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetChangeStreamOptions(MongoDB.Driver.ChangeStreamFullDocumentOption)
  nameWithType: MongoRepository<TId, TEntity>.GetChangeStreamOptions(ChangeStreamFullDocumentOption)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetChangeStreamOptions(ChangeStreamFullDocumentOption)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamOptions*
  name: GetChangeStreamOptions
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetChangeStreamOptions_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetChangeStreamOptions
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetChangeStreamOptions
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetChangeStreamOptions
  nameWithType: MongoRepository<TId, TEntity>.GetChangeStreamOptions
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetChangeStreamOptions
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFilterBuilder
  name: GetFilterBuilder()
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetFilterBuilder
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFilterBuilder
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetFilterBuilder()
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetFilterBuilder()
  nameWithType: MongoRepository<TId, TEntity>.GetFilterBuilder()
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetFilterBuilder()
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFilterBuilder*
  name: GetFilterBuilder
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetFilterBuilder_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFilterBuilder
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetFilterBuilder
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetFilterBuilder
  nameWithType: MongoRepository<TId, TEntity>.GetFilterBuilder
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetFilterBuilder
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFindFluent(MongoDB.Driver.ProjectionDefinition{`1},MongoDB.Driver.FilterDefinition{`1},MongoDB.Driver.SortDefinition{`1},SparkPlug.Contracts.IPageContext)
  name: GetFindFluent(ProjectionDefinition<TEntity>?, FilterDefinition<TEntity>?, SortDefinition<TEntity>?, IPageContext?)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetFindFluent_MongoDB_Driver_ProjectionDefinition__1__MongoDB_Driver_FilterDefinition__1__MongoDB_Driver_SortDefinition__1__SparkPlug_Contracts_IPageContext_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFindFluent(MongoDB.Driver.ProjectionDefinition{`1},MongoDB.Driver.FilterDefinition{`1},MongoDB.Driver.SortDefinition{`1},SparkPlug.Contracts.IPageContext)
  name.vb: GetFindFluent(ProjectionDefinition(Of TEntity), FilterDefinition(Of TEntity), SortDefinition(Of TEntity), IPageContext)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetFindFluent(MongoDB.Driver.ProjectionDefinition<TEntity>?, MongoDB.Driver.FilterDefinition<TEntity>?, MongoDB.Driver.SortDefinition<TEntity>?, SparkPlug.Contracts.IPageContext?)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetFindFluent(MongoDB.Driver.ProjectionDefinition(Of TEntity), MongoDB.Driver.FilterDefinition(Of TEntity), MongoDB.Driver.SortDefinition(Of TEntity), SparkPlug.Contracts.IPageContext)
  nameWithType: MongoRepository<TId, TEntity>.GetFindFluent(ProjectionDefinition<TEntity>?, FilterDefinition<TEntity>?, SortDefinition<TEntity>?, IPageContext?)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetFindFluent(ProjectionDefinition(Of TEntity), FilterDefinition(Of TEntity), SortDefinition(Of TEntity), IPageContext)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFindFluent*
  name: GetFindFluent
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetFindFluent_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetFindFluent
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetFindFluent
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetFindFluent
  nameWithType: MongoRepository<TId, TEntity>.GetFindFluent
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetFindFluent
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetIdFilterDefinition(`0)
  name: GetIdFilterDefinition(TId)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetIdFilterDefinition__0_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetIdFilterDefinition(`0)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetIdFilterDefinition(TId)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetIdFilterDefinition(TId)
  nameWithType: MongoRepository<TId, TEntity>.GetIdFilterDefinition(TId)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetIdFilterDefinition(TId)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetIdFilterDefinition*
  name: GetIdFilterDefinition
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetIdFilterDefinition_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetIdFilterDefinition
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetIdFilterDefinition
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetIdFilterDefinition
  nameWithType: MongoRepository<TId, TEntity>.GetIdFilterDefinition
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetIdFilterDefinition
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name: GetManyAsync(TId[], CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetManyAsync__0___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetManyAsync(`0[],System.Threading.CancellationToken)
  name.vb: GetManyAsync(TId(), CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetManyAsync(TId[], System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetManyAsync(TId(), System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetManyAsync(TId(), CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetManyAsync*
  name: GetManyAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetManyAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetManyAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetManyAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetManyAsync
  nameWithType: MongoRepository<TId, TEntity>.GetManyAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetManyAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetPipelineDefinition
  name: GetPipelineDefinition()
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetPipelineDefinition
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetPipelineDefinition
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetPipelineDefinition()
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetPipelineDefinition()
  nameWithType: MongoRepository<TId, TEntity>.GetPipelineDefinition()
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetPipelineDefinition()
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetPipelineDefinition*
  name: GetPipelineDefinition
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetPipelineDefinition_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetPipelineDefinition
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetPipelineDefinition
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetPipelineDefinition
  nameWithType: MongoRepository<TId, TEntity>.GetPipelineDefinition
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetPipelineDefinition
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetProjectionBuilder
  name: GetProjectionBuilder()
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetProjectionBuilder
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetProjectionBuilder
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetProjectionBuilder()
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetProjectionBuilder()
  nameWithType: MongoRepository<TId, TEntity>.GetProjectionBuilder()
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetProjectionBuilder()
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetProjectionBuilder*
  name: GetProjectionBuilder
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetProjectionBuilder_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetProjectionBuilder
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetProjectionBuilder
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetProjectionBuilder
  nameWithType: MongoRepository<TId, TEntity>.GetProjectionBuilder
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetProjectionBuilder
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetQuery(SparkPlug.Contracts.IQueryRequest)
  name: GetQuery(IQueryRequest)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetQuery_SparkPlug_Contracts_IQueryRequest_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetQuery(SparkPlug.Contracts.IQueryRequest)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetQuery(SparkPlug.Contracts.IQueryRequest)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetQuery(SparkPlug.Contracts.IQueryRequest)
  nameWithType: MongoRepository<TId, TEntity>.GetQuery(IQueryRequest)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetQuery(IQueryRequest)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetQuery*
  name: GetQuery
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetQuery_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetQuery
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetQuery
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetQuery
  nameWithType: MongoRepository<TId, TEntity>.GetQuery
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetQuery
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetSortBuilder
  name: GetSortBuilder()
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetSortBuilder
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetSortBuilder
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetSortBuilder()
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetSortBuilder()
  nameWithType: MongoRepository<TId, TEntity>.GetSortBuilder()
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetSortBuilder()
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetSortBuilder*
  name: GetSortBuilder
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetSortBuilder_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetSortBuilder
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetSortBuilder
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetSortBuilder
  nameWithType: MongoRepository<TId, TEntity>.GetSortBuilder
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetSortBuilder
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateBuilder
  name: GetUpdateBuilder()
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetUpdateBuilder
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateBuilder
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetUpdateBuilder()
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetUpdateBuilder()
  nameWithType: MongoRepository<TId, TEntity>.GetUpdateBuilder()
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetUpdateBuilder()
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateBuilder*
  name: GetUpdateBuilder
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetUpdateBuilder_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateBuilder
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetUpdateBuilder
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetUpdateBuilder
  nameWithType: MongoRepository<TId, TEntity>.GetUpdateBuilder
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetUpdateBuilder
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateDef(`1,System.Boolean)
  name: GetUpdateDef(TEntity, bool)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetUpdateDef__1_System_Boolean_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateDef(`1,System.Boolean)
  name.vb: GetUpdateDef(TEntity, Boolean)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetUpdateDef(TEntity, bool)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetUpdateDef(TEntity, Boolean)
  nameWithType: MongoRepository<TId, TEntity>.GetUpdateDef(TEntity, bool)
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetUpdateDef(TEntity, Boolean)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateDef*
  name: GetUpdateDef
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_GetUpdateDef_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.GetUpdateDef
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.GetUpdateDef
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).GetUpdateDef
  nameWithType: MongoRepository<TId, TEntity>.GetUpdateDef
  nameWithType.vb: MongoRepository(Of TId, TEntity).GetUpdateDef
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name: PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_PatchAsync__0_SparkPlug_Contracts_ICommandRequest_Microsoft_AspNetCore_JsonPatch_JsonPatchDocument__1___System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.PatchAsync(`0,SparkPlug.Contracts.ICommandRequest{Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{`1}},System.Threading.CancellationToken)
  name.vb: PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.PatchAsync(TId, SparkPlug.Contracts.ICommandRequest<Microsoft.AspNetCore.JsonPatch.JsonPatchDocument<TEntity>>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).PatchAsync(TId, SparkPlug.Contracts.ICommandRequest(Of Microsoft.AspNetCore.JsonPatch.JsonPatchDocument(Of TEntity)), System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).PatchAsync(TId, ICommandRequest(Of JsonPatchDocument(Of TEntity)), CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.PatchAsync*
  name: PatchAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_PatchAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.PatchAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.PatchAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).PatchAsync
  nameWithType: MongoRepository<TId, TEntity>.PatchAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).PatchAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  name: QueryAsync(IQueryRequest, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_QueryAsync_SparkPlug_Contracts_IQueryRequest_System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.QueryAsync(SparkPlug.Contracts.IQueryRequest,System.Threading.CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).QueryAsync(SparkPlug.Contracts.IQueryRequest, System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).QueryAsync(IQueryRequest, CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.QueryAsync*
  name: QueryAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_QueryAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.QueryAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.QueryAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).QueryAsync
  nameWithType: MongoRepository<TId, TEntity>.QueryAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).QueryAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_ReplaceAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.ReplaceAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).ReplaceAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).ReplaceAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.ReplaceAsync*
  name: ReplaceAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_ReplaceAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.ReplaceAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.ReplaceAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).ReplaceAsync
  nameWithType: MongoRepository<TId, TEntity>.ReplaceAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).ReplaceAsync
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.UpdateAsync(MongoDB.Driver.FilterDefinition{`1},MongoDB.Driver.UpdateDefinition{`1})
  name: UpdateAsync(FilterDefinition<TEntity>, UpdateDefinition<TEntity>)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_UpdateAsync_MongoDB_Driver_FilterDefinition__1__MongoDB_Driver_UpdateDefinition__1__
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.UpdateAsync(MongoDB.Driver.FilterDefinition{`1},MongoDB.Driver.UpdateDefinition{`1})
  name.vb: UpdateAsync(FilterDefinition(Of TEntity), UpdateDefinition(Of TEntity))
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.UpdateAsync(MongoDB.Driver.FilterDefinition<TEntity>, MongoDB.Driver.UpdateDefinition<TEntity>)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).UpdateAsync(MongoDB.Driver.FilterDefinition(Of TEntity), MongoDB.Driver.UpdateDefinition(Of TEntity))
  nameWithType: MongoRepository<TId, TEntity>.UpdateAsync(FilterDefinition<TEntity>, UpdateDefinition<TEntity>)
  nameWithType.vb: MongoRepository(Of TId, TEntity).UpdateAsync(FilterDefinition(Of TEntity), UpdateDefinition(Of TEntity))
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name: UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_UpdateAsync__0_SparkPlug_Contracts_ICommandRequest__1__System_Threading_CancellationToken_
  commentId: M:SparkPlug.Persistence.MongoDb.MongoRepository`2.UpdateAsync(`0,SparkPlug.Contracts.ICommandRequest{`1},System.Threading.CancellationToken)
  name.vb: UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest<TEntity>, System.Threading.CancellationToken)
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).UpdateAsync(TId, SparkPlug.Contracts.ICommandRequest(Of TEntity), System.Threading.CancellationToken)
  nameWithType: MongoRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken)
  nameWithType.vb: MongoRepository(Of TId, TEntity).UpdateAsync(TId, ICommandRequest(Of TEntity), CancellationToken)
- uid: SparkPlug.Persistence.MongoDb.MongoRepository`2.UpdateAsync*
  name: UpdateAsync
  href: api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html#SparkPlug_Persistence_MongoDb_MongoRepository_2_UpdateAsync_
  commentId: Overload:SparkPlug.Persistence.MongoDb.MongoRepository`2.UpdateAsync
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.MongoRepository<TId, TEntity>.UpdateAsync
  fullName.vb: SparkPlug.Persistence.MongoDb.MongoRepository(Of TId, TEntity).UpdateAsync
  nameWithType: MongoRepository<TId, TEntity>.UpdateAsync
  nameWithType.vb: MongoRepository(Of TId, TEntity).UpdateAsync
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule
  name: PersistanceMongoDbModule
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html
  commentId: T:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule
  nameWithType: PersistanceMongoDbModule
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  name: AddModule(IServiceCollection, IConfiguration)
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html#SparkPlug_Persistence_MongoDb_PersistanceMongoDbModule_AddModule_Microsoft_Extensions_DependencyInjection_IServiceCollection_Microsoft_Extensions_Configuration_IConfiguration_
  commentId: M:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.AddModule(Microsoft.Extensions.DependencyInjection.IServiceCollection, Microsoft.Extensions.Configuration.IConfiguration)
  nameWithType: PersistanceMongoDbModule.AddModule(IServiceCollection, IConfiguration)
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.AddModule*
  name: AddModule
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html#SparkPlug_Persistence_MongoDb_PersistanceMongoDbModule_AddModule_
  commentId: Overload:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.AddModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.AddModule
  nameWithType: PersistanceMongoDbModule.AddModule
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  name: UseMiddelwares(IApplicationBuilder)
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html#SparkPlug_Persistence_MongoDb_PersistanceMongoDbModule_UseMiddelwares_Microsoft_AspNetCore_Builder_IApplicationBuilder_
  commentId: M:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseMiddelwares(Microsoft.AspNetCore.Builder.IApplicationBuilder)
  nameWithType: PersistanceMongoDbModule.UseMiddelwares(IApplicationBuilder)
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseMiddelwares*
  name: UseMiddelwares
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html#SparkPlug_Persistence_MongoDb_PersistanceMongoDbModule_UseMiddelwares_
  commentId: Overload:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseMiddelwares
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseMiddelwares
  nameWithType: PersistanceMongoDbModule.UseMiddelwares
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  name: UseModule(IApplicationBuilder, IServiceProvider)
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html#SparkPlug_Persistence_MongoDb_PersistanceMongoDbModule_UseModule_Microsoft_AspNetCore_Builder_IApplicationBuilder_System_IServiceProvider_
  commentId: M:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.IServiceProvider)
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseModule(Microsoft.AspNetCore.Builder.IApplicationBuilder, System.IServiceProvider)
  nameWithType: PersistanceMongoDbModule.UseModule(IApplicationBuilder, IServiceProvider)
- uid: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseModule*
  name: UseModule
  href: api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html#SparkPlug_Persistence_MongoDb_PersistanceMongoDbModule_UseModule_
  commentId: Overload:SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseModule
  isSpec: "True"
  fullName: SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.UseModule
  nameWithType: PersistanceMongoDbModule.UseModule
