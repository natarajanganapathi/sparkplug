{
  "api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html",
    "title": "Class ApiServiceCollectionExtenstions",
    "keywords": "Class ApiServiceCollectionExtenstions Namespace Microsoft.Extensions.DependencyInjection Assembly SparkPlug.Business.Tenancy.Api.dll public static class ApiServiceCollectionExtenstions Inheritance object ApiServiceCollectionExtenstions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTenancyRouteAttribute(IServiceCollection) public static IServiceCollection AddTenancyRouteAttribute(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Microsoft.Extensions.DependencyInjection.SwaggerExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SwaggerExtensions.html",
    "title": "Class SwaggerExtensions",
    "keywords": "Class SwaggerExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly SparkPlug.Api.dll public static class SwaggerExtensions Inheritance object SwaggerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSwagger(IServiceCollection) public static IServiceCollection AddSwagger(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection UseSwaggerApi(IApplicationBuilder) public static void UseSwaggerApi(this IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html",
    "title": "Class TenantResolverMiddlewareExtensions",
    "keywords": "Class TenantResolverMiddlewareExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly SparkPlug.Business.Tenancy.Api.dll public static class TenantResolverMiddlewareExtensions Inheritance object TenantResolverMiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseTenantResolverMiddleware(IApplicationBuilder) public static IApplicationBuilder UseTenantResolverMiddleware(this IApplicationBuilder builder) Parameters builder IApplicationBuilder Returns IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ApiServiceCollectionExtenstions SwaggerExtensions TenantResolverMiddlewareExtensions"
  },
  "api/SparkPlug.Api.ApiExtensions.html": {
    "href": "api/SparkPlug.Api.ApiExtensions.html",
    "title": "Class ApiExtensions",
    "keywords": "Class ApiExtensions Namespace SparkPlug.Api Assembly SparkPlug.Api.dll public static class ApiExtensions Inheritance object ApiExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseCentralRoutePrefix(MvcOptions, IRouteTemplateProvider) public static void UseCentralRoutePrefix(this MvcOptions opts, IRouteTemplateProvider routeAttribute) Parameters opts MvcOptions routeAttribute IRouteTemplateProvider UseGlobalExceptionHandling(IApplicationBuilder) public static IApplicationBuilder UseGlobalExceptionHandling(this IApplicationBuilder builder) Parameters builder IApplicationBuilder Returns IApplicationBuilder UseHealthChecks(IApplicationBuilder) public static void UseHealthChecks(this IApplicationBuilder app) Parameters app IApplicationBuilder UseTransactionMiddleware(IApplicationBuilder) public static IApplicationBuilder UseTransactionMiddleware(this IApplicationBuilder app) Parameters app IApplicationBuilder Returns IApplicationBuilder"
  },
  "api/SparkPlug.Api.ApiModule.html": {
    "href": "api/SparkPlug.Api.ApiModule.html",
    "title": "Class ApiModule",
    "keywords": "Class ApiModule Namespace SparkPlug.Api Assembly SparkPlug.Api.dll public class ApiModule : IModule Inheritance object ApiModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Api.Common.ExceptionWriter.html": {
    "href": "api/SparkPlug.Api.Common.ExceptionWriter.html",
    "title": "Class ExceptionWriter",
    "keywords": "Class ExceptionWriter Namespace SparkPlug.Api.Common Assembly SparkPlug.Api.dll public static class ExceptionWriter Inheritance object ExceptionWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WriteInResponseAsync(HttpContext, Exception) public static ValueTask<bool> WriteInResponseAsync(HttpContext httpContext, Exception exception) Parameters httpContext HttpContext exception Exception Returns ValueTask<bool>"
  },
  "api/SparkPlug.Api.Common.html": {
    "href": "api/SparkPlug.Api.Common.html",
    "title": "Namespace SparkPlug.Api.Common",
    "keywords": "Namespace SparkPlug.Api.Common Classes ExceptionWriter"
  },
  "api/SparkPlug.Api.Configuration.Constants.html": {
    "href": "api/SparkPlug.Api.Configuration.Constants.html",
    "title": "Class Constants",
    "keywords": "Class Constants Namespace SparkPlug.Api.Configuration Assembly SparkPlug.Api.dll public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields JsonContentType public const string JsonContentType = \"application/json; charset=utf-8\" Field Value string Tenant public const string Tenant = \"tenant\" Field Value string XTraceId public const string XTraceId = \"X-Trace-Id\" Field Value string"
  },
  "api/SparkPlug.Api.Configuration.SlidingExpiration.html": {
    "href": "api/SparkPlug.Api.Configuration.SlidingExpiration.html",
    "title": "Class SlidingExpiration",
    "keywords": "Class SlidingExpiration Namespace SparkPlug.Api.Configuration Assembly SparkPlug.Api.dll public class SlidingExpiration Inheritance object SlidingExpiration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SlidingExpiration() public SlidingExpiration() Properties TenantCacheInfo public int TenantCacheInfo { get; set; } Property Value int"
  },
  "api/SparkPlug.Api.Configuration.WebApiOptions.html": {
    "href": "api/SparkPlug.Api.Configuration.WebApiOptions.html",
    "title": "Class WebApiOptions",
    "keywords": "Class WebApiOptions Namespace SparkPlug.Api.Configuration Assembly SparkPlug.Api.dll public class WebApiOptions Inheritance object WebApiOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors WebApiOptions() public WebApiOptions() Fields ConfigPath public const string ConfigPath = \"SparkPlug:Api\" Field Value string Properties ApplicationName [Required] public string ApplicationName { get; set; } Property Value string CacheDuration public SlidingExpiration CacheDuration { get; set; } Property Value SlidingExpiration IsMultiTenant public bool IsMultiTenant { get; set; } Property Value bool"
  },
  "api/SparkPlug.Api.Configuration.html": {
    "href": "api/SparkPlug.Api.Configuration.html",
    "title": "Namespace SparkPlug.Api.Configuration",
    "keywords": "Namespace SparkPlug.Api.Configuration Classes Constants SlidingExpiration WebApiOptions"
  },
  "api/SparkPlug.Api.Controllers.ApiAttribute.html": {
    "href": "api/SparkPlug.Api.Controllers.ApiAttribute.html",
    "title": "Class ApiAttribute",
    "keywords": "Class ApiAttribute Namespace SparkPlug.Api.Controllers Assembly SparkPlug.Api.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class ApiAttribute : Attribute Inheritance object Attribute ApiAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors ApiAttribute(string) public ApiAttribute(string route) Parameters route string ApiAttribute(string, Type) public ApiAttribute(string route, Type genericControllerType) Parameters route string genericControllerType Type Properties Route public string Route { get; set; } Property Value string Type public Type? Type { get; set; } Property Value Type"
  },
  "api/SparkPlug.Api.Controllers.ApiController-2.html": {
    "href": "api/SparkPlug.Api.Controllers.ApiController-2.html",
    "title": "Class ApiController<TId, TEntity>",
    "keywords": "Class ApiController<TId, TEntity> Namespace SparkPlug.Api.Controllers Assembly SparkPlug.Api.dll [ApiExplorerSettings(GroupName = \"Template\")] public abstract class ApiController<TId, TEntity> : BaseController<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object ControllerBase BaseController<TId, TEntity> ApiController<TId, TEntity> Derived MenuController TenantDetailsController Inherited Members BaseController<TId, TEntity>.Service BaseController<TId, TEntity>.Logger BaseController<TId, TEntity>.GetService<TService>() BaseController<TId, TEntity>.Ok(IEnumerable<TEntity>, IPageContext) BaseController<TId, TEntity>.Ok(IEnumerable<JObject>, IPageContext) BaseController<TId, TEntity>.Ok(TEntity) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors ApiController(IServiceProvider) protected ApiController(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods DeleteAsync(TId, CancellationToken) [HttpDelete(\"{id}\")] public Task<IActionResult> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters id TId cancellationToken CancellationToken Returns Task<IActionResult> GetAsync(TId, CancellationToken) [HttpGet(\"{id}\")] public Task<IActionResult> GetAsync(TId id, CancellationToken cancellationToken) Parameters id TId cancellationToken CancellationToken Returns Task<IActionResult> ListAsync(int?, int?, CancellationToken) [HttpGet] public Task<IActionResult> ListAsync(int? pageNo, int? pageSize, CancellationToken cancellationToken) Parameters pageNo int? pageSize int? cancellationToken CancellationToken Returns Task<IActionResult> PatchAsync(TId, CommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) [HttpPatch(\"{id}\")] public Task<IActionResult> PatchAsync(TId id, CommandRequest<JsonPatchDocument<TEntity>> rec, CancellationToken cancellationToken) Parameters id TId rec CommandRequest<JsonPatchDocument<TEntity>> cancellationToken CancellationToken Returns Task<IActionResult> PostAsync(CommandRequest<TEntity>, CancellationToken) [HttpPost] public Task<IActionResult> PostAsync(CommandRequest<TEntity> rec, CancellationToken cancellationToken) Parameters rec CommandRequest<TEntity> cancellationToken CancellationToken Returns Task<IActionResult> PutAsync(TId, CommandRequest<TEntity>, CancellationToken) [HttpPut(\"{id}\")] public Task<IActionResult> PutAsync(TId id, CommandRequest<TEntity> rec, CancellationToken cancellationToken) Parameters id TId rec CommandRequest<TEntity> cancellationToken CancellationToken Returns Task<IActionResult> QueryAsync(QueryRequest, CancellationToken) [HttpPost(\"search\")] public Task<IActionResult> QueryAsync(QueryRequest request, CancellationToken cancellationToken) Parameters request QueryRequest cancellationToken CancellationToken Returns Task<IActionResult>"
  },
  "api/SparkPlug.Api.Controllers.BaseController-2.html": {
    "href": "api/SparkPlug.Api.Controllers.BaseController-2.html",
    "title": "Class BaseController<TId, TEntity>",
    "keywords": "Class BaseController<TId, TEntity> Namespace SparkPlug.Api.Controllers Assembly SparkPlug.Api.dll public abstract class BaseController<TId, TEntity> : ControllerBase where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object ControllerBase BaseController<TId, TEntity> Derived ApiController<TId, TEntity> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors BaseController(IServiceProvider) protected BaseController(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Fields Logger protected readonly ILogger<BaseController<TId, TEntity>> Logger Field Value ILogger<BaseController<TId, TEntity>> Service protected readonly BaseService<TId, TEntity> Service Field Value BaseService<TId, TEntity> Methods GetService<TService>() public TService GetService<TService>() where TService : class Returns TService Type Parameters TService Ok(IEnumerable<JObject>, IPageContext?) [NonAction] public OkObjectResult Ok(IEnumerable<JObject> data, IPageContext? pagecontext) Parameters data IEnumerable<JObject> pagecontext IPageContext Returns OkObjectResult Ok(IEnumerable<TEntity>?, IPageContext?) [NonAction] public OkObjectResult Ok(IEnumerable<TEntity>? data, IPageContext? pagecontext) Parameters data IEnumerable<TEntity> pagecontext IPageContext Returns OkObjectResult Ok(TEntity) [NonAction] public OkObjectResult Ok(TEntity data) Parameters data TEntity Returns OkObjectResult"
  },
  "api/SparkPlug.Api.Controllers.CompositeController.html": {
    "href": "api/SparkPlug.Api.Controllers.CompositeController.html",
    "title": "Class CompositeController",
    "keywords": "Class CompositeController Namespace SparkPlug.Api.Controllers Assembly SparkPlug.Api.dll [ApiController] [Route(\"composite\")] [ApiExplorerSettings(GroupName = \"v1\")] public class CompositeController : ControllerBase Inheritance object ControllerBase CompositeController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors CompositeController(IHttpClientFactory) public CompositeController(IHttpClientFactory httpClientFactory) Parameters httpClientFactory IHttpClientFactory Methods Search(CompositeRequest, CancellationToken) [HttpPost(\"search\")] public Task<IActionResult> Search(CompositeRequest request, CancellationToken cancellationToken) Parameters request CompositeRequest cancellationToken CancellationToken Returns Task<IActionResult>"
  },
  "api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html": {
    "href": "api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html",
    "title": "Class GenericControllerRouteConvention",
    "keywords": "Class GenericControllerRouteConvention Namespace SparkPlug.Api.Controllers Assembly SparkPlug.Api.dll public class GenericControllerRouteConvention : IControllerModelConvention Inheritance object GenericControllerRouteConvention Implements IControllerModelConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors GenericControllerRouteConvention(IRouteTemplateProvider?) public GenericControllerRouteConvention(IRouteTemplateProvider? routeTemplateProvider) Parameters routeTemplateProvider IRouteTemplateProvider Methods Apply(ControllerModel) Called to apply the convention to the ControllerModel. public void Apply(ControllerModel controller) Parameters controller ControllerModel The ControllerModel."
  },
  "api/SparkPlug.Api.Controllers.RouteConvention.html": {
    "href": "api/SparkPlug.Api.Controllers.RouteConvention.html",
    "title": "Class RouteConvention",
    "keywords": "Class RouteConvention Namespace SparkPlug.Api.Controllers Assembly SparkPlug.Api.dll public class RouteConvention : IApplicationModelConvention Inheritance object RouteConvention Implements IApplicationModelConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors RouteConvention(IRouteTemplateProvider) public RouteConvention(IRouteTemplateProvider routeTemplateProvider) Parameters routeTemplateProvider IRouteTemplateProvider Methods Apply(ApplicationModel) Called to apply the convention to the ApplicationModel. public void Apply(ApplicationModel application) Parameters application ApplicationModel The ApplicationModel. IsMultiTenant(Type?) public static bool IsMultiTenant(Type? type) Parameters type Type Returns bool"
  },
  "api/SparkPlug.Api.Controllers.html": {
    "href": "api/SparkPlug.Api.Controllers.html",
    "title": "Namespace SparkPlug.Api.Controllers",
    "keywords": "Namespace SparkPlug.Api.Controllers Classes ApiAttribute ApiController<TId, TEntity> BaseController<TId, TEntity> CompositeController GenericControllerRouteConvention RouteConvention"
  },
  "api/SparkPlug.Api.Filter.ApiExceptionFilterAttribute.html": {
    "href": "api/SparkPlug.Api.Filter.ApiExceptionFilterAttribute.html",
    "title": "Class ApiExceptionFilterAttribute",
    "keywords": "Class ApiExceptionFilterAttribute Namespace SparkPlug.Api.Filter Assembly SparkPlug.Api.dll public class ApiExceptionFilterAttribute : ExceptionFilterAttribute, IAsyncExceptionFilter, IExceptionFilter, IOrderedFilter, IFilterMetadata Inheritance object Attribute ExceptionFilterAttribute ApiExceptionFilterAttribute Implements IAsyncExceptionFilter IExceptionFilter IOrderedFilter IFilterMetadata Inherited Members ExceptionFilterAttribute.OnExceptionAsync(ExceptionContext) ExceptionFilterAttribute.Order Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods OnException(ExceptionContext) Called after an action has thrown an Exception. public override void OnException(ExceptionContext exceptionContext) Parameters exceptionContext ExceptionContext"
  },
  "api/SparkPlug.Api.Filter.html": {
    "href": "api/SparkPlug.Api.Filter.html",
    "title": "Namespace SparkPlug.Api.Filter",
    "keywords": "Namespace SparkPlug.Api.Filter Classes ApiExceptionFilterAttribute"
  },
  "api/SparkPlug.Api.Handler.GlobalExceptionHandler.html": {
    "href": "api/SparkPlug.Api.Handler.GlobalExceptionHandler.html",
    "title": "Class GlobalExceptionHandler",
    "keywords": "Class GlobalExceptionHandler Namespace SparkPlug.Api.Handler Assembly SparkPlug.Api.dll public class GlobalExceptionHandler : IExceptionHandler Inheritance object GlobalExceptionHandler Implements IExceptionHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods TryHandleAsync(HttpContext, Exception, CancellationToken) Tries to handle the specified exception asynchronously within the ASP.NET Core pipeline. Implementations of this method can provide custom exception-handling logic for different scenarios. public ValueTask<bool> TryHandleAsync(HttpContext httpContext, Exception exception, CancellationToken cancellationToken) Parameters httpContext HttpContext The HttpContext for the request. exception Exception The unhandled exception. cancellationToken CancellationToken The cancellation token. Returns ValueTask<bool> A task that represents the asynchronous read operation. The value of its Result property contains the result of the handling operation. true if the exception was handled successfully; otherwise false."
  },
  "api/SparkPlug.Api.Handler.html": {
    "href": "api/SparkPlug.Api.Handler.html",
    "title": "Namespace SparkPlug.Api.Handler",
    "keywords": "Namespace SparkPlug.Api.Handler Classes GlobalExceptionHandler"
  },
  "api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html": {
    "href": "api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html",
    "title": "Class GlobalExceptionHandlingMiddleware",
    "keywords": "Class GlobalExceptionHandlingMiddleware Namespace SparkPlug.Api.Middleware Assembly SparkPlug.Api.dll public class GlobalExceptionHandlingMiddleware Inheritance object GlobalExceptionHandlingMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors GlobalExceptionHandlingMiddleware(RequestDelegate) public GlobalExceptionHandlingMiddleware(RequestDelegate next) Parameters next RequestDelegate Methods InvokeAsync(HttpContext) public Task InvokeAsync(HttpContext httpContext) Parameters httpContext HttpContext Returns Task"
  },
  "api/SparkPlug.Api.Middleware.TransactionMiddleware.html": {
    "href": "api/SparkPlug.Api.Middleware.TransactionMiddleware.html",
    "title": "Class TransactionMiddleware",
    "keywords": "Class TransactionMiddleware Namespace SparkPlug.Api.Middleware Assembly SparkPlug.Api.dll public class TransactionMiddleware Inheritance object TransactionMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TransactionMiddleware(RequestDelegate) public TransactionMiddleware(RequestDelegate next) Parameters next RequestDelegate Methods InvokeAsync(HttpContext) public Task InvokeAsync(HttpContext context) Parameters context HttpContext Returns Task"
  },
  "api/SparkPlug.Api.Middleware.html": {
    "href": "api/SparkPlug.Api.Middleware.html",
    "title": "Namespace SparkPlug.Api.Middleware",
    "keywords": "Namespace SparkPlug.Api.Middleware Classes GlobalExceptionHandlingMiddleware TransactionMiddleware"
  },
  "api/SparkPlug.Api.SwaggerModule.html": {
    "href": "api/SparkPlug.Api.SwaggerModule.html",
    "title": "Class SwaggerModule",
    "keywords": "Class SwaggerModule Namespace SparkPlug.Api Assembly SparkPlug.Api.dll public class SwaggerModule : IModule Inheritance object SwaggerModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Api.html": {
    "href": "api/SparkPlug.Api.html",
    "title": "Namespace SparkPlug.Api",
    "keywords": "Namespace SparkPlug.Api Classes ApiExtensions ApiModule SwaggerModule"
  },
  "api/SparkPlug.Business.Menu.Api.MenuApiModule.html": {
    "href": "api/SparkPlug.Business.Menu.Api.MenuApiModule.html",
    "title": "Class MenuApiModule",
    "keywords": "Class MenuApiModule Namespace SparkPlug.Business.Menu.Api Assembly SparkPlug.Business.Menu.Api.dll public class MenuApiModule : IModule Inheritance object MenuApiModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Menu.Api.MenuController.html": {
    "href": "api/SparkPlug.Business.Menu.Api.MenuController.html",
    "title": "Class MenuController",
    "keywords": "Class MenuController Namespace SparkPlug.Business.Menu.Api Assembly SparkPlug.Business.Menu.Api.dll [ApiController] [Route(\"menu\")] public class MenuController : ApiController<long, MenuItem> Inheritance object ControllerBase BaseController<long, MenuItem> ApiController<long, MenuItem> MenuController Inherited Members ApiController<long, MenuItem>.ListAsync(int?, int?, CancellationToken) ApiController<long, MenuItem>.QueryAsync(QueryRequest, CancellationToken) ApiController<long, MenuItem>.PostAsync(CommandRequest<MenuItem>, CancellationToken) ApiController<long, MenuItem>.GetAsync(long, CancellationToken) ApiController<long, MenuItem>.PutAsync(long, CommandRequest<MenuItem>, CancellationToken) ApiController<long, MenuItem>.PatchAsync(long, CommandRequest<JsonPatchDocument<MenuItem>>, CancellationToken) ApiController<long, MenuItem>.DeleteAsync(long, CancellationToken) BaseController<long, MenuItem>.Service BaseController<long, MenuItem>.Logger BaseController<long, MenuItem>.GetService<TService>() BaseController<long, MenuItem>.Ok(IEnumerable<MenuItem>, IPageContext) BaseController<long, MenuItem>.Ok(IEnumerable<JObject>, IPageContext) BaseController<long, MenuItem>.Ok(MenuItem) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MenuController(IServiceProvider) public MenuController(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider"
  },
  "api/SparkPlug.Business.Menu.Api.html": {
    "href": "api/SparkPlug.Business.Menu.Api.html",
    "title": "Namespace SparkPlug.Business.Menu.Api",
    "keywords": "Namespace SparkPlug.Business.Menu.Api Classes MenuApiModule MenuController"
  },
  "api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html": {
    "href": "api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html",
    "title": "Class MenuDomainModule",
    "keywords": "Class MenuDomainModule Namespace SparkPlug.Business.Menu.Domain Assembly SparkPlug.Business.Menu.Domain.dll public class MenuDomainModule : IModule Inheritance object MenuDomainModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Menu.Domain.MenuItem.html": {
    "href": "api/SparkPlug.Business.Menu.Domain.MenuItem.html",
    "title": "Class MenuItem",
    "keywords": "Class MenuItem Namespace SparkPlug.Business.Menu.Domain Assembly SparkPlug.Business.Menu.Domain.dll public class MenuItem : IBaseEntity<long>, IConcurrencyEntity, IAuditableEntity<long>, IDeletableEntity Inheritance object MenuItem Implements IBaseEntity<long> IConcurrencyEntity IAuditableEntity<long> IDeletableEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy public long CreatedBy { get; set; } Property Value long DisplayOrder public int DisplayOrder { get; set; } Property Value int IconRef public string? IconRef { get; set; } Property Value string Id public long Id { get; set; } Property Value long Label public string? Label { get; set; } Property Value string MenuCode public string? MenuCode { get; set; } Property Value string MenuPosition public string? MenuPosition { get; set; } Property Value string MenuType public string? MenuType { get; set; } Property Value string ModifiedAt public DateTime ModifiedAt { get; set; } Property Value DateTime ModifiedBy public long ModifiedBy { get; set; } Property Value long ModuleCode public string? ModuleCode { get; set; } Property Value string ModuleId public long? ModuleId { get; set; } Property Value long? ParentMenuCode public string? ParentMenuCode { get; set; } Property Value string ParentMenuId public long? ParentMenuId { get; set; } Property Value long? Revision [ConcurrencyCheck] public int Revision { get; set; } Property Value int SRef public string? SRef { get; set; } Property Value string Status public Status Status { get; set; } Property Value Status"
  },
  "api/SparkPlug.Business.Menu.Domain.html": {
    "href": "api/SparkPlug.Business.Menu.Domain.html",
    "title": "Namespace SparkPlug.Business.Menu.Domain",
    "keywords": "Namespace SparkPlug.Business.Menu.Domain Classes MenuDomainModule MenuItem"
  },
  "api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html",
    "title": "Class MenuRepositorySqlModule",
    "keywords": "Class MenuRepositorySqlModule Namespace SparkPlug.Business.Menu.Repository Assembly SparkPlug.Business.Menu.Repository.Sql.dll public class MenuRepositorySqlModule : IModule Inheritance object MenuRepositorySqlModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html",
    "title": "Class MenuItemConfiguration",
    "keywords": "Class MenuItemConfiguration Namespace SparkPlug.Business.Menu.Repository.Sql Assembly SparkPlug.Business.Menu.Repository.Sql.dll public class MenuItemConfiguration : IEntityTypeConfiguration<MenuItem> Inheritance object MenuItemConfiguration Implements IEntityTypeConfiguration<MenuItem> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure(EntityTypeBuilder<MenuItem>) Configures the entity of type MenuItem. public void Configure(EntityTypeBuilder<MenuItem> builder) Parameters builder EntityTypeBuilder<MenuItem> The builder to be used to configure the entity type."
  },
  "api/SparkPlug.Business.Menu.Repository.Sql.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.Sql.html",
    "title": "Namespace SparkPlug.Business.Menu.Repository.Sql",
    "keywords": "Namespace SparkPlug.Business.Menu.Repository.Sql Classes MenuItemConfiguration"
  },
  "api/SparkPlug.Business.Menu.Repository.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.html",
    "title": "Namespace SparkPlug.Business.Menu.Repository",
    "keywords": "Namespace SparkPlug.Business.Menu.Repository Classes MenuRepositorySqlModule"
  },
  "api/SparkPlug.Business.Menu.Service.MenuService.html": {
    "href": "api/SparkPlug.Business.Menu.Service.MenuService.html",
    "title": "Class MenuService",
    "keywords": "Class MenuService Namespace SparkPlug.Business.Menu.Service Assembly SparkPlug.Business.Menu.Service.dll public class MenuService : BaseService<long, MenuItem> Inheritance object BaseService<long, MenuItem> MenuService Inherited Members BaseService<long, MenuItem>.GetRepository() BaseService<long, MenuItem>.GetService<TService>() BaseService<long, MenuItem>.CreateAsync(ICommandRequest<MenuItem>, CancellationToken) BaseService<long, MenuItem>.CreateManyAsync(ICommandRequest<MenuItem[]>, CancellationToken) BaseService<long, MenuItem>.DeleteAsync(long, CancellationToken) BaseService<long, MenuItem>.GetAsync(long, CancellationToken) BaseService<long, MenuItem>.CountAsync(IQueryRequest, CancellationToken) BaseService<long, MenuItem>.GetManyAsync(long[], CancellationToken) BaseService<long, MenuItem>.FindAsync(IQueryRequest, CancellationToken) BaseService<long, MenuItem>.QueryAsync(IQueryRequest, CancellationToken) BaseService<long, MenuItem>.PatchAsync(long, ICommandRequest<JsonPatchDocument<MenuItem>>, CancellationToken) BaseService<long, MenuItem>.ReplaceAsync(long, ICommandRequest<MenuItem>, CancellationToken) BaseService<long, MenuItem>.UpdateAsync(long, ICommandRequest<MenuItem>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MenuService(IServiceProvider) public MenuService(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider"
  },
  "api/SparkPlug.Business.Menu.Service.MenuServiceModule.html": {
    "href": "api/SparkPlug.Business.Menu.Service.MenuServiceModule.html",
    "title": "Class MenuServiceModule",
    "keywords": "Class MenuServiceModule Namespace SparkPlug.Business.Menu.Service Assembly SparkPlug.Business.Menu.Service.dll public class MenuServiceModule : IModule Inheritance object MenuServiceModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Menu.Service.html": {
    "href": "api/SparkPlug.Business.Menu.Service.html",
    "title": "Namespace SparkPlug.Business.Menu.Service",
    "keywords": "Namespace SparkPlug.Business.Menu.Service Classes MenuService MenuServiceModule"
  },
  "api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html",
    "title": "Class TenancyApiModule",
    "keywords": "Class TenancyApiModule Namespace SparkPlug.Business.Tenancy.Api Assembly SparkPlug.Business.Tenancy.Api.dll public class TenancyApiModule : IModule Inheritance object TenancyApiModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html": {
    "href": "api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html",
    "title": "Class TenantDetailsController",
    "keywords": "Class TenantDetailsController Namespace SparkPlug.Business.Tenancy.Api Assembly SparkPlug.Business.Tenancy.Api.dll [ApiController] [Route(\"tenant-details\")] public class TenantDetailsController : ApiController<long, TenantDetails> Inheritance object ControllerBase BaseController<long, TenantDetails> ApiController<long, TenantDetails> TenantDetailsController Inherited Members ApiController<long, TenantDetails>.ListAsync(int?, int?, CancellationToken) ApiController<long, TenantDetails>.QueryAsync(QueryRequest, CancellationToken) ApiController<long, TenantDetails>.PostAsync(CommandRequest<TenantDetails>, CancellationToken) ApiController<long, TenantDetails>.GetAsync(long, CancellationToken) ApiController<long, TenantDetails>.PutAsync(long, CommandRequest<TenantDetails>, CancellationToken) ApiController<long, TenantDetails>.PatchAsync(long, CommandRequest<JsonPatchDocument<TenantDetails>>, CancellationToken) ApiController<long, TenantDetails>.DeleteAsync(long, CancellationToken) BaseController<long, TenantDetails>.Service BaseController<long, TenantDetails>.Logger BaseController<long, TenantDetails>.GetService<TService>() BaseController<long, TenantDetails>.Ok(IEnumerable<TenantDetails>, IPageContext) BaseController<long, TenantDetails>.Ok(IEnumerable<JObject>, IPageContext) BaseController<long, TenantDetails>.Ok(TenantDetails) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantDetailsController(IServiceProvider) public TenantDetailsController(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider"
  },
  "api/SparkPlug.Business.Tenancy.Api.html": {
    "href": "api/SparkPlug.Business.Tenancy.Api.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Api",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Api Classes TenancyApiModule TenantDetailsController"
  },
  "api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html",
    "title": "Class TenancyDomainModule",
    "keywords": "Class TenancyDomainModule Namespace SparkPlug.Business.Tenancy.Domain Assembly SparkPlug.Business.Tenancy.Domain.dll public class TenancyDomainModule : IModule Inheritance object TenancyDomainModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html",
    "title": "Class TenantDetails",
    "keywords": "Class TenantDetails Namespace SparkPlug.Business.Tenancy.Domain Assembly SparkPlug.Business.Tenancy.Domain.dll public class TenantDetails : IBaseEntity<long>, IConcurrencyEntity, IAuditableEntity<long>, IDeletableEntity Inheritance object TenantDetails Implements IBaseEntity<long> IConcurrencyEntity IAuditableEntity<long> IDeletableEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy public long CreatedBy { get; set; } Property Value long Id public long Id { get; set; } Property Value long ModifiedAt public DateTime ModifiedAt { get; set; } Property Value DateTime ModifiedBy public long ModifiedBy { get; set; } Property Value long Name public string? Name { get; set; } Property Value string Options public List<TenantOption> Options { get; set; } Property Value List<TenantOption> Revision [ConcurrencyCheck] public int Revision { get; set; } Property Value int Status public Status Status { get; set; } Property Value Status TenantId public Guid TenantId { get; set; } Property Value Guid"
  },
  "api/SparkPlug.Business.Tenancy.Domain.TenantOption.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.TenantOption.html",
    "title": "Class TenantOption",
    "keywords": "Class TenantOption Namespace SparkPlug.Business.Tenancy.Domain Assembly SparkPlug.Business.Tenancy.Domain.dll public class TenantOption : IBaseEntity<long>, IConcurrencyEntity, IAuditableEntity<long>, IDeletableEntity Inheritance object TenantOption Implements IBaseEntity<long> IConcurrencyEntity IAuditableEntity<long> IDeletableEntity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties CreatedAt public DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy public long CreatedBy { get; set; } Property Value long Id public long Id { get; set; } Property Value long Key public string Key { get; set; } Property Value string ModifiedAt public DateTime ModifiedAt { get; set; } Property Value DateTime ModifiedBy public long ModifiedBy { get; set; } Property Value long Revision [ConcurrencyCheck] public int Revision { get; set; } Property Value int Status public Status Status { get; set; } Property Value Status Tenant [JsonIgnore] public TenantDetails Tenant { get; set; } Property Value TenantDetails TenantDetailId public long TenantDetailId { get; set; } Property Value long Value public string? Value { get; set; } Property Value string"
  },
  "api/SparkPlug.Business.Tenancy.Domain.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Domain",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Domain Classes TenancyDomainModule TenantDetails TenantOption"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html",
    "title": "Class TenancyRepositoryMongoModule",
    "keywords": "Class TenancyRepositoryMongoModule Namespace SparkPlug.Business.Tenancy.Repository.Mongo Assembly SparkPlug.Business.Tenancy.Repository.Mongo.dll public class TenancyRepositoryMongoModule : IModule Inheritance object TenancyRepositoryMongoModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Mongo.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Mongo.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Repository.Mongo",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Repository.Mongo Classes TenancyRepositoryMongoModule"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html",
    "title": "Class TenancyRepositorySqlModule",
    "keywords": "Class TenancyRepositorySqlModule Namespace SparkPlug.Business.Tenancy.Repository.Sql Assembly SparkPlug.Business.Tenancy.Repository.Sql.dll public class TenancyRepositorySqlModule : IModule Inheritance object TenancyRepositorySqlModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html",
    "title": "Class TenantDetailsConfiguration",
    "keywords": "Class TenantDetailsConfiguration Namespace SparkPlug.Business.Tenancy.Repository.Sql Assembly SparkPlug.Business.Tenancy.Repository.Sql.dll public class TenantDetailsConfiguration : IEntityTypeConfiguration<TenantDetails> Inheritance object TenantDetailsConfiguration Implements IEntityTypeConfiguration<TenantDetails> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure(EntityTypeBuilder<TenantDetails>) Configures the entity of type TenantDetails. public void Configure(EntityTypeBuilder<TenantDetails> builder) Parameters builder EntityTypeBuilder<TenantDetails> The builder to be used to configure the entity type."
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html",
    "title": "Class TenantOptionConfiguration",
    "keywords": "Class TenantOptionConfiguration Namespace SparkPlug.Business.Tenancy.Repository.Sql Assembly SparkPlug.Business.Tenancy.Repository.Sql.dll public class TenantOptionConfiguration : IEntityTypeConfiguration<TenantOption> Inheritance object TenantOptionConfiguration Implements IEntityTypeConfiguration<TenantOption> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure(EntityTypeBuilder<TenantOption>) Configures the entity of type TenantOption. public void Configure(EntityTypeBuilder<TenantOption> builder) Parameters builder EntityTypeBuilder<TenantOption> The builder to be used to configure the entity type."
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Repository.Sql",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Repository.Sql Classes TenancyRepositorySqlModule TenantDetailsConfiguration TenantOptionConfiguration"
  },
  "api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html",
    "title": "Interface ITenantResolver",
    "keywords": "Interface ITenantResolver Namespace SparkPlug.Business.Tenancy.Service Assembly SparkPlug.Business.Tenancy.Service.dll public interface ITenantResolver Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods GetAllTenantsAsync(CancellationToken) Task<IEnumerable<ITenant>> GetAllTenantsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<IEnumerable<ITenant>> ResolveAsync(string?, CancellationToken) Task<ITenant> ResolveAsync(string? id, CancellationToken cancellationToken = default) Parameters id string cancellationToken CancellationToken Returns Task<ITenant>"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html",
    "title": "Class TenancyServiceModule",
    "keywords": "Class TenancyServiceModule Namespace SparkPlug.Business.Tenancy.Service Assembly SparkPlug.Business.Tenancy.Service.dll public class TenancyServiceModule : IModule Inheritance object TenancyServiceModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Business.Tenancy.Service.Tenant.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.Tenant.html",
    "title": "Class Tenant",
    "keywords": "Class Tenant Namespace SparkPlug.Business.Tenancy.Service Assembly SparkPlug.Business.Tenancy.Service.dll public class Tenant : ITenant Inheritance object Tenant Implements ITenant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Default public static ITenant Default { get; } Property Value ITenant Id public string? Id { get; set; } Property Value string Name public string? Name { get; set; } Property Value string Options public IDictionary<string, string?> Options { get; set; } Property Value IDictionary<string, string>"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html",
    "title": "Class TenantResolverMiddleware",
    "keywords": "Class TenantResolverMiddleware Namespace SparkPlug.Business.Tenancy.Service Assembly SparkPlug.Business.Tenancy.Service.dll public class TenantResolverMiddleware Inheritance object TenantResolverMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantResolverMiddleware(RequestDelegate, IServiceProvider) public TenantResolverMiddleware(RequestDelegate next, IServiceProvider serviceProvider) Parameters next RequestDelegate serviceProvider IServiceProvider Methods InvokeAsync(HttpContext, ITenantResolver) public Task InvokeAsync(HttpContext httpContext, ITenantResolver tenantResolver) Parameters httpContext HttpContext tenantResolver ITenantResolver Returns Task"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenantService.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenantService.html",
    "title": "Class TenantService",
    "keywords": "Class TenantService Namespace SparkPlug.Business.Tenancy.Service Assembly SparkPlug.Business.Tenancy.Service.dll public class TenantService : BaseService<long, TenantDetails>, ITenantResolver Inheritance object BaseService<long, TenantDetails> TenantService Implements ITenantResolver Inherited Members BaseService<long, TenantDetails>.GetRepository() BaseService<long, TenantDetails>.GetService<TService>() BaseService<long, TenantDetails>.CreateAsync(ICommandRequest<TenantDetails>, CancellationToken) BaseService<long, TenantDetails>.CreateManyAsync(ICommandRequest<TenantDetails[]>, CancellationToken) BaseService<long, TenantDetails>.DeleteAsync(long, CancellationToken) BaseService<long, TenantDetails>.GetAsync(long, CancellationToken) BaseService<long, TenantDetails>.CountAsync(IQueryRequest, CancellationToken) BaseService<long, TenantDetails>.GetManyAsync(long[], CancellationToken) BaseService<long, TenantDetails>.FindAsync(IQueryRequest, CancellationToken) BaseService<long, TenantDetails>.QueryAsync(IQueryRequest, CancellationToken) BaseService<long, TenantDetails>.PatchAsync(long, ICommandRequest<JsonPatchDocument<TenantDetails>>, CancellationToken) BaseService<long, TenantDetails>.ReplaceAsync(long, ICommandRequest<TenantDetails>, CancellationToken) BaseService<long, TenantDetails>.UpdateAsync(long, ICommandRequest<TenantDetails>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantService(IServiceProvider) public TenantService(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods GetAllTenantsAsync(CancellationToken) public Task<IEnumerable<ITenant>> GetAllTenantsAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<IEnumerable<ITenant>> GetByTenantId(string?, CancellationToken) public Task<Tenant> GetByTenantId(string? id, CancellationToken cancellationToken = default) Parameters id string cancellationToken CancellationToken Returns Task<Tenant> ResolveAsync(string?, CancellationToken) public Task<ITenant> ResolveAsync(string? id, CancellationToken cancellationToken = default) Parameters id string cancellationToken CancellationToken Returns Task<ITenant>"
  },
  "api/SparkPlug.Business.Tenancy.Service.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Service",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Service Classes TenancyServiceModule Tenant TenantResolverMiddleware TenantService Interfaces ITenantResolver"
  },
  "api/SparkPlug.Contracts.ApiRequest.html": {
    "href": "api/SparkPlug.Contracts.ApiRequest.html",
    "title": "Class ApiRequest",
    "keywords": "Class ApiRequest Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public abstract class ApiRequest : IApiRequest Inheritance object ApiRequest Implements IApiRequest Derived CommandRequest<TEntity> CompositeRequest QueryRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extensions.AddDependency(IApiRequest, params string[]) Properties Deps public string[]? Deps { get; set; } Property Value string[]"
  },
  "api/SparkPlug.Contracts.ApiResponse.html": {
    "href": "api/SparkPlug.Contracts.ApiResponse.html",
    "title": "Class ApiResponse",
    "keywords": "Class ApiResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public abstract record ApiResponse : IApiResponse, IEquatable<ApiResponse> Inheritance object ApiResponse Implements IApiResponse IEquatable<ApiResponse> Derived CommandResponse CompositeResponse ErrorResponse QueryResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.CommandRequest-1.html": {
    "href": "api/SparkPlug.Contracts.CommandRequest-1.html",
    "title": "Class CommandRequest<TEntity>",
    "keywords": "Class CommandRequest<TEntity> Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class CommandRequest<TEntity> : ApiRequest, ICommandRequest<TEntity>, IApiRequest Type Parameters TEntity Inheritance object ApiRequest CommandRequest<TEntity> Implements ICommandRequest<TEntity> IApiRequest Inherited Members ApiRequest.Deps object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extensions.AddDependency(IApiRequest, params string[]) Constructors CommandRequest(TEntity?) public CommandRequest(TEntity? data = default) Parameters data TEntity Properties Data public TEntity? Data { get; set; } Property Value TEntity"
  },
  "api/SparkPlug.Contracts.CommandResponse.html": {
    "href": "api/SparkPlug.Contracts.CommandResponse.html",
    "title": "Class CommandResponse",
    "keywords": "Class CommandResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public record CommandResponse : ApiResponse, IEquatable<ApiResponse>, ICommandResponse, IApiResponse, IEquatable<CommandResponse> Inheritance object ApiResponse CommandResponse Implements IEquatable<ApiResponse> ICommandResponse IApiResponse IEquatable<CommandResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors CommandResponse(object?) public CommandResponse(object? data = null) Parameters data object Properties Data public object? Data { get; set; } Property Value object"
  },
  "api/SparkPlug.Contracts.CompositeFilter.html": {
    "href": "api/SparkPlug.Contracts.CompositeFilter.html",
    "title": "Class CompositeFilter",
    "keywords": "Class CompositeFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class CompositeFilter : Filter, ICompositeFilter, IFilter Inheritance object Filter CompositeFilter Implements ICompositeFilter IFilter Inherited Members Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.And(CompositeFilter, CompositeFilter) Extensions.And(CompositeFilter, ConditionFilter) Extensions.And(CompositeFilter, Func<CompositeFilter, CompositeFilter>) Extensions.And(CompositeFilter, string, FieldOperator, object) Extensions.And(CompositeFilter, string, UnaryOperator) Extensions.AndEqual(CompositeFilter, string, object) Extensions.AndGreaterThan(CompositeFilter, string, object) Extensions.AndGreaterThanOrEqual(CompositeFilter, string, object) Extensions.AndIn(CompositeFilter, string, object[]) Extensions.AndIsNotNull(CompositeFilter, string) Extensions.AndIsNull(CompositeFilter, string) Extensions.AndLessThan(CompositeFilter, string, object) Extensions.AndLessThanOrEqual(CompositeFilter, string, object) Extensions.AndNotEqual(CompositeFilter, string, object) Extensions.AndNotIn(CompositeFilter, string, object[]) Extensions.Or(CompositeFilter, CompositeFilter) Extensions.Or(CompositeFilter, ConditionFilter) Extensions.Or(CompositeFilter, Func<CompositeFilter, CompositeFilter>) Extensions.Or(CompositeFilter, string, FieldOperator, object) Extensions.Or(CompositeFilter, string, UnaryOperator) Extensions.OrEqual(CompositeFilter, string, object) Extensions.OrGreaterThan(CompositeFilter, string, object) Extensions.OrGreaterThanOrEqual(CompositeFilter, string, object) Extensions.OrIn(CompositeFilter, string, object[]) Extensions.OrIsNotNull(CompositeFilter, string) Extensions.OrIsNull(CompositeFilter, string) Extensions.OrLessThan(CompositeFilter, string, object) Extensions.OrLessThanOrEqual(CompositeFilter, string, object) Extensions.OrNotEqual(CompositeFilter, string, object) Extensions.OrNotIn(CompositeFilter, string, object[]) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Constructors CompositeFilter(CompositeOperator, params Filter[]?) public CompositeFilter(CompositeOperator op = CompositeOperator.And, params Filter[]? filters) Parameters op CompositeOperator filters Filter[] Properties Filters public Filter[]? Filters { get; set; } Property Value Filter[] Op public CompositeOperator Op { get; set; } Property Value CompositeOperator"
  },
  "api/SparkPlug.Contracts.CompositeOperator.html": {
    "href": "api/SparkPlug.Contracts.CompositeOperator.html",
    "title": "Enum CompositeOperator",
    "keywords": "Enum CompositeOperator Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public enum CompositeOperator Fields [EnumMember] And = 0 [EnumMember] Or = 1"
  },
  "api/SparkPlug.Contracts.CompositeRequest.html": {
    "href": "api/SparkPlug.Contracts.CompositeRequest.html",
    "title": "Class CompositeRequest",
    "keywords": "Class CompositeRequest Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class CompositeRequest : ApiRequest, ICompositeRequest, IApiRequest Inheritance object ApiRequest CompositeRequest Implements ICompositeRequest IApiRequest Inherited Members ApiRequest.Deps object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extensions.AddDependency(IApiRequest, params string[]) Extensions.Add(ICompositeRequest, string, IApiRequest) Constructors CompositeRequest() public CompositeRequest() Properties Requests public Dictionary<string, IApiRequest>? Requests { get; set; } Property Value Dictionary<string, IApiRequest>"
  },
  "api/SparkPlug.Contracts.CompositeResponse.html": {
    "href": "api/SparkPlug.Contracts.CompositeResponse.html",
    "title": "Class CompositeResponse",
    "keywords": "Class CompositeResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public record CompositeResponse : ApiResponse, IEquatable<ApiResponse>, ICompositeResponse, IApiResponse, IEquatable<CompositeResponse> Inheritance object ApiResponse CompositeResponse Implements IEquatable<ApiResponse> ICompositeResponse IApiResponse IEquatable<CompositeResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors CompositeResponse(Dictionary<string, IApiResponse>?) public CompositeResponse(Dictionary<string, IApiResponse>? data = null) Parameters data Dictionary<string, IApiResponse> Properties Data public Dictionary<string, IApiResponse>? Data { get; set; } Property Value Dictionary<string, IApiResponse>"
  },
  "api/SparkPlug.Contracts.ConditionFilter.html": {
    "href": "api/SparkPlug.Contracts.ConditionFilter.html",
    "title": "Class ConditionFilter",
    "keywords": "Class ConditionFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class ConditionFilter : Filter, IConditionFilter, IFilter Inheritance object Filter ConditionFilter Implements IConditionFilter IFilter Derived FieldFilter UnaryFilter Inherited Members Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Constructors ConditionFilter(string, FilterType) public ConditionFilter(string field, FilterType filterType) Parameters field string filterType FilterType Properties Field public string Field { get; set; } Property Value string"
  },
  "api/SparkPlug.Contracts.ContractsExtensions.html": {
    "href": "api/SparkPlug.Contracts.ContractsExtensions.html",
    "title": "Class ContractsExtensions",
    "keywords": "Class ContractsExtensions Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public static class ContractsExtensions Inheritance object ContractsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddContracts(IServiceCollection) public static IServiceCollection AddContracts(this IServiceCollection service) Parameters service IServiceCollection Returns IServiceCollection"
  },
  "api/SparkPlug.Contracts.ContractsModule.html": {
    "href": "api/SparkPlug.Contracts.ContractsModule.html",
    "title": "Class ContractsModule",
    "keywords": "Class ContractsModule Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class ContractsModule : IModule Inheritance object ContractsModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Contracts.Direction.html": {
    "href": "api/SparkPlug.Contracts.Direction.html",
    "title": "Enum Direction",
    "keywords": "Enum Direction Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public enum Direction Fields [EnumMember(Value = \"ASC\")] Ascending = 0 [EnumMember(Value = \"DESC\")] Descending = 1"
  },
  "api/SparkPlug.Contracts.ErrorResponse.html": {
    "href": "api/SparkPlug.Contracts.ErrorResponse.html",
    "title": "Class ErrorResponse",
    "keywords": "Class ErrorResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public record ErrorResponse : ApiResponse, IEquatable<ApiResponse>, IErrorResponse, IApiResponse, IEquatable<ErrorResponse> Inheritance object ApiResponse ErrorResponse Implements IEquatable<ApiResponse> IErrorResponse IApiResponse IEquatable<ErrorResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ExceptionExtension.SetCode(ErrorResponse, string) ExceptionExtension.SetFromException(ErrorResponse, Exception) ExceptionExtension.SetMessage(ErrorResponse, string) ExceptionExtension.SetStackTrace(ErrorResponse, string) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Code public string? Code { get; set; } Property Value string Message public string? Message { get; set; } Property Value string StackTrace public string? StackTrace { get; set; } Property Value string"
  },
  "api/SparkPlug.Contracts.ExceptionExtension.html": {
    "href": "api/SparkPlug.Contracts.ExceptionExtension.html",
    "title": "Class ExceptionExtension",
    "keywords": "Class ExceptionExtension Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public static class ExceptionExtension Inheritance object ExceptionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetInnerStackTrace(Exception?) public static string GetInnerStackTrace(this Exception? exception) Parameters exception Exception Returns string SetCode(ErrorResponse, string) public static ErrorResponse SetCode(this ErrorResponse error, string code) Parameters error ErrorResponse code string Returns ErrorResponse SetFromException(ErrorResponse, Exception) public static ErrorResponse SetFromException(this ErrorResponse error, Exception ex) Parameters error ErrorResponse ex Exception Returns ErrorResponse SetMessage(ErrorResponse, string) public static ErrorResponse SetMessage(this ErrorResponse error, string message) Parameters error ErrorResponse message string Returns ErrorResponse SetStackTrace(ErrorResponse, string) public static ErrorResponse SetStackTrace(this ErrorResponse error, string stackTrace) Parameters error ErrorResponse stackTrace string Returns ErrorResponse"
  },
  "api/SparkPlug.Contracts.Extensions.html": {
    "href": "api/SparkPlug.Contracts.Extensions.html",
    "title": "Class Extensions",
    "keywords": "Class Extensions Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Add(ICompositeRequest, string, IApiRequest) public static ICompositeRequest Add(this ICompositeRequest source, string key, IApiRequest value) Parameters source ICompositeRequest key string value IApiRequest Returns ICompositeRequest AddDependency(IApiRequest, params string[]) public static IApiRequest AddDependency(this IApiRequest request, params string[] deps) Parameters request IApiRequest deps string[] Returns IApiRequest And(CompositeFilter, CompositeFilter) public static CompositeFilter And(this CompositeFilter source, CompositeFilter filter) Parameters source CompositeFilter filter CompositeFilter Returns CompositeFilter And(CompositeFilter, ConditionFilter) public static CompositeFilter And(this CompositeFilter source, ConditionFilter filter) Parameters source CompositeFilter filter ConditionFilter Returns CompositeFilter And(CompositeFilter, Func<CompositeFilter, CompositeFilter>) public static CompositeFilter And(this CompositeFilter source, Func<CompositeFilter, CompositeFilter> filterAction) Parameters source CompositeFilter filterAction Func<CompositeFilter, CompositeFilter> Returns CompositeFilter And(CompositeFilter, string, FieldOperator, object) public static CompositeFilter And(this CompositeFilter source, string field, FieldOperator op, object value) Parameters source CompositeFilter field string op FieldOperator value object Returns CompositeFilter And(CompositeFilter, string, UnaryOperator) public static CompositeFilter And(this CompositeFilter source, string field, UnaryOperator op) Parameters source CompositeFilter field string op UnaryOperator Returns CompositeFilter AndEqual(CompositeFilter, string, object) public static CompositeFilter AndEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter AndGreaterThan(CompositeFilter, string, object) public static CompositeFilter AndGreaterThan(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter AndGreaterThanOrEqual(CompositeFilter, string, object) public static CompositeFilter AndGreaterThanOrEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter AndIn(CompositeFilter, string, object[]) public static CompositeFilter AndIn(this CompositeFilter source, string field, object[] values) Parameters source CompositeFilter field string values object[] Returns CompositeFilter AndIsNotNull(CompositeFilter, string) public static CompositeFilter AndIsNotNull(this CompositeFilter source, string field) Parameters source CompositeFilter field string Returns CompositeFilter AndIsNull(CompositeFilter, string) public static CompositeFilter AndIsNull(this CompositeFilter source, string field) Parameters source CompositeFilter field string Returns CompositeFilter AndLessThan(CompositeFilter, string, object) public static CompositeFilter AndLessThan(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter AndLessThanOrEqual(CompositeFilter, string, object) public static CompositeFilter AndLessThanOrEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter AndNotEqual(CompositeFilter, string, object) public static CompositeFilter AndNotEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter AndNotIn(CompositeFilter, string, object[]) public static CompositeFilter AndNotIn(this CompositeFilter source, string field, object[] values) Parameters source CompositeFilter field string values object[] Returns CompositeFilter NextPage(PageContext) public static PageContext NextPage(this PageContext pc) Parameters pc PageContext Returns PageContext Or(CompositeFilter, CompositeFilter) public static CompositeFilter Or(this CompositeFilter source, CompositeFilter filter) Parameters source CompositeFilter filter CompositeFilter Returns CompositeFilter Or(CompositeFilter, ConditionFilter) public static CompositeFilter Or(this CompositeFilter source, ConditionFilter filter) Parameters source CompositeFilter filter ConditionFilter Returns CompositeFilter Or(CompositeFilter, Func<CompositeFilter, CompositeFilter>) public static CompositeFilter Or(this CompositeFilter source, Func<CompositeFilter, CompositeFilter> filterAction) Parameters source CompositeFilter filterAction Func<CompositeFilter, CompositeFilter> Returns CompositeFilter Or(CompositeFilter, string, FieldOperator, object) public static CompositeFilter Or(this CompositeFilter source, string field, FieldOperator op, object value) Parameters source CompositeFilter field string op FieldOperator value object Returns CompositeFilter Or(CompositeFilter, string, UnaryOperator) public static CompositeFilter Or(this CompositeFilter source, string field, UnaryOperator op) Parameters source CompositeFilter field string op UnaryOperator Returns CompositeFilter OrEqual(CompositeFilter, string, object) public static CompositeFilter OrEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter OrGreaterThan(CompositeFilter, string, object) public static CompositeFilter OrGreaterThan(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter OrGreaterThanOrEqual(CompositeFilter, string, object) public static CompositeFilter OrGreaterThanOrEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter OrIn(CompositeFilter, string, object[]) public static CompositeFilter OrIn(this CompositeFilter source, string field, object[] values) Parameters source CompositeFilter field string values object[] Returns CompositeFilter OrIsNotNull(CompositeFilter, string) public static CompositeFilter OrIsNotNull(this CompositeFilter source, string field) Parameters source CompositeFilter field string Returns CompositeFilter OrIsNull(CompositeFilter, string) public static CompositeFilter OrIsNull(this CompositeFilter source, string field) Parameters source CompositeFilter field string Returns CompositeFilter OrLessThan(CompositeFilter, string, object) public static CompositeFilter OrLessThan(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter OrLessThanOrEqual(CompositeFilter, string, object) public static CompositeFilter OrLessThanOrEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter OrNotEqual(CompositeFilter, string, object) public static CompositeFilter OrNotEqual(this CompositeFilter source, string field, object value) Parameters source CompositeFilter field string value object Returns CompositeFilter OrNotIn(CompositeFilter, string, object[]) public static CompositeFilter OrNotIn(this CompositeFilter source, string field, object[] values) Parameters source CompositeFilter field string values object[] Returns CompositeFilter SetData(IQueryResponse, IEnumerable<object>) public static IQueryResponse SetData(this IQueryResponse source, IEnumerable<object> data) Parameters source IQueryResponse data IEnumerable<object> Returns IQueryResponse SetPageContext(IQueryResponse, IPageContext) public static IQueryResponse SetPageContext(this IQueryResponse source, IPageContext pc) Parameters source IQueryResponse pc IPageContext Returns IQueryResponse SetTotal(PageContext, long) public static PageContext SetTotal(this PageContext pc, long total) Parameters pc PageContext total long Returns PageContext"
  },
  "api/SparkPlug.Contracts.FieldFilter.html": {
    "href": "api/SparkPlug.Contracts.FieldFilter.html",
    "title": "Class FieldFilter",
    "keywords": "Class FieldFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class FieldFilter : ConditionFilter, IFieldFilter, IConditionFilter, IFilter Inheritance object Filter ConditionFilter FieldFilter Implements IFieldFilter IConditionFilter IFilter Inherited Members ConditionFilter.Field Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Constructors FieldFilter(string, FieldOperator, object, FilterValueType?) public FieldFilter(string field, FieldOperator op, object value, FilterValueType? type = null) Parameters field string op FieldOperator value object type FilterValueType? Properties Op public FieldOperator Op { get; set; } Property Value FieldOperator Type public FilterValueType? Type { get; set; } Property Value FilterValueType? Value public object? Value { get; set; } Property Value object"
  },
  "api/SparkPlug.Contracts.FieldOperator.html": {
    "href": "api/SparkPlug.Contracts.FieldOperator.html",
    "title": "Enum FieldOperator",
    "keywords": "Enum FieldOperator Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public enum FieldOperator Fields [EnumMember(Value = \"bw\")] Between = 6 [EnumMember(Value = \"contains\")] Contains = 11 [EnumMember(Value = \"ends\")] EndsWith = 9 [EnumMember(Value = \"eq\")] Equal = 0 [EnumMember(Value = \"gt\")] GreaterThan = 2 [EnumMember(Value = \"ge\")] GreaterThanOrEqual = 3 [EnumMember(Value = \"in\")] In = 7 [EnumMember(Value = \"lt\")] LessThan = 4 [EnumMember(Value = \"le\")] LessThanOrEqual = 5 [EnumMember(Value = \"ne\")] NotEqual = 1 [EnumMember(Value = \"notin\")] NotIn = 8 [EnumMember(Value = \"starts\")] StartsWith = 10"
  },
  "api/SparkPlug.Contracts.Filter.html": {
    "href": "api/SparkPlug.Contracts.Filter.html",
    "title": "Class Filter",
    "keywords": "Class Filter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll [JsonConverter(typeof(FilterConverter))] public class Filter : IFilter Inheritance object Filter Implements IFilter Derived CompositeFilter ConditionFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Constructors Filter(FilterType) public Filter(FilterType filterType) Parameters filterType FilterType Properties Kind public FilterType Kind { get; set; } Property Value FilterType"
  },
  "api/SparkPlug.Contracts.FilterConverter.html": {
    "href": "api/SparkPlug.Contracts.FilterConverter.html",
    "title": "Class FilterConverter",
    "keywords": "Class FilterConverter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class FilterConverter : JsonConverter Inheritance object JsonConverter FilterConverter Inherited Members JsonConverter.CanRead object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Methods CanConvert(Type) Determines whether this instance can convert the specified object type. public override bool CanConvert(Type objectType) Parameters objectType Type Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. public override Filter ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue object The existing value of object being read. serializer JsonSerializer The calling serializer. Returns Filter The object value. WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value object The value. serializer JsonSerializer The calling serializer."
  },
  "api/SparkPlug.Contracts.FilterType.html": {
    "href": "api/SparkPlug.Contracts.FilterType.html",
    "title": "Enum FilterType",
    "keywords": "Enum FilterType Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public enum FilterType Fields [EnumMember(Value = \"c\")] Composite = 0 [EnumMember(Value = \"f\")] Field = 1 [EnumMember(Value = \"u\")] Unary = 2"
  },
  "api/SparkPlug.Contracts.FilterValueType.html": {
    "href": "api/SparkPlug.Contracts.FilterValueType.html",
    "title": "Enum FilterValueType",
    "keywords": "Enum FilterValueType Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public enum FilterValueType Fields [EnumMember] DateOnly = 1 [EnumMember] UtcDateTime = 0"
  },
  "api/SparkPlug.Contracts.IApiRequest.html": {
    "href": "api/SparkPlug.Contracts.IApiRequest.html",
    "title": "Interface IApiRequest",
    "keywords": "Interface IApiRequest Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IApiRequest Extension Methods Extensions.AddDependency(IApiRequest, params string[]) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Deps string[]? Deps { get; set; } Property Value string[]"
  },
  "api/SparkPlug.Contracts.IApiResponse.html": {
    "href": "api/SparkPlug.Contracts.IApiResponse.html",
    "title": "Interface IApiResponse",
    "keywords": "Interface IApiResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IApiResponse Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ICommandRequest-1.html": {
    "href": "api/SparkPlug.Contracts.ICommandRequest-1.html",
    "title": "Interface ICommandRequest<TEntity>",
    "keywords": "Interface ICommandRequest<TEntity> Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface ICommandRequest<TEntity> : IApiRequest Type Parameters TEntity Inherited Members IApiRequest.Deps Extension Methods Extensions.AddDependency(IApiRequest, params string[]) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Data TEntity? Data { get; set; } Property Value TEntity"
  },
  "api/SparkPlug.Contracts.ICommandResponse.html": {
    "href": "api/SparkPlug.Contracts.ICommandResponse.html",
    "title": "Interface ICommandResponse",
    "keywords": "Interface ICommandResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface ICommandResponse : IApiResponse Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Data object? Data { get; set; } Property Value object"
  },
  "api/SparkPlug.Contracts.ICompositeFilter.html": {
    "href": "api/SparkPlug.Contracts.ICompositeFilter.html",
    "title": "Interface ICompositeFilter",
    "keywords": "Interface ICompositeFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface ICompositeFilter : IFilter Inherited Members IFilter.Kind Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Properties Filters Filter[]? Filters { get; set; } Property Value Filter[] Op CompositeOperator Op { get; set; } Property Value CompositeOperator"
  },
  "api/SparkPlug.Contracts.ICompositeRequest.html": {
    "href": "api/SparkPlug.Contracts.ICompositeRequest.html",
    "title": "Interface ICompositeRequest",
    "keywords": "Interface ICompositeRequest Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface ICompositeRequest : IApiRequest Inherited Members IApiRequest.Deps Extension Methods Extensions.AddDependency(IApiRequest, params string[]) Extensions.Add(ICompositeRequest, string, IApiRequest) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Requests Dictionary<string, IApiRequest>? Requests { get; set; } Property Value Dictionary<string, IApiRequest>"
  },
  "api/SparkPlug.Contracts.ICompositeResponse.html": {
    "href": "api/SparkPlug.Contracts.ICompositeResponse.html",
    "title": "Interface ICompositeResponse",
    "keywords": "Interface ICompositeResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface ICompositeResponse : IApiResponse Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Data Dictionary<string, IApiResponse>? Data { get; set; } Property Value Dictionary<string, IApiResponse>"
  },
  "api/SparkPlug.Contracts.IConditionFilter.html": {
    "href": "api/SparkPlug.Contracts.IConditionFilter.html",
    "title": "Interface IConditionFilter",
    "keywords": "Interface IConditionFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IConditionFilter : IFilter Inherited Members IFilter.Kind Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Properties Field string Field { get; set; } Property Value string"
  },
  "api/SparkPlug.Contracts.IErrorResponse.html": {
    "href": "api/SparkPlug.Contracts.IErrorResponse.html",
    "title": "Interface IErrorResponse",
    "keywords": "Interface IErrorResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IErrorResponse : IApiResponse Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Code string? Code { get; set; } Property Value string Message string? Message { get; set; } Property Value string StackTrace string? StackTrace { get; set; } Property Value string"
  },
  "api/SparkPlug.Contracts.IFieldFilter.html": {
    "href": "api/SparkPlug.Contracts.IFieldFilter.html",
    "title": "Interface IFieldFilter",
    "keywords": "Interface IFieldFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IFieldFilter : IConditionFilter, IFilter Inherited Members IConditionFilter.Field IFilter.Kind Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Properties Op FieldOperator Op { get; set; } Property Value FieldOperator Type FilterValueType? Type { get; set; } Property Value FilterValueType? Value object? Value { get; set; } Property Value object"
  },
  "api/SparkPlug.Contracts.IFilter.html": {
    "href": "api/SparkPlug.Contracts.IFilter.html",
    "title": "Interface IFilter",
    "keywords": "Interface IFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IFilter Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Properties Kind FilterType Kind { get; set; } Property Value FilterType"
  },
  "api/SparkPlug.Contracts.IInclude.html": {
    "href": "api/SparkPlug.Contracts.IInclude.html",
    "title": "Interface IInclude",
    "keywords": "Interface IInclude Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IInclude Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Includes Include[]? Includes { get; set; } Property Value Include[] Name string Name { get; set; } Property Value string Select string[]? Select { get; set; } Property Value string[]"
  },
  "api/SparkPlug.Contracts.IModule.html": {
    "href": "api/SparkPlug.Contracts.IModule.html",
    "title": "Interface IModule",
    "keywords": "Interface IModule Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IModule Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Contracts.IOrder.html": {
    "href": "api/SparkPlug.Contracts.IOrder.html",
    "title": "Interface IOrder",
    "keywords": "Interface IOrder Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IOrder Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Direction Direction Direction { get; set; } Property Value Direction Field string Field { get; set; } Property Value string"
  },
  "api/SparkPlug.Contracts.IPageContext.html": {
    "href": "api/SparkPlug.Contracts.IPageContext.html",
    "title": "Interface IPageContext",
    "keywords": "Interface IPageContext Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IPageContext Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties PageNo int PageNo { get; set; } Property Value int PageSize int PageSize { get; } Property Value int Skip int Skip { get; } Property Value int Total long Total { get; set; } Property Value long"
  },
  "api/SparkPlug.Contracts.IQueryRequest.html": {
    "href": "api/SparkPlug.Contracts.IQueryRequest.html",
    "title": "Interface IQueryRequest",
    "keywords": "Interface IQueryRequest Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IQueryRequest : IApiRequest Inherited Members IApiRequest.Deps Extension Methods Extensions.AddDependency(IApiRequest, params string[]) IQueryRequestExtensions.AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Include(IQueryRequest, Include) IQueryRequestExtensions.Include(IQueryRequest, string) IQueryRequestExtensions.Includes(IQueryRequest, params Include[]) IQueryRequestExtensions.NextPage(IQueryRequest) IQueryRequestExtensions.OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Page(IQueryRequest, PageContext) IQueryRequestExtensions.Page(IQueryRequest, int, int) IQueryRequestExtensions.Select(IQueryRequest, params string[]) IQueryRequestExtensions.Sort(IQueryRequest, Order) IQueryRequestExtensions.Sort(IQueryRequest, Order[]) IQueryRequestExtensions.Sort(IQueryRequest, string, Direction) IQueryRequestExtensions.Where(IQueryRequest, IFilter) IQueryRequestExtensions.Where(IQueryRequest, string, FieldOperator, object) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Includes Include[]? Includes { get; set; } Property Value Include[] Page PageContext? Page { get; set; } Property Value PageContext Select string[]? Select { get; set; } Property Value string[] Sort Order[]? Sort { get; set; } Property Value Order[] Where Filter? Where { get; set; } Property Value Filter"
  },
  "api/SparkPlug.Contracts.IQueryRequestExtensions.html": {
    "href": "api/SparkPlug.Contracts.IQueryRequestExtensions.html",
    "title": "Class IQueryRequestExtensions",
    "keywords": "Class IQueryRequestExtensions Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public static class IQueryRequestExtensions Inheritance object IQueryRequestExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) public static IQueryRequest AndWhere(this IQueryRequest request, Func<CompositeFilter, CompositeFilter> filterAction) Parameters request IQueryRequest filterAction Func<CompositeFilter, CompositeFilter> Returns IQueryRequest Include(IQueryRequest, Include) public static IQueryRequest Include(this IQueryRequest request, Include include) Parameters request IQueryRequest include Include Returns IQueryRequest Include(IQueryRequest, string) public static IQueryRequest Include(this IQueryRequest request, string name) Parameters request IQueryRequest name string Returns IQueryRequest Includes(IQueryRequest, params Include[]) public static IQueryRequest Includes(this IQueryRequest request, params Include[] includes) Parameters request IQueryRequest includes Include[] Returns IQueryRequest NextPage(IQueryRequest) public static IQueryRequest NextPage(this IQueryRequest request) Parameters request IQueryRequest Returns IQueryRequest OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) public static IQueryRequest OrWhere(this IQueryRequest request, Func<CompositeFilter, CompositeFilter> filterAction) Parameters request IQueryRequest filterAction Func<CompositeFilter, CompositeFilter> Returns IQueryRequest Page(IQueryRequest, PageContext) public static IQueryRequest Page(this IQueryRequest request, PageContext page) Parameters request IQueryRequest page PageContext Returns IQueryRequest Page(IQueryRequest, int, int) public static IQueryRequest Page(this IQueryRequest request, int pageNo, int pageSize) Parameters request IQueryRequest pageNo int pageSize int Returns IQueryRequest Select(IQueryRequest, params string[]) public static IQueryRequest Select(this IQueryRequest request, params string[] fields) Parameters request IQueryRequest fields string[] Returns IQueryRequest Sort(IQueryRequest, Order) public static IQueryRequest Sort(this IQueryRequest request, Order order) Parameters request IQueryRequest order Order Returns IQueryRequest Sort(IQueryRequest, Order[]) public static IQueryRequest Sort(this IQueryRequest request, Order[] orders) Parameters request IQueryRequest orders Order[] Returns IQueryRequest Sort(IQueryRequest, string, Direction) public static IQueryRequest Sort(this IQueryRequest request, string field, Direction direction) Parameters request IQueryRequest field string direction Direction Returns IQueryRequest Where(IQueryRequest, IFilter) public static IQueryRequest Where(this IQueryRequest request, IFilter filter) Parameters request IQueryRequest filter IFilter Returns IQueryRequest Where(IQueryRequest, string, FieldOperator, object) public static IQueryRequest Where(this IQueryRequest request, string field, FieldOperator op, object value) Parameters request IQueryRequest field string op FieldOperator value object Returns IQueryRequest"
  },
  "api/SparkPlug.Contracts.IQueryResponse.html": {
    "href": "api/SparkPlug.Contracts.IQueryResponse.html",
    "title": "Interface IQueryResponse",
    "keywords": "Interface IQueryResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IQueryResponse : IApiResponse Extension Methods Extensions.SetData(IQueryResponse, IEnumerable<object>) Extensions.SetPageContext(IQueryResponse, IPageContext) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Data IEnumerable<object>? Data { get; set; } Property Value IEnumerable<object> Page IPageContext? Page { get; set; } Property Value IPageContext"
  },
  "api/SparkPlug.Contracts.ISerializer.html": {
    "href": "api/SparkPlug.Contracts.ISerializer.html",
    "title": "Interface ISerializer",
    "keywords": "Interface ISerializer Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface ISerializer Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Deserialize<T>(string) T? Deserialize<T>(string json) Parameters json string Returns T Type Parameters T Serialize<T>(T) string Serialize<T>(T obj) Parameters obj T Returns string Type Parameters T"
  },
  "api/SparkPlug.Contracts.IUnaryFilter.html": {
    "href": "api/SparkPlug.Contracts.IUnaryFilter.html",
    "title": "Interface IUnaryFilter",
    "keywords": "Interface IUnaryFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public interface IUnaryFilter : IConditionFilter, IFilter Inherited Members IConditionFilter.Field IFilter.Kind Extension Methods FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>) Properties Op UnaryOperator Op { get; set; } Property Value UnaryOperator"
  },
  "api/SparkPlug.Contracts.Include.html": {
    "href": "api/SparkPlug.Contracts.Include.html",
    "title": "Class Include",
    "keywords": "Class Include Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class Include : IInclude Inheritance object Include Implements IInclude Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors Include(string) public Include(string name) Parameters name string Include(string, string[], Include[]?) public Include(string name, string[] columns, Include[]? includes) Parameters name string columns string[] includes Include[] Properties Includes public Include[]? Includes { get; set; } Property Value Include[] Name public string Name { get; set; } Property Value string Select public string[]? Select { get; set; } Property Value string[]"
  },
  "api/SparkPlug.Contracts.NewtonsoftSerializer.html": {
    "href": "api/SparkPlug.Contracts.NewtonsoftSerializer.html",
    "title": "Class NewtonsoftSerializer",
    "keywords": "Class NewtonsoftSerializer Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class NewtonsoftSerializer : ISerializer Inheritance object NewtonsoftSerializer Implements ISerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Deserialize<T>(string) public T? Deserialize<T>(string json) Parameters json string Returns T Type Parameters T Serialize<T>(T) public string Serialize<T>(T obj) Parameters obj T Returns string Type Parameters T"
  },
  "api/SparkPlug.Contracts.Order.html": {
    "href": "api/SparkPlug.Contracts.Order.html",
    "title": "Class Order",
    "keywords": "Class Order Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class Order : IOrder Inheritance object Order Implements IOrder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors Order(string, Direction) public Order(string field, Direction direction) Parameters field string direction Direction Properties Direction public Direction Direction { get; set; } Property Value Direction Field public string Field { get; set; } Property Value string"
  },
  "api/SparkPlug.Contracts.PageContext.html": {
    "href": "api/SparkPlug.Contracts.PageContext.html",
    "title": "Class PageContext",
    "keywords": "Class PageContext Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class PageContext : IPageContext Inheritance object PageContext Implements IPageContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.NextPage(PageContext) Extensions.SetTotal(PageContext, long) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors PageContext(int, int) public PageContext(int pageNo = 1, int pageSize = 25) Parameters pageNo int pageSize int Properties PageNo public int PageNo { get; set; } Property Value int PageSize public int PageSize { get; } Property Value int Skip public int Skip { get; } Property Value int Total public long Total { get; set; } Property Value long"
  },
  "api/SparkPlug.Contracts.QueryRequest.html": {
    "href": "api/SparkPlug.Contracts.QueryRequest.html",
    "title": "Class QueryRequest",
    "keywords": "Class QueryRequest Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class QueryRequest : ApiRequest, IQueryRequest, IApiRequest Inheritance object ApiRequest QueryRequest Implements IQueryRequest IApiRequest Inherited Members ApiRequest.Deps object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.AddDependency(IApiRequest, params string[]) IQueryRequestExtensions.AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Include(IQueryRequest, Include) IQueryRequestExtensions.Include(IQueryRequest, string) IQueryRequestExtensions.Includes(IQueryRequest, params Include[]) IQueryRequestExtensions.NextPage(IQueryRequest) IQueryRequestExtensions.OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Page(IQueryRequest, PageContext) IQueryRequestExtensions.Page(IQueryRequest, int, int) IQueryRequestExtensions.Select(IQueryRequest, params string[]) IQueryRequestExtensions.Sort(IQueryRequest, Order) IQueryRequestExtensions.Sort(IQueryRequest, Order[]) IQueryRequestExtensions.Sort(IQueryRequest, string, Direction) IQueryRequestExtensions.Where(IQueryRequest, IFilter) IQueryRequestExtensions.Where(IQueryRequest, string, FieldOperator, object) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors QueryRequest() public QueryRequest() QueryRequest(PageContext) public QueryRequest(PageContext page) Parameters page PageContext QueryRequest(string[], Include[]?, Filter?, Order[]?, PageContext?) public QueryRequest(string[] select, Include[]? includes = null, Filter? where = null, Order[]? sort = null, PageContext? page = null) Parameters select string[] includes Include[] where Filter sort Order[] page PageContext Properties Includes public Include[]? Includes { get; set; } Property Value Include[] Page public PageContext? Page { get; set; } Property Value PageContext Select public string[]? Select { get; set; } Property Value string[] Sort public Order[]? Sort { get; set; } Property Value Order[] Where public Filter? Where { get; set; } Property Value Filter"
  },
  "api/SparkPlug.Contracts.QueryResponse.html": {
    "href": "api/SparkPlug.Contracts.QueryResponse.html",
    "title": "Class QueryResponse",
    "keywords": "Class QueryResponse Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public record QueryResponse : ApiResponse, IEquatable<ApiResponse>, IQueryResponse, IApiResponse, IEquatable<QueryResponse> Inheritance object ApiResponse QueryResponse Implements IEquatable<ApiResponse> IQueryResponse IApiResponse IEquatable<QueryResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Extensions.SetData(IQueryResponse, IEnumerable<object>) Extensions.SetPageContext(IQueryResponse, IPageContext) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors QueryResponse(IEnumerable<object>?, IPageContext?) public QueryResponse(IEnumerable<object>? data = null, IPageContext? pc = null) Parameters data IEnumerable<object> pc IPageContext Properties Data public IEnumerable<object>? Data { get; set; } Property Value IEnumerable<object> Page public IPageContext? Page { get; set; } Property Value IPageContext"
  },
  "api/SparkPlug.Contracts.UnaryFilter.html": {
    "href": "api/SparkPlug.Contracts.UnaryFilter.html",
    "title": "Class UnaryFilter",
    "keywords": "Class UnaryFilter Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public class UnaryFilter : ConditionFilter, IUnaryFilter, IConditionFilter, IFilter Inheritance object Filter ConditionFilter UnaryFilter Implements IUnaryFilter IConditionFilter IFilter Inherited Members ConditionFilter.Field Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Extention.GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors UnaryFilter(string, UnaryOperator) public UnaryFilter(string field, UnaryOperator op) Parameters field string op UnaryOperator Properties Op public UnaryOperator Op { get; set; } Property Value UnaryOperator"
  },
  "api/SparkPlug.Contracts.UnaryOperator.html": {
    "href": "api/SparkPlug.Contracts.UnaryOperator.html",
    "title": "Enum UnaryOperator",
    "keywords": "Enum UnaryOperator Namespace SparkPlug.Contracts Assembly SparkPlug.Contracts.dll public enum UnaryOperator Fields [EnumMember(Value = \"notnull\")] IsNotNull = 1 [EnumMember(Value = \"null\")] IsNull = 0"
  },
  "api/SparkPlug.Contracts.html": {
    "href": "api/SparkPlug.Contracts.html",
    "title": "Namespace SparkPlug.Contracts",
    "keywords": "Namespace SparkPlug.Contracts Classes ApiRequest ApiResponse CommandRequest<TEntity> CommandResponse CompositeFilter CompositeRequest CompositeResponse ConditionFilter ContractsExtensions ContractsModule ErrorResponse ExceptionExtension Extensions FieldFilter Filter FilterConverter IQueryRequestExtensions Include NewtonsoftSerializer Order PageContext QueryRequest QueryResponse UnaryFilter Interfaces IApiRequest IApiResponse ICommandRequest<TEntity> ICommandResponse ICompositeFilter ICompositeRequest ICompositeResponse IConditionFilter IErrorResponse IFieldFilter IFilter IInclude IModule IOrder IPageContext IQueryRequest IQueryResponse ISerializer IUnaryFilter Enums CompositeOperator Direction FieldOperator FilterType FilterValueType UnaryOperator"
  },
  "api/SparkPlug.Hosts.ModuleLoader.html": {
    "href": "api/SparkPlug.Hosts.ModuleLoader.html",
    "title": "Class ModuleLoader",
    "keywords": "Class ModuleLoader Namespace SparkPlug.Hosts Assembly SparkPlug.Hosts.dll public static class ModuleLoader Inheritance object ModuleLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAllModules(IServiceCollection, IConfiguration) public static void AddAllModules(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseAllMiddelwares(IApplicationBuilder) public static void UseAllMiddelwares(this IApplicationBuilder app) Parameters app IApplicationBuilder UseAllModules(IApplicationBuilder) public static void UseAllModules(this IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Hosts.Program.html": {
    "href": "api/SparkPlug.Hosts.Program.html",
    "title": "Class Program",
    "keywords": "Class Program Namespace SparkPlug.Hosts Assembly SparkPlug.Hosts.dll public static class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[] Run<TStartup>(string[]) public static void Run<TStartup>(string[] args) where TStartup : class Parameters args string[] Type Parameters TStartup"
  },
  "api/SparkPlug.Hosts.Startup.html": {
    "href": "api/SparkPlug.Hosts.Startup.html",
    "title": "Class Startup",
    "keywords": "Class Startup Namespace SparkPlug.Hosts Assembly SparkPlug.Hosts.dll public class Startup Inheritance object Startup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors Startup(IConfiguration) public Startup(IConfiguration configuration) Parameters configuration IConfiguration Methods Configure(IApplicationBuilder, IServiceProvider) public static void Configure(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters app IApplicationBuilder serviceProvider IServiceProvider ConfigureServices(IServiceCollection) public void ConfigureServices(IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/SparkPlug.Hosts.html": {
    "href": "api/SparkPlug.Hosts.html",
    "title": "Namespace SparkPlug.Hosts",
    "keywords": "Namespace SparkPlug.Hosts Classes ModuleLoader Program Startup"
  },
  "api/SparkPlug.Persistence.Abstractions.AssemblyCache.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.AssemblyCache.html",
    "title": "Class AssemblyCache",
    "keywords": "Class AssemblyCache Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public static class AssemblyCache Inheritance object AssemblyCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Assemblies public static Assembly[] Assemblies { get; } Property Value Assembly[] EntityTypeConfiguration public static Type[] EntityTypeConfiguration { get; } Property Value Type[] Types public static IEnumerable<Type> Types { get; } Property Value IEnumerable<Type>"
  },
  "api/SparkPlug.Persistence.Abstractions.BaseService-2.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.BaseService-2.html",
    "title": "Class BaseService<TId, TEntity>",
    "keywords": "Class BaseService<TId, TEntity> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public class BaseService<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object BaseService<TId, TEntity> Derived MenuService TenantService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors BaseService(IServiceProvider) public BaseService(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods CountAsync(IQueryRequest, CancellationToken) public Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<long> CreateAsync(ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) public Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken) Parameters request ICommandRequest<TEntity[]> cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> DeleteAsync(TId, CancellationToken) public Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> FindAsync(IQueryRequest, CancellationToken) public Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<TEntity>> GetAsync(TId, CancellationToken) public Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> GetManyAsync(TId[], CancellationToken) public Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken) Parameters ids TId[] cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> GetRepository() public IRepository<TId, TEntity> GetRepository() Returns IRepository<TId, TEntity> GetService<TService>() public TService GetService<TService>() where TService : class Returns TService Type Parameters TService PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) public Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken) Parameters id TId request ICommandRequest<JsonPatchDocument<TEntity>> cancellationToken CancellationToken Returns Task<TEntity> QueryAsync(IQueryRequest, CancellationToken) public Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<JObject>> ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity>"
  },
  "api/SparkPlug.Persistence.Abstractions.CreateEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.CreateEntityException.html",
    "title": "Class CreateEntityException",
    "keywords": "Class CreateEntityException Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [Serializable] public class CreateEntityException : PersistenceException, ISerializable Inheritance object Exception PersistenceException CreateEntityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?) Constructors CreateEntityException() public CreateEntityException() CreateEntityException(string?) public CreateEntityException(string? message) Parameters message string CreateEntityException(string?, Exception?) public CreateEntityException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/SparkPlug.Persistence.Abstractions.DbConfig.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.DbConfig.html",
    "title": "Class DbConfig",
    "keywords": "Class DbConfig Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public class DbConfig Inheritance object DbConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties ConnectionString public string ConnectionString { get; set; } Property Value string"
  },
  "api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html",
    "title": "Class DeleteEntityException",
    "keywords": "Class DeleteEntityException Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [Serializable] public class DeleteEntityException : PersistenceException, ISerializable Inheritance object Exception PersistenceException DeleteEntityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?) Constructors DeleteEntityException() public DeleteEntityException() DeleteEntityException(string?) public DeleteEntityException(string? message) Parameters message string DeleteEntityException(string?, Exception?) public DeleteEntityException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/SparkPlug.Persistence.Abstractions.EntityExtentions.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.EntityExtentions.html",
    "title": "Class EntityExtentions",
    "keywords": "Class EntityExtentions Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public static class EntityExtentions Inheritance object EntityExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) public static TEntity Auditable<TId, TEntity>(this TEntity entity, TId userId, DateTime currentTime, bool isCreate = false) where TEntity : class, IBaseEntity<TId> Parameters entity TEntity userId TId currentTime DateTime isCreate bool Returns TEntity Type Parameters TId TEntity"
  },
  "api/SparkPlug.Persistence.Abstractions.HomeDbAttribute.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.HomeDbAttribute.html",
    "title": "Class HomeDbAttribute",
    "keywords": "Class HomeDbAttribute Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class HomeDbAttribute : Attribute Inheritance object Attribute HomeDbAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html",
    "title": "Interface IAuditableEntity<TId>",
    "keywords": "Interface IAuditableEntity<TId> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IAuditableEntity<TId> Type Parameters TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties CreatedAt DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy TId CreatedBy { get; set; } Property Value TId ModifiedAt DateTime ModifiedAt { get; set; } Property Value DateTime ModifiedBy TId ModifiedBy { get; set; } Property Value TId"
  },
  "api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html",
    "title": "Interface IBaseEntity<TId>",
    "keywords": "Interface IBaseEntity<TId> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IBaseEntity<TId> Type Parameters TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Id TId Id { get; set; } Property Value TId"
  },
  "api/SparkPlug.Persistence.Abstractions.ICompositeEntity.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.ICompositeEntity.html",
    "title": "Interface ICompositeEntity",
    "keywords": "Interface ICompositeEntity Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface ICompositeEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html",
    "title": "Interface IConcurrencyEntity",
    "keywords": "Interface IConcurrencyEntity Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IConcurrencyEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Revision int Revision { get; set; } Property Value int"
  },
  "api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html",
    "title": "Interface IDbContextOptionsProvider",
    "keywords": "Interface IDbContextOptionsProvider Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IDbContextOptionsProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods GetDbContextOption(string) DbContextOptions GetDbContextOption(string connectionString) Parameters connectionString string Returns DbContextOptions"
  },
  "api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html",
    "title": "Interface IDeletableEntity",
    "keywords": "Interface IDeletableEntity Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IDeletableEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Status Status Status { get; set; } Property Value Status"
  },
  "api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html",
    "title": "Interface IMultiTenantEntity<TId>",
    "keywords": "Interface IMultiTenantEntity<TId> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IMultiTenantEntity<TId> Type Parameters TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties TenantId TId TenantId { get; set; } Property Value TId"
  },
  "api/SparkPlug.Persistence.Abstractions.IRepository-2.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IRepository-2.html",
    "title": "Interface IRepository<TId, TEntity>",
    "keywords": "Interface IRepository<TId, TEntity> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId> Type Parameters TId TEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods CountAsync(IQueryRequest, CancellationToken) Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<long> CreateAsync(ICommandRequest<TEntity>, CancellationToken) Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken = default) Parameters request ICommandRequest<TEntity[]> cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> DeleteAsync(TId, CancellationToken) Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> FindAsync(IQueryRequest, CancellationToken) Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<TEntity>> GetAsync(TId, CancellationToken) Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> GetManyAsync(TId[], CancellationToken) Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken = default) Parameters ids TId[] cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<JsonPatchDocument<TEntity>> cancellationToken CancellationToken Returns Task<TEntity> QueryAsync(IQueryRequest, CancellationToken) Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<JObject>> ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity>"
  },
  "api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html",
    "title": "Interface IRepositoryProvider",
    "keywords": "Interface IRepositoryProvider Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IRepositoryProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods GetRepository<TId, TEntity>() IRepository<TId, TEntity> GetRepository<TId, TEntity>() where TEntity : class, IBaseEntity<TId>, new() Returns IRepository<TId, TEntity> Type Parameters TId TEntity"
  },
  "api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html",
    "title": "Interface IRequestContext<TId>",
    "keywords": "Interface IRequestContext<TId> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface IRequestContext<out TId> Type Parameters TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties UserId TId UserId { get; } Property Value TId"
  },
  "api/SparkPlug.Persistence.Abstractions.ITenant.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.ITenant.html",
    "title": "Interface ITenant",
    "keywords": "Interface ITenant Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface ITenant Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Id string? Id { get; } Property Value string Name string? Name { get; } Property Value string Options IDictionary<string, string?> Options { get; } Property Value IDictionary<string, string>"
  },
  "api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html",
    "title": "Interface ITenantOptions<TOptions>",
    "keywords": "Interface ITenantOptions<TOptions> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public interface ITenantOptions<out TOptions> where TOptions : new() Type Parameters TOptions Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Value TOptions Value { get; } Property Value TOptions"
  },
  "api/SparkPlug.Persistence.Abstractions.PagedResult-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.PagedResult-1.html",
    "title": "Class PagedResult<TResult>",
    "keywords": "Class PagedResult<TResult> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public record PagedResult<TResult> : IEquatable<PagedResult<TResult>> Type Parameters TResult Inheritance object PagedResult<TResult> Implements IEquatable<PagedResult<TResult>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors PagedResult(IEnumerable<TResult>, long) public PagedResult(IEnumerable<TResult> items, long count) Parameters items IEnumerable<TResult> count long Properties Count public long Count { get; set; } Property Value long Items public IEnumerable<TResult> Items { get; set; } Property Value IEnumerable<TResult>"
  },
  "api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.PersistanceAbstractionModule.html",
    "title": "Class PersistanceAbstractionModule",
    "keywords": "Class PersistanceAbstractionModule Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public class PersistanceAbstractionModule : IModule Inheritance object PersistanceAbstractionModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Persistence.Abstractions.PersistenceException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.PersistenceException.html",
    "title": "Class PersistenceException",
    "keywords": "Class PersistenceException Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [Serializable] public class PersistenceException : Exception, ISerializable Inheritance object Exception PersistenceException Implements ISerializable Derived CreateEntityException DeleteEntityException QueryEntityException UpdateEntityException Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?) Constructors PersistenceException() public PersistenceException() PersistenceException(string?) public PersistenceException(string? message) Parameters message string PersistenceException(string?, Exception?) public PersistenceException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/SparkPlug.Persistence.Abstractions.QueryEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.QueryEntityException.html",
    "title": "Class QueryEntityException",
    "keywords": "Class QueryEntityException Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [Serializable] public class QueryEntityException : PersistenceException, ISerializable Inheritance object Exception PersistenceException QueryEntityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?) Constructors QueryEntityException() public QueryEntityException() QueryEntityException(string?) public QueryEntityException(string? message) Parameters message string QueryEntityException(string?, Exception?) public QueryEntityException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/SparkPlug.Persistence.Abstractions.RequestContext-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.RequestContext-1.html",
    "title": "Class RequestContext<TId>",
    "keywords": "Class RequestContext<TId> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public class RequestContext<TId> : IRequestContext<TId> where TId : new() Type Parameters TId Inheritance object RequestContext<TId> Implements IRequestContext<TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties UserId public TId UserId { get; set; } Property Value TId"
  },
  "api/SparkPlug.Persistence.Abstractions.Status.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.Status.html",
    "title": "Enum Status",
    "keywords": "Enum Status Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public enum Status Fields [EnumMember] Active = 1 [EnumMember] Deleted = 2"
  },
  "api/SparkPlug.Persistence.Abstractions.TenantDbAttribute.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.TenantDbAttribute.html",
    "title": "Class TenantDbAttribute",
    "keywords": "Class TenantDbAttribute Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class TenantDbAttribute : Attribute Inheritance object Attribute TenantDbAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.TenantOptions-1.html",
    "title": "Class TenantOptions<TOptions>",
    "keywords": "Class TenantOptions<TOptions> Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll public class TenantOptions<TOptions> : ITenantOptions<TOptions> where TOptions : new() Type Parameters TOptions Inheritance object TenantOptions<TOptions> Implements ITenantOptions<TOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantOptions(ITenant) public TenantOptions(ITenant tenant) Parameters tenant ITenant Properties Value public TOptions Value { get; } Property Value TOptions"
  },
  "api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html",
    "title": "Class UpdateEntityException",
    "keywords": "Class UpdateEntityException Namespace SparkPlug.Persistence.Abstractions Assembly SparkPlug.Persistence.Abstractions.dll [Serializable] public class UpdateEntityException : PersistenceException, ISerializable Inheritance object Exception PersistenceException UpdateEntityException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?) Constructors UpdateEntityException() public UpdateEntityException() UpdateEntityException(string?) public UpdateEntityException(string? message) Parameters message string UpdateEntityException(string?, Exception?) public UpdateEntityException(string? message, Exception? innerException) Parameters message string innerException Exception"
  },
  "api/SparkPlug.Persistence.Abstractions.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.html",
    "title": "Namespace SparkPlug.Persistence.Abstractions",
    "keywords": "Namespace SparkPlug.Persistence.Abstractions Classes AssemblyCache BaseService<TId, TEntity> CreateEntityException DbConfig DeleteEntityException EntityExtentions HomeDbAttribute PagedResult<TResult> PersistanceAbstractionModule PersistenceException QueryEntityException RequestContext<TId> TenantDbAttribute TenantOptions<TOptions> UpdateEntityException Interfaces IAuditableEntity<TId> IBaseEntity<TId> ICompositeEntity IConcurrencyEntity IDbContextOptionsProvider IDeletableEntity IMultiTenantEntity<TId> IRepositoryProvider IRepository<TId, TEntity> IRequestContext<TId> ITenant ITenantOptions<TOptions> Enums Status"
  },
  "api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html",
    "title": "Class SqlDbOptions",
    "keywords": "Class SqlDbOptions Namespace SparkPlug.Persistence.EntityFramework.Configuration Assembly SparkPlug.Persistence.EntityFramework.dll public class SqlDbOptions Inheritance object SqlDbOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Fields ConfigPath public const string ConfigPath = \"SparkPlug:SqlDb\" Field Value string Properties ConnectionString [Required] public string? ConnectionString { get; set; } Property Value string"
  },
  "api/SparkPlug.Persistence.EntityFramework.Configuration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Configuration.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.Configuration",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.Configuration Classes SqlDbOptions"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html",
    "title": "Class HomeDbContext",
    "keywords": "Class HomeDbContext Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public class HomeDbContext : SqlDbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext SqlDbContext HomeDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members SqlDbContext.OnModelCreating(ModelBuilder) SqlDbContext.SaveChangesAsync<TId>(TId, CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors HomeDbContext(IHomeDbModelConfiguration, HomeDbContextOptions) public HomeDbContext(IHomeDbModelConfiguration modelConfigProvider, HomeDbContextOptions sqlOptions) Parameters modelConfigProvider IHomeDbModelConfiguration sqlOptions HomeDbContextOptions Properties ModelConfigProvider protected override ISqlDbModelConfiguration ModelConfigProvider { get; } Property Value ISqlDbModelConfiguration"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html",
    "title": "Class HomeDbContextOptions",
    "keywords": "Class HomeDbContextOptions Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public class HomeDbContextOptions : SqlDbContextOptions Inheritance object SqlDbContextOptions HomeDbContextOptions Inherited Members SqlDbContextOptions.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors HomeDbContextOptions(IDbContextOptionsProvider, IOptions<DbConfig>) public HomeDbContextOptions(IDbContextOptionsProvider dbContextOptionsProvider, IOptions<DbConfig> dbConfig) Parameters dbContextOptionsProvider IDbContextOptionsProvider dbConfig IOptions<DbConfig>"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration.html",
    "title": "Interface IHomeDbModelConfiguration",
    "keywords": "Interface IHomeDbModelConfiguration Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public interface IHomeDbModelConfiguration : ISqlDbModelConfiguration Inherited Members ISqlDbModelConfiguration.Configure(ModelBuilder) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html",
    "title": "Interface ISqlDbModelConfiguration",
    "keywords": "Interface ISqlDbModelConfiguration Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public interface ISqlDbModelConfiguration Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure(ModelBuilder) void Configure(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration.html",
    "title": "Interface ITenantDbModelConfiguration",
    "keywords": "Interface ITenantDbModelConfiguration Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public interface ITenantDbModelConfiguration : ISqlDbModelConfiguration Inherited Members ISqlDbModelConfiguration.Configure(ModelBuilder) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html",
    "title": "Class SqlDbContext",
    "keywords": "Class SqlDbContext Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public abstract class SqlDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext SqlDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Derived HomeDbContext TenantDbContext Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SqlDbContext(DbContextOptions) protected SqlDbContext(DbContextOptions sqlOptions) Parameters sqlOptions DbContextOptions Properties ModelConfigProvider protected abstract ISqlDbModelConfiguration ModelConfigProvider { get; } Property Value ISqlDbModelConfiguration Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples. SaveChangesAsync<TId>(TId, CancellationToken) public Task<int> SaveChangesAsync<TId>(TId userId, CancellationToken cancellationToken) Parameters userId TId cancellationToken CancellationToken Returns Task<int> Type Parameters TId"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html",
    "title": "Class SqlDbContextOptions",
    "keywords": "Class SqlDbContextOptions Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public abstract class SqlDbContextOptions Inheritance object SqlDbContextOptions Derived HomeDbContextOptions TenantDbContextOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SqlDbContextOptions(IDbContextOptionsProvider, string) protected SqlDbContextOptions(IDbContextOptionsProvider dbContextOptionsProvider, string connectionString) Parameters dbContextOptionsProvider IDbContextOptionsProvider connectionString string Properties Value public DbContextOptions Value { get; } Property Value DbContextOptions"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html",
    "title": "Class TenantDbContext",
    "keywords": "Class TenantDbContext Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public class TenantDbContext : SqlDbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext SqlDbContext TenantDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members SqlDbContext.OnModelCreating(ModelBuilder) SqlDbContext.SaveChangesAsync<TId>(TId, CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantDbContext(ITenantDbModelConfiguration, TenantDbContextOptions) public TenantDbContext(ITenantDbModelConfiguration modelConfigProvider, TenantDbContextOptions sqlOptions) Parameters modelConfigProvider ITenantDbModelConfiguration sqlOptions TenantDbContextOptions Properties ModelConfigProvider protected override ISqlDbModelConfiguration ModelConfigProvider { get; } Property Value ISqlDbModelConfiguration"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html",
    "title": "Class TenantDbContextOptions",
    "keywords": "Class TenantDbContextOptions Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public class TenantDbContextOptions : SqlDbContextOptions Inheritance object SqlDbContextOptions TenantDbContextOptions Inherited Members SqlDbContextOptions.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantDbContextOptions(IDbContextOptionsProvider, ITenantOptions<DbConfig>) public TenantDbContextOptions(IDbContextOptionsProvider dbContextOptionsProvider, ITenantOptions<DbConfig> dbConfig) Parameters dbContextOptionsProvider IDbContextOptionsProvider dbConfig ITenantOptions<DbConfig>"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbMigrationContext.html",
    "title": "Class TenantDbMigrationContext",
    "keywords": "Class TenantDbMigrationContext Namespace SparkPlug.Persistence.EntityFramework.Context Assembly SparkPlug.Persistence.EntityFramework.dll public class TenantDbMigrationContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext TenantDbMigrationContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantDbMigrationContext(ITenantDbModelConfiguration, TenantDbContextOptions) public TenantDbMigrationContext(ITenantDbModelConfiguration modelConfigProvider, TenantDbContextOptions options) Parameters modelConfigProvider ITenantDbModelConfiguration options TenantDbContextOptions Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.Context",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.Context Classes HomeDbContext HomeDbContextOptions SqlDbContext SqlDbContextOptions TenantDbContext TenantDbContextOptions TenantDbMigrationContext Interfaces IHomeDbModelConfiguration ISqlDbModelConfiguration ITenantDbModelConfiguration"
  },
  "api/SparkPlug.Persistence.EntityFramework.Expressions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Expressions.html",
    "title": "Class Expressions",
    "keywords": "Class Expressions Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public static class Expressions Inheritance object Expressions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Parse(object?, Type) public static Expression Parse(object? value, Type type) Parameters value object type Type Returns Expression ToDateOnly(object) public static Expression ToDateOnly(object value) Parameters value object Returns Expression ToUniversalTime(object) public static Expression ToUniversalTime(object value) Parameters value object Returns Expression"
  },
  "api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html",
    "title": "Class FilterExtentions",
    "keywords": "Class FilterExtentions Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public static class FilterExtentions Inheritance object FilterExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFilterExpression<TEntity>(IFilter) public static Expression<Func<TEntity, bool>>? GetFilterExpression<TEntity>(this IFilter filter) Parameters filter IFilter Returns Expression<Func<TEntity, bool>> Type Parameters TEntity"
  },
  "api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html",
    "title": "Class SqlDbHealthCheck",
    "keywords": "Class SqlDbHealthCheck Namespace SparkPlug.Persistence.EntityFramework.HealthCheck Assembly SparkPlug.Persistence.EntityFramework.dll public class SqlDbHealthCheck : IHealthCheck Inheritance object SqlDbHealthCheck Implements IHealthCheck Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SqlDbHealthCheck(HomeDbContext) public SqlDbHealthCheck(HomeDbContext context) Parameters context HomeDbContext Methods CheckHealthAsync(HealthCheckContext, CancellationToken) Runs the health check, returning the status of the component being checked. public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default) Parameters context HealthCheckContext A context object associated with the current execution. cancellationToken CancellationToken A CancellationToken that can be used to cancel the health check. Returns Task<HealthCheckResult> A Task<TResult> that completes when the health check has finished, yielding the status of the component being checked."
  },
  "api/SparkPlug.Persistence.EntityFramework.HealthCheck.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HealthCheck.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.HealthCheck",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.HealthCheck Classes SqlDbHealthCheck"
  },
  "api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html",
    "title": "Class HomeModelConfigurations",
    "keywords": "Class HomeModelConfigurations Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class HomeModelConfigurations : ModelConfigurations, IHomeDbModelConfiguration, ISqlDbModelConfiguration Inheritance object ModelConfigurations HomeModelConfigurations Implements IHomeDbModelConfiguration ISqlDbModelConfiguration Inherited Members ModelConfigurations.Configure<T>(ModelBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure(ModelBuilder) public void Configure(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder"
  },
  "api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html",
    "title": "Class HomeOptions<TOptions>",
    "keywords": "Class HomeOptions<TOptions> Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll Represents options for the home-database functionality. public class HomeOptions<TOptions> : IOptions<TOptions> where TOptions : class, new() Type Parameters TOptions The type of options. Inheritance object HomeOptions<TOptions> Implements IOptions<TOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors HomeOptions(IOptions<SqlDbOptions>) Initializes a new instance of the HomeOptions<TOptions> class. public HomeOptions(IOptions<SqlDbOptions> options) Parameters options IOptions<SqlDbOptions> The options containing SQL database configuration. Properties Value Gets the value of the options. public TOptions Value { get; } Property Value TOptions"
  },
  "api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html",
    "title": "Class HomeRepository<TId, TEntity>",
    "keywords": "Class HomeRepository<TId, TEntity> Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class HomeRepository<TId, TEntity> : SqlRepository<TId, TEntity>, IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object SqlRepository<TId, TEntity> HomeRepository<TId, TEntity> Implements IRepository<TId, TEntity> Inherited Members SqlRepository<TId, TEntity>.DbContext SqlRepository<TId, TEntity>.DbSet SqlRepository<TId, TEntity>.GetDbSet() SqlRepository<TId, TEntity>.GetDbSet<Entity>() SqlRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.GetAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken) SqlRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) SqlRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) SqlRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors HomeRepository(IServiceProvider, HomeDbContext) public HomeRepository(IServiceProvider serviceProvider, HomeDbContext dbContext) Parameters serviceProvider IServiceProvider dbContext HomeDbContext"
  },
  "api/SparkPlug.Persistence.EntityFramework.ModelConfigurations.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.ModelConfigurations.html",
    "title": "Class ModelConfigurations",
    "keywords": "Class ModelConfigurations Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public abstract class ModelConfigurations Inheritance object ModelConfigurations Derived HomeModelConfigurations TenantModelConfigurations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure<T>(ModelBuilder) public void Configure<T>(ModelBuilder modelBuilder) where T : Attribute Parameters modelBuilder ModelBuilder Type Parameters T"
  },
  "api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html",
    "title": "Class BaseEntity<TId>",
    "keywords": "Class BaseEntity<TId> Namespace SparkPlug.Persistence.EntityFramework.Models Assembly SparkPlug.Persistence.EntityFramework.dll public abstract class BaseEntity<TId> : IBaseEntity<TId> where TId : new() Type Parameters TId Inheritance object BaseEntity<TId> Implements IBaseEntity<TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Id public virtual TId Id { get; set; } Property Value TId Methods GetId() public virtual TId GetId() Returns TId"
  },
  "api/SparkPlug.Persistence.EntityFramework.Models.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Models.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.Models",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.Models Classes BaseEntity<TId>"
  },
  "api/SparkPlug.Persistence.EntityFramework.Names.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Names.html",
    "title": "Class Names",
    "keywords": "Class Names Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public static class Names Inheritance object Names Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DateOnly public const string DateOnly = \"System.DateOnly\" Field Value string DateTime public const string DateTime = \"System.DateTime\" Field Value string EnumerableContains public static readonly string EnumerableContains Field Value string Int32 public const string Int32 = \"System.Int32\" Field Value string Int64 public const string Int64 = \"System.Int64\" Field Value string"
  },
  "api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkExtensions.html",
    "title": "Class PersistanceEntityFrameworkExtensions",
    "keywords": "Class PersistanceEntityFrameworkExtensions Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public static class PersistanceEntityFrameworkExtensions Inheritance object PersistanceEntityFrameworkExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPersistanceEntityFramework(IServiceCollection, IConfiguration) public static IServiceCollection AddPersistanceEntityFramework(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection ApplyMigrations(IApplicationBuilder) public static void ApplyMigrations(this IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.PersistanceEntityFrameworkModule.html",
    "title": "Class PersistanceEntityFrameworkModule",
    "keywords": "Class PersistanceEntityFrameworkModule Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class PersistanceEntityFrameworkModule : IModule Inheritance object PersistanceEntityFrameworkModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.PostgreSql.DbContextOptionsProvider.html",
    "title": "Class DbContextOptionsProvider",
    "keywords": "Class DbContextOptionsProvider Namespace SparkPlug.Persistence.EntityFramework.PostgreSql Assembly SparkPlug.Persistence.EntityFramework.PostgreSql.dll public class DbContextOptionsProvider : IDbContextOptionsProvider Inheritance object DbContextOptionsProvider Implements IDbContextOptionsProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods GetDbContextOption(string) public DbContextOptions GetDbContextOption(string connectionString) Parameters connectionString string Returns DbContextOptions"
  },
  "api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSqlExtensions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSqlExtensions.html",
    "title": "Class EntityFrameworkPostgreSqlExtensions",
    "keywords": "Class EntityFrameworkPostgreSqlExtensions Namespace SparkPlug.Persistence.EntityFramework.PostgreSql Assembly SparkPlug.Persistence.EntityFramework.PostgreSql.dll public static class EntityFrameworkPostgreSqlExtensions Inheritance object EntityFrameworkPostgreSqlExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddEntityFrameworkPostgreSql(IServiceCollection, IConfiguration) public static IServiceCollection AddEntityFrameworkPostgreSql(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection"
  },
  "api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSqlModule.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.PostgreSql.EntityFrameworkPostgreSqlModule.html",
    "title": "Class EntityFrameworkPostgreSqlModule",
    "keywords": "Class EntityFrameworkPostgreSqlModule Namespace SparkPlug.Persistence.EntityFramework.PostgreSql Assembly SparkPlug.Persistence.EntityFramework.PostgreSql.dll public class EntityFrameworkPostgreSqlModule : IModule Inheritance object EntityFrameworkPostgreSqlModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Persistence.EntityFramework.PostgreSql.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.PostgreSql.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.PostgreSql",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.PostgreSql Classes DbContextOptionsProvider EntityFrameworkPostgreSqlExtensions EntityFrameworkPostgreSqlModule"
  },
  "api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html",
    "title": "Class QueryBuilder<TEntity>",
    "keywords": "Class QueryBuilder<TEntity> Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class QueryBuilder<TEntity> where TEntity : class Type Parameters TEntity Inheritance object QueryBuilder<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors QueryBuilder(DbSet<TEntity>, IQueryRequest?) public QueryBuilder(DbSet<TEntity> dbSet, IQueryRequest? request) Parameters dbSet DbSet<TEntity> request IQueryRequest Properties Query protected IQueryable<TEntity> Query { get; } Property Value IQueryable<TEntity> Request protected IQueryRequest? Request { get; } Property Value IQueryRequest Methods CountAsync(CancellationToken) public Task<long> CountAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<long> Project() public IQueryable<JObject> Project() Returns IQueryable<JObject> Select() public IQueryable<TEntity> Select() Returns IQueryable<TEntity>"
  },
  "api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html",
    "title": "Class QueryExtentions",
    "keywords": "Class QueryExtentions Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public static class QueryExtentions Inheritance object QueryExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApplyInclude<TEntity>(IQueryable<TEntity>, Include, string?) public static IQueryable<TEntity> ApplyInclude<TEntity>(this IQueryable<TEntity> query, Include include, string? parent = null) where TEntity : class Parameters query IQueryable<TEntity> include Include parent string Returns IQueryable<TEntity> Type Parameters TEntity ApplyIncludes<TEntity>(IQueryable<TEntity>, Include[]?, string?) public static IQueryable<TEntity> ApplyIncludes<TEntity>(this IQueryable<TEntity> query, Include[]? includes, string? parent = null) where TEntity : class Parameters query IQueryable<TEntity> includes Include[] parent string Returns IQueryable<TEntity> Type Parameters TEntity ApplyPageContext<TEntity>(IQueryable<TEntity>, PageContext?) public static IQueryable<TEntity> ApplyPageContext<TEntity>(this IQueryable<TEntity> query, PageContext? pageContext) Parameters query IQueryable<TEntity> pageContext PageContext Returns IQueryable<TEntity> Type Parameters TEntity ApplyProjection<TEntity>(IQueryable<TEntity>, string[]?, Include[]?) public static IQueryable<JObject> ApplyProjection<TEntity>(this IQueryable<TEntity> query, string[]? select, Include[]? includes) Parameters query IQueryable<TEntity> select string[] includes Include[] Returns IQueryable<JObject> Type Parameters TEntity ApplySelector<TEntity>(IQueryable<TEntity>, string[]?, Include[]?) public static IQueryable<TEntity> ApplySelector<TEntity>(this IQueryable<TEntity> query, string[]? select, Include[]? includes) Parameters query IQueryable<TEntity> select string[] includes Include[] Returns IQueryable<TEntity> Type Parameters TEntity ApplySort<TEntity>(IQueryable<TEntity>, Order[]?) public static IQueryable<TEntity> ApplySort<TEntity>(this IQueryable<TEntity> query, Order[]? sort) Parameters query IQueryable<TEntity> sort Order[] Returns IQueryable<TEntity> Type Parameters TEntity ApplyWhere<TEntity>(IQueryable<TEntity>, Filter?) public static IQueryable<TEntity> ApplyWhere<TEntity>(this IQueryable<TEntity> query, Filter? filter) Parameters query IQueryable<TEntity> filter Filter Returns IQueryable<TEntity> Type Parameters TEntity GetCollectionValueExpression(Type, MemberExpression, string[]?, Include[]?) public static Expression GetCollectionValueExpression(Type elementType, MemberExpression propAccessExpression, string[]? select, Include[]? includes) Parameters elementType Type propAccessExpression MemberExpression select string[] includes Include[] Returns Expression GetEnumValueExpression(MemberExpression) public static Expression GetEnumValueExpression(MemberExpression propAccessExpression) Parameters propAccessExpression MemberExpression Returns Expression GetJObjectValueExpression(Type, Expression, string[]?, Include[]?) public static Expression GetJObjectValueExpression(Type elementType, Expression sourceParameter, string[]? select, Include[]? includes) Parameters elementType Type sourceParameter Expression select string[] includes Include[] Returns Expression GetObjectMethodCallException(Type, MemberExpression, string[]?, Include[]?) public static MethodCallExpression GetObjectMethodCallException(Type elementType, MemberExpression propAccessExpression, string[]? select, Include[]? includes) Parameters elementType Type propAccessExpression MemberExpression select string[] includes Include[] Returns MethodCallExpression GetPrimitiveMethodCallExpression(Type, MemberExpression) public static MethodCallExpression GetPrimitiveMethodCallExpression(Type elementType, MemberExpression propAccessExpression) Parameters elementType Type propAccessExpression MemberExpression Returns MethodCallExpression GetProperties(Type) public static IEnumerable<string> GetProperties(Type type) Parameters type Type Returns IEnumerable<string> GetValueExpression(MemberExpression) public static Expression GetValueExpression(MemberExpression propAccessExpression) Parameters propAccessExpression MemberExpression Returns Expression ToCamelCase(string) public static string ToCamelCase(this string str) Parameters str string Returns string"
  },
  "api/SparkPlug.Persistence.EntityFramework.SingleTenant.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.SingleTenant.html",
    "title": "Class SingleTenant",
    "keywords": "Class SingleTenant Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class SingleTenant : ITenant Inheritance object SingleTenant Implements ITenant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SingleTenant(IOptions<SqlDbOptions>) public SingleTenant(IOptions<SqlDbOptions> options) Parameters options IOptions<SqlDbOptions> Properties Id public string? Id { get; set; } Property Value string Name public string? Name { get; set; } Property Value string Options public IDictionary<string, string?> Options { get; set; } Property Value IDictionary<string, string>"
  },
  "api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html",
    "title": "Class SqlRepository<TId, TEntity>",
    "keywords": "Class SqlRepository<TId, TEntity> Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public abstract class SqlRepository<TId, TEntity> : IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object SqlRepository<TId, TEntity> Implements IRepository<TId, TEntity> Derived HomeRepository<TId, TEntity> TenantRepository<TId, TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SqlRepository(IServiceProvider, SqlDbContext) protected SqlRepository(IServiceProvider serviceProvider, SqlDbContext dbContext) Parameters serviceProvider IServiceProvider dbContext SqlDbContext Properties DbContext public SqlDbContext DbContext { get; } Property Value SqlDbContext DbSet public virtual DbSet<TEntity> DbSet { get; } Property Value DbSet<TEntity> Methods CountAsync(IQueryRequest, CancellationToken) public Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<long> CreateAsync(ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) public Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken = default) Parameters request ICommandRequest<TEntity[]> cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> DeleteAsync(TId, CancellationToken) public Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> FindAsync(IQueryRequest, CancellationToken) public Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<TEntity>> GetAsync(TId, CancellationToken) public Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> GetDbSet() public DbSet<TEntity> GetDbSet() Returns DbSet<TEntity> GetDbSet<Entity>() public DbSet<Entity> GetDbSet<Entity>() where Entity : class, IBaseEntity<TId>, new() Returns DbSet<Entity> Type Parameters Entity GetManyAsync(TId[], CancellationToken) public Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken = default) Parameters ids TId[] cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) public Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<JsonPatchDocument<TEntity>> cancellationToken CancellationToken Returns Task<TEntity> QueryAsync(IQueryRequest, CancellationToken) public Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<JObject>> ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity>"
  },
  "api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html",
    "title": "Class SqlRepositoryProvider",
    "keywords": "Class SqlRepositoryProvider Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class SqlRepositoryProvider : IRepositoryProvider Inheritance object SqlRepositoryProvider Implements IRepositoryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors SqlRepositoryProvider(IServiceProvider) public SqlRepositoryProvider(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods GetRepository<TId, TEntity>() public IRepository<TId, TEntity> GetRepository<TId, TEntity>() where TEntity : class, IBaseEntity<TId>, new() Returns IRepository<TId, TEntity> Type Parameters TId TEntity"
  },
  "api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html",
    "title": "Class TenantModelConfigurations",
    "keywords": "Class TenantModelConfigurations Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class TenantModelConfigurations : ModelConfigurations, ITenantDbModelConfiguration, ISqlDbModelConfiguration Inheritance object ModelConfigurations TenantModelConfigurations Implements ITenantDbModelConfiguration ISqlDbModelConfiguration Inherited Members ModelConfigurations.Configure<T>(ModelBuilder) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods Configure(ModelBuilder) public void Configure(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder"
  },
  "api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html",
    "title": "Class TenantRepository<TId, TEntity>",
    "keywords": "Class TenantRepository<TId, TEntity> Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public class TenantRepository<TId, TEntity> : SqlRepository<TId, TEntity>, IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object SqlRepository<TId, TEntity> TenantRepository<TId, TEntity> Implements IRepository<TId, TEntity> Inherited Members SqlRepository<TId, TEntity>.DbContext SqlRepository<TId, TEntity>.DbSet SqlRepository<TId, TEntity>.GetDbSet() SqlRepository<TId, TEntity>.GetDbSet<Entity>() SqlRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.GetAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken) SqlRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) SqlRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) SqlRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors TenantRepository(IServiceProvider, TenantDbContext) public TenantRepository(IServiceProvider serviceProvider, TenantDbContext dbContext) Parameters serviceProvider IServiceProvider dbContext TenantDbContext"
  },
  "api/SparkPlug.Persistence.EntityFramework.Types.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Types.html",
    "title": "Class Types",
    "keywords": "Class Types Namespace SparkPlug.Persistence.EntityFramework Assembly SparkPlug.Persistence.EntityFramework.dll public static class Types Inheritance object Types Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DateTimeType public static readonly Type DateTimeType Field Value Type EnumerableType public static readonly Type EnumerableType Field Value Type IntType public static readonly Type IntType Field Value Type JArrayType public static readonly Type JArrayType Field Value Type JObjectType public static readonly Type JObjectType Field Value Type JTokenType public static readonly Type JTokenType Field Value Type JsonIgnoreAttributeType public static readonly Type JsonIgnoreAttributeType Field Value Type LongType public static readonly Type LongType Field Value Type ObjectType public static readonly Type ObjectType Field Value Type StringType public static readonly Type StringType Field Value Type"
  },
  "api/SparkPlug.Persistence.EntityFramework.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework Classes Expressions FilterExtentions HomeModelConfigurations HomeOptions<TOptions> Represents options for the home-database functionality. HomeRepository<TId, TEntity> ModelConfigurations Names PersistanceEntityFrameworkExtensions PersistanceEntityFrameworkModule QueryBuilder<TEntity> QueryExtentions SingleTenant SqlRepositoryProvider SqlRepository<TId, TEntity> TenantModelConfigurations TenantRepository<TId, TEntity> Types"
  },
  "api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html",
    "title": "Class CollectionAttribute",
    "keywords": "Class CollectionAttribute Namespace SparkPlug.Persistence.MongoDb.Attributes Assembly SparkPlug.Persistence.MongoDb.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = false)] public class CollectionAttribute : Attribute Inheritance object Attribute CollectionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors CollectionAttribute(string) public CollectionAttribute(string name) Parameters name string Properties Name public string Name { get; set; } Property Value string"
  },
  "api/SparkPlug.Persistence.MongoDb.Attributes.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Attributes.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Attributes",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Attributes Classes CollectionAttribute"
  },
  "api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html",
    "title": "Class MongoDbOptions",
    "keywords": "Class MongoDbOptions Namespace SparkPlug.Persistence.MongoDb.Configuration Assembly SparkPlug.Persistence.MongoDb.dll public class MongoDbOptions Inheritance object MongoDbOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MongoDbOptions() public MongoDbOptions() Fields ConfigPath public const string ConfigPath = \"SparkPlug:MongoDb\" Field Value string Properties ConnectionString [Required] public string ConnectionString { get; set; } Property Value string"
  },
  "api/SparkPlug.Persistence.MongoDb.Configuration.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Configuration.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Configuration",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Configuration Classes MongoDbOptions"
  },
  "api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html",
    "title": "Class MongoDbClient",
    "keywords": "Class MongoDbClient Namespace SparkPlug.Persistence.MongoDb.Context Assembly SparkPlug.Persistence.MongoDb.dll public class MongoDbClient Inheritance object MongoDbClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MongoDbClient(ITenantOptions<DbConfig>) public MongoDbClient(ITenantOptions<DbConfig> options) Parameters options ITenantOptions<DbConfig> Properties Database public IMongoDatabase Database { get; } Property Value IMongoDatabase Methods GetClient(string) public MongoClient GetClient(string connectionString) Parameters connectionString string Returns MongoClient GetCollection<TEntity>(string) public IMongoCollection<TEntity> GetCollection<TEntity>(string collectionName) Parameters collectionName string Returns IMongoCollection<TEntity> Type Parameters TEntity"
  },
  "api/SparkPlug.Persistence.MongoDb.Context.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Context.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Context",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Context Classes MongoDbClient"
  },
  "api/SparkPlug.Persistence.MongoDb.Extention.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Extention.html",
    "title": "Class Extention",
    "keywords": "Class Extention Namespace SparkPlug.Persistence.MongoDb Assembly SparkPlug.Persistence.MongoDb.dll public static class Extention Inheritance object Extention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>) public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this ICompositeFilter compositeFilter, FilterDefinitionBuilder<TEntity> builder) Parameters compositeFilter ICompositeFilter builder FilterDefinitionBuilder<TEntity> Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>) public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this IFieldFilter fieldFilter, FilterDefinitionBuilder<TEntity> builder) Parameters fieldFilter IFieldFilter builder FilterDefinitionBuilder<TEntity> Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this IFilter filter, FilterDefinitionBuilder<TEntity> builder) Parameters filter IFilter builder FilterDefinitionBuilder<TEntity> Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>) public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this IUnaryFilter unaryFilter, FilterDefinitionBuilder<TEntity> builder) Parameters unaryFilter IUnaryFilter builder FilterDefinitionBuilder<TEntity> Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinitions<TEntity>(IFilter[], FilterDefinitionBuilder<TEntity>) public static FilterDefinition<TEntity>[] GetFilterDefinitions<TEntity>(this IFilter[] filters, FilterDefinitionBuilder<TEntity> builder) Parameters filters IFilter[] builder FilterDefinitionBuilder<TEntity> Returns FilterDefinition<TEntity>[] Type Parameters TEntity"
  },
  "api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html",
    "title": "Class MongoDbHealthCheck",
    "keywords": "Class MongoDbHealthCheck Namespace SparkPlug.Persistence.MongoDb.HealthCheck Assembly SparkPlug.Persistence.MongoDb.dll public class MongoDbHealthCheck : IHealthCheck Inheritance object MongoDbHealthCheck Implements IHealthCheck Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MongoDbHealthCheck(IOptions<MongoDbOptions>) public MongoDbHealthCheck(IOptions<MongoDbOptions> options) Parameters options IOptions<MongoDbOptions> Methods CheckHealthAsync(HealthCheckContext, CancellationToken) Runs the health check, returning the status of the component being checked. public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default) Parameters context HealthCheckContext A context object associated with the current execution. cancellationToken CancellationToken A CancellationToken that can be used to cancel the health check. Returns Task<HealthCheckResult> A Task<TResult> that completes when the health check has finished, yielding the status of the component being checked."
  },
  "api/SparkPlug.Persistence.MongoDb.HealthCheck.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.HealthCheck.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.HealthCheck",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.HealthCheck Classes MongoDbHealthCheck"
  },
  "api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html",
    "title": "Class BaseEntity<TId>",
    "keywords": "Class BaseEntity<TId> Namespace SparkPlug.Persistence.MongoDb.Models Assembly SparkPlug.Persistence.MongoDb.dll [BsonIgnoreExtraElements] [BsonDiscriminator(RootClass = true)] public abstract class BaseEntity<TId> : IBaseEntity<TId> Type Parameters TId Inheritance object BaseEntity<TId> Implements IBaseEntity<TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Properties Id [BsonElement(\"_id\")] [BsonId] [BsonIgnoreIfDefault] [BsonRepresentation(BsonType.ObjectId)] public virtual TId Id { get; set; } Property Value TId Methods GetId() public virtual TId GetId() Returns TId"
  },
  "api/SparkPlug.Persistence.MongoDb.Models.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Models.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Models",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Models Classes BaseEntity<TId>"
  },
  "api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html",
    "title": "Class MongoRepository<TId, TEntity>",
    "keywords": "Class MongoRepository<TId, TEntity> Namespace SparkPlug.Persistence.MongoDb Assembly SparkPlug.Persistence.MongoDb.dll public class MongoRepository<TId, TEntity> : IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Inheritance object MongoRepository<TId, TEntity> Implements IRepository<TId, TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MongoRepository(IServiceProvider) public MongoRepository(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Properties Collection public virtual IMongoCollection<TEntity> Collection { get; } Property Value IMongoCollection<TEntity> Methods CountAsync(IQueryRequest, CancellationToken) public Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<long> CreateAsync(ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) public Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken = default) Parameters request ICommandRequest<TEntity[]> cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> DeleteAsync(TId, CancellationToken) public Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> FindAsync(IQueryRequest, CancellationToken) public Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<TEntity>> GetAsync(TId, CancellationToken) public Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken = default) Parameters id TId cancellationToken CancellationToken Returns Task<TEntity> GetByFilter(FilterDefinition<TEntity>) public IFindFluent<TEntity, TEntity> GetByFilter(FilterDefinition<TEntity> filter) Parameters filter FilterDefinition<TEntity> Returns IFindFluent<TEntity, TEntity> GetChangeStreamCursor(ChangeStreamFullDocumentOption) public IChangeStreamCursor<BsonDocument> GetChangeStreamCursor(ChangeStreamFullDocumentOption fullDocOption = ChangeStreamFullDocumentOption.UpdateLookup) Parameters fullDocOption ChangeStreamFullDocumentOption Returns IChangeStreamCursor<BsonDocument> GetChangeStreamOptions(ChangeStreamFullDocumentOption) public ChangeStreamOptions GetChangeStreamOptions(ChangeStreamFullDocumentOption option) Parameters option ChangeStreamFullDocumentOption Returns ChangeStreamOptions GetFilterBuilder() public FilterDefinitionBuilder<TEntity> GetFilterBuilder() Returns FilterDefinitionBuilder<TEntity> GetFindFluent(ProjectionDefinition<TEntity>?, FilterDefinition<TEntity>?, SortDefinition<TEntity>?, IPageContext?) public IFindFluent<TEntity, TEntity> GetFindFluent(ProjectionDefinition<TEntity>? projection, FilterDefinition<TEntity>? filter = null, SortDefinition<TEntity>? sorts = null, IPageContext? pc = null) Parameters projection ProjectionDefinition<TEntity> filter FilterDefinition<TEntity> sorts SortDefinition<TEntity> pc IPageContext Returns IFindFluent<TEntity, TEntity> GetIdFilterDefinition(TId) public virtual FilterDefinition<TEntity> GetIdFilterDefinition(TId id) Parameters id TId Returns FilterDefinition<TEntity> GetManyAsync(TId[], CancellationToken) public Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken = default) Parameters ids TId[] cancellationToken CancellationToken Returns Task<IEnumerable<TEntity>> GetPipelineDefinition() public PipelineDefinition<ChangeStreamDocument<BsonDocument>, BsonDocument> GetPipelineDefinition() Returns PipelineDefinition<ChangeStreamDocument<BsonDocument>, BsonDocument> GetProjectionBuilder() public ProjectionDefinitionBuilder<TEntity> GetProjectionBuilder() Returns ProjectionDefinitionBuilder<TEntity> GetQuery(IQueryRequest) public IFindFluent<TEntity, TEntity> GetQuery(IQueryRequest request) Parameters request IQueryRequest Returns IFindFluent<TEntity, TEntity> GetSortBuilder() public SortDefinitionBuilder<TEntity> GetSortBuilder() Returns SortDefinitionBuilder<TEntity> GetUpdateBuilder() public UpdateDefinitionBuilder<TEntity> GetUpdateBuilder() Returns UpdateDefinitionBuilder<TEntity> GetUpdateDef(TEntity, bool) public UpdateDefinition<TEntity> GetUpdateDef(TEntity data, bool patch = false) Parameters data TEntity patch bool Returns UpdateDefinition<TEntity> PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) public Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<JsonPatchDocument<TEntity>> cancellationToken CancellationToken Returns Task<TEntity> QueryAsync(IQueryRequest, CancellationToken) public Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters request IQueryRequest cancellationToken CancellationToken Returns Task<IList<JObject>> ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity> UpdateAsync(FilterDefinition<TEntity>, UpdateDefinition<TEntity>) public Task<UpdateResult> UpdateAsync(FilterDefinition<TEntity> filter, UpdateDefinition<TEntity> update) Parameters filter FilterDefinition<TEntity> update UpdateDefinition<TEntity> Returns Task<UpdateResult> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) public Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters id TId request ICommandRequest<TEntity> cancellationToken CancellationToken Returns Task<TEntity>"
  },
  "api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html",
    "title": "Class MongoRepositoryProvider",
    "keywords": "Class MongoRepositoryProvider Namespace SparkPlug.Persistence.MongoDb Assembly SparkPlug.Persistence.MongoDb.dll public class MongoRepositoryProvider : IRepositoryProvider Inheritance object MongoRepositoryProvider Implements IRepositoryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Constructors MongoRepositoryProvider(IServiceProvider) public MongoRepositoryProvider(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Methods GetRepository<TId, TEntity>() public IRepository<TId, TEntity> GetRepository<TId, TEntity>() where TEntity : class, IBaseEntity<TId>, new() Returns IRepository<TId, TEntity> Type Parameters TId TEntity"
  },
  "api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbExtensions.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbExtensions.html",
    "title": "Class PersistanceMongoDbExtensions",
    "keywords": "Class PersistanceMongoDbExtensions Namespace SparkPlug.Persistence.MongoDb Assembly SparkPlug.Persistence.MongoDb.dll public static class PersistanceMongoDbExtensions Inheritance object PersistanceMongoDbExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddPersistanceMongoDb(IServiceCollection, IConfiguration) public static IServiceCollection AddPersistanceMongoDb(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection"
  },
  "api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.PersistanceMongoDbModule.html",
    "title": "Class PersistanceMongoDbModule",
    "keywords": "Class PersistanceMongoDbModule Namespace SparkPlug.Persistence.MongoDb Assembly SparkPlug.Persistence.MongoDb.dll public class PersistanceMongoDbModule : IModule Inheritance object PersistanceMongoDbModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Methods AddModule(IServiceCollection, IConfiguration) public void AddModule(IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration UseMiddelwares(IApplicationBuilder) public void UseMiddelwares(IApplicationBuilder app) Parameters app IApplicationBuilder UseModule(IApplicationBuilder) public void UseModule(IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/SparkPlug.Persistence.MongoDb.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb Classes Extention MongoRepositoryProvider MongoRepository<TId, TEntity> PersistanceMongoDbExtensions PersistanceMongoDbModule"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SparkPlug",
    "keywords": "SparkPlug SparkPlug is an open-source project that provides a set of reusable components and templates for building web applications using ASP.NET Core and Angular. The project aims to simplify and speed up the development of web applications by providing a comprehensive set of tools and guidelines for building modern, scalable, and maintainable applications. The SparkPlug project includes several modules that provide functionality for common web application features such as authentication, authorization, logging, error handling, caching, and more. The modules are designed to be easy to use and can be easily integrated into new or existing web applications. In addition to the modules, SparkPlug also provides a set of starter templates that can be used as a starting point for new web applications. The templates include preconfigured settings for the modules, as well as sample code and documentation to help developers get up and running quickly."
  },
  "articles/Roadmap.html": {
    "href": "articles/Roadmap.html",
    "title": "SparkPlug Roadmap",
    "keywords": "SparkPlug Roadmap Framework Development Storage Abstraction and Azure storage Implementation to access and manage the files. Puppeteer Sharp project for PDF generation Common string extenstion for string Case chagse. ex. camelCase, Snake_Case, PascalCase, etc. SparkPlug.Api Load SparkPlug dependency module dynamically Composite Api Controller Template development for Composite Key tables - Workaround is sarogate Id for Composite Key tables. Data Cache implementation - Done CompositeRequest handling api development - InProgress Enable Http 2.0/3.0 in WebApi Database.EnsureCreated() move to Create Tenant api - When onboard new tenant, this will create the db schema. Database.Migrate() should be called in application Startup. SparkPlug.Persistance SparkPlug.Persistance.EntityFramework Repository should support Composite Key tables In QueryRequeset, add Exclude[] property to exclude properties in response. If we provide Exclude[] without select, It returns all the columns except Exclude properties. Filter criteria need to add in all the QueryRequest for each entity to get only live data. Filter criteria for included entity add in QueryRequest. - Done for where condition. Support Not operator for all cobinations of Filter. Like NotIn, NotEq, NotNull, etc. DB Migrations using ef migrate command. Sample Application Development Azure Authentication integration Azure Application Insights integration Sample project for Single Tenant and Multi Tenant Commandline Interface (CLI) Development Razor Template Engine Module. Don't use RazorLight dll for template engine. CLI Base Framework with help of Spectre.Console CLI for SparkPlug Infrastructure Development OPA (Open Policy Agent) based authorization module Add local machie as Azure Kubernetes worker node Istio setup in kubernetes environment DevOps Development Github Actions for CICD - In Progress Create GitHub Actions pipeline for generating SKD from OpenAPI 3.0 json file Dockerfile for dotnet 8 with AOT Compilation for apis. To be validate Json.NET (Newtonsoft.Json) can be replaced by System.Text.Json. Which framework is providing high performance Which framework is supporting Expression based query object construction. JSON.NET supportign and implemented. Child object property name also need to be in camael case in HTTP Response."
  },
  "articles/console.html": {
    "href": "articles/console.html",
    "title": "Command Line Interface (CLI)",
    "keywords": "Command Line Interface (CLI) Microsoft CLI Global tool CLI Framework - OpenSource Microsoft CLI Sample Source Code"
  },
  "articles/get-started.html": {
    "href": "articles/get-started.html",
    "title": "",
    "keywords": "Configuration { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\", \"SparkPlug.*\": \"Information\" } }, \"SparkPlug\": { \"Api\": { \"ApplicationName\": \"Web Api\", \"PathBase\": \"/api/v1\" }, \"SqlDb\": { \"ConnectionString\": \"\" } } } Additional connection string attribute required to ignore certificate issue in development Trust Server Certificate=true may required in connection string. SparkPlug.Api.PathBase This property refers to the application base path. If the path contains {tanant} then the application can handle multi tenant's request. The Tenat Id will be passed in the URL path. Also appsettings.json file connection string consider as tenant managemetn database. Single Tenant Application Ex. \"PathBase\" : \"/api/v1/\" Multi Tenant Application Ex. \"PathBase\" : \"/api/v1/{tanant}/\" TraceIdentifier vs CorrelationId utilizing TraceIdentifier for local request tracking within a service and CorrelationId for tracking across services in a distributed environment. Optimization dotnet counters monitor --name Api.Module.Sample --counters \"cpu-usage\" \"working-set\" dotnet-monitor collect 34136 --providers cpu memory"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "SparkPlug",
    "keywords": "SparkPlug"
  },
  "articles/modules.html": {
    "href": "articles/modules.html",
    "title": "SparkPlug Module",
    "keywords": "SparkPlug Module namespace SparkPlug.Persistence.Abstractions; public interface IModule { void AddModule(IServiceCollection services); void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider); void UseMiddelwares(IApplicationBuilder app); } AddModule(IServiceCollection services): This method is responsible for configuring services that the module requires. You can use this method to register services, repositories, and other dependencies that your module needs to function properly. For example, if your module requires database access, you could register database-related services here. UseModule(IApplicationBuilder app, IServiceProvider serviceProvider): This method is intended to be used during application startup to configure the module's behavior. You can use this method to set up routes, controllers, and other components that your module provides. It's important to note that you should be cautious about modifying the app parameter, as it affects the global application configuration. UseMiddlewares(IApplicationBuilder app): This method seems to be used for setting up any middlewares specific to your module. Middlewares are components that can handle requests and responses, and they are typically placed in the request/response pipeline. This allows you to perform various tasks, such as authentication, logging, and exception handling. This method would provide a way to add middleware components specific to your module."
  },
  "articles/open-api.html": {
    "href": "articles/open-api.html",
    "title": "Open API 3.0",
    "keywords": "Open API 3.0 Swagger UI will be enabled only in development mode."
  },
  "examples/RedisCacheImpl.html": {
    "href": "examples/RedisCacheImpl.html",
    "title": "Redis IDistributedCache Implementation Examle",
    "keywords": "Redis IDistributedCache Implementation Examle using System; using System.Text; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.Caching.Distributed; using StackExchange.Redis; namespace SparkPlug.Caching { public class RedisCache : IDistributedCache { private readonly ConnectionMultiplexer _redis; public RedisCache(ConnectionMultiplexer redis) { _redis = redis; } public byte[] Get(string key) { var db = _redis.GetDatabase(); return db.StringGet(key); } public Task<byte[]> GetAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); return db.StringGetAsync(key, token); } public void Set(string key, byte[] value, DistributedCacheEntryOptions options) { var db = _redis.GetDatabase(); var expiry = options.AbsoluteExpirationRelativeToNow; db.StringSet(key, value, expiry); } public Task SetAsync(string key, byte[] value, DistributedCacheEntryOptions options, CancellationToken token = default) { var db = _redis.GetDatabase(); var expiry = options.AbsoluteExpirationRelativeToNow; return db.StringSetAsync(key, value, expiry, token); } public void Refresh(string key) { var db = _redis.GetDatabase(); var value = db.StringGet(key); if (value.HasValue) { db.KeyExpire(key, TimeSpan.FromSeconds(30)); } } public Task RefreshAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); var value = db.StringGet(key); if (value.HasValue) { return db.KeyExpireAsync(key, TimeSpan.FromSeconds(30), token); } return Task.CompletedTask; } public void Remove(string key) { var db = _redis.GetDatabase(); db.KeyDelete(key); } public Task RemoveAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); return db.KeyDeleteAsync(key, token); } } }"
  },
  "examples/Reference.html": {
    "href": "examples/Reference.html",
    "title": "Reference",
    "keywords": "Reference Development Reference CQRS MediatR Ref.1, Ref. 2, Ref. 3 Azure Service Bus Ref. 1, Ref. 2, Ref. 3 (Topic) Authentication & Authrization: Ref. 1 External Identity Provider Ref. 2 Ref. 3 Ref. 4 for Mobile Ref. 5 OpenIdConnect Authentication Swashbuckle Configuration Reference Ref. 1 Ref. 2 Authorization Configuration in Swagger Environmnt Variable Template Engines WebApi Samples WebApi History 2.0 to 7.0 Dynamically Generate Controller Dotnet Tools SAST - Sonar Cloud - Code Coverage SAST - Sonar Cloud - Code Coverage DAST - owasp-zap-api-scan DAST - owasp-zap Structured Query Structured Query Example Mongo DB MongoDb Changestream Mongo DB Sample Query in JS Create Custom Configuration Provider Ref. 1, Ref. 2 Web API Dev Reference Multi Tenancy Ref. 1 Ref. 2 REST Patch Api Javascript JSON Patch Document C# Github Readme File Reference Nuget, Build, Other dotnet setup Web Api Development Reference ABP Framework Database Migration Fluent Migration Open Policy Agent OPA Playground DevOps Reference Bump Version Number C# Development - VS Code Extensions Top 10 VS Code Extension"
  },
  "examples/TODO.html": {
    "href": "examples/TODO.html",
    "title": "Todo",
    "keywords": "Todo Serializer Implmentation for ApiRequests to send as payload or querystring in SparkPlug.Contract library. a. .ToJson() RESTSharp integration to get or post data to REST API Url in SparkPlug.Contract library. a. .Get(\"/user/10\") b. .Post(\"/user\") c. .Put(\"/user\") d. .Delete(\"/user/10\") e. .Patch(\"/user/10\") SparkPlug.Api Unit Testing with MongoDb GenericTypeControllerFeatureProvider - Add controller to feature.Controllers with sapcific api verbs (only GET and POST like). - Feature rejected due to introduce service layer. Generic Cache interface need to be implement for SparkPlug.Api Distributed Cache interface implementation to cache data including Tenant information. Update or reload config if the configuration is modifyed in the cloud. Functional Module list a. RBAC based Authorization, UI Screens mappings for role b. Multi-Tenancy Management c. Workflow engine (Camunda) OpenApi with API Scope declaration and C# attribute to define scope of the API. If table contains Composite Key, Need to handle it. (CompositeApi attribute and [Key(1)], [Key(2)] attribute implement for composite key table.) Database Migration using EF migration support Include Status column in all the select, update, delete queries. Done All Rest API make it workable with MongoDb sample Application. - Done Dynamically add api version in Swagger docs. - Done Transactions handling - Done Enable Table Concurrency in API (Rev column need to add) - Done Enable Architecture / Audit columns in APIs. - Done Soft Delete (status Column) added by IDeletableEntity interface. - Done INCLUDE Foreign table columns in response for EntityFramework. - Done FilterType renamed to Kind - Done Between field operator need to implement - Done Ask Inside AddService methods, how to access IOptions instance? Geting error if we call 2 times an api (same context object used.) Optimization Research Tenant Resolving and Api execution in each rquest can be parallely execute until the tenant details required in api execution. Involved files: 1. SparkPlug.Business.Tenancy.Service\\Middleware\\TenantResolverMiddleware.cs 2. SparkPlug.Business.Tenancy.Api\\Microsoft\\Extensions\\DependencyInjection\\ServiceCollectionExtenstions.cs"
  },
  "examples/WebApi.html": {
    "href": "examples/WebApi.html",
    "title": "SparkPlug.Api",
    "keywords": "SparkPlug.Api Focused Area in this framework Authentication and authorization: Ensure that only authorized users have access to the API. Security: Use secure protocols such as SSL/TLS and implement security measures such as input validation, rate limiting, and firewalls. Scalability: Ensure that the API can handle large amounts of traffic and handle it efficiently. Performance: Optimize the API's performance to reduce response times and increase efficiency. Error handling: Implement robust error handling to ensure that the API can handle errors gracefully and provide meaningful error messages to the clients. Documentation: Provide clear and comprehensive documentation for the API, including API specifications and examples of how to use the API. Versioning: Implement API versioning to ensure that older clients can continue to work with the API even as new features are added. Monitoring and logging: Monitor the API's performance and usage to detect and diagnose issues, and log important events to help diagnose problems and improve the API. Program.cs - Done Startup.cs - Done OpenApi Configuration - Done Dependecny Injection - Done Dotnet core DI Logging Serilog SimpleConsole Tracing Azure Application Insights Configuration appsettings.json - Done Azure Vault Configuration - Kubernetes Config Map - Filters Global Exception Filter - Done Authentication Filter Exception Handling - Done Health Check Database Health Check - Done Local Resource Manual Health check Azure Service's Health Check Monitoring Azure Monitor Entity Framework Code First Create DB Schema - Done Create Migration Script Execute Migration Script Db First Configuration Validation DDD - Domain Driven Design CQRS MediatR Service Bus Integration Azure Service Bus Rabbit MQ Kafka Multi-Tenancy - Done CORS CI/CD pipleline - Done Github Actions - Done Container Docker Build Helm Chart Caching Distributed Memory Cache Distributed Redis Cache REST Api Maturity Model"
  },
  "examples/dotnet.html": {
    "href": "examples/dotnet.html",
    "title": "Nuget Package publish",
    "keywords": "HTTPS Certificate for Development dotnet dev-certs https --trust Optimized build <PublishTrimmed>true</PublishTrimmed> will gives more compiletime waring. more works required. <PropertyGroup> <PublishTrimmed>true</PublishTrimmed> <PublishSingleFile>true</PublishSingleFile> <SelfContained>true</SelfContained> </PropertyGroup> Nuget Package publish Reference The project file should be like below. Readme and license file should be included in the project file and the path should have these files. <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>net8.0</TargetFramework> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> <AssemblyVersion>0.0.0.1</AssemblyVersion> <FileVersion>0.0.0.1</FileVersion> <Version>0.0.1-alpha1</Version> <PackageReadmeFile>README.md</PackageReadmeFile> <PackageLicenseFile>LICENSE.txt</PackageLicenseFile> </PropertyGroup> <ItemGroup> </ItemGroup> <ItemGroup> <None Include=\"README.md\" Pack=\"true\" PackagePath=\"README.md\"/> <None Include=\"LICENSE.txt\" Pack=\"true\" PackagePath=\"LICENSE.txt\"/> </ItemGroup> </Project>"
  },
  "examples/ef-entity-relationship.html": {
    "href": "examples/ef-entity-relationship.html",
    "title": "Entity Framework Entity Relationship",
    "keywords": "Entity Framework Entity Relationship One-to-One Relationship: Suppose you have two entities named Person and Address, where a Person can have one Address and an Address belongs to one Person. The Person entity has a foreign key AddressId referencing the Address entity's primary key Id. public class Person { public int Id { get; set; } public string Name { get; set; } public int AddressId { get; set; } public Address Address { get; set; } } public class Address { public int Id { get; set; } public string Street { get; set; } public string City { get; set; } public string State { get; set; } public Person Person { get; set; } } You can configure this relationship in the OnModelCreating method like this: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .HasOne(p => p.Address) .WithOne(a => a.Person) .HasForeignKey<Person>(p => p.AddressId); } In this example, we use the HasOne method to specify that a Person has one Address, and the WithOne method to specify that an Address belongs to one Person. Finally, we use the HasForeignKey method to specify that the Person entity's AddressId property should be used as the foreign key for this relationship. One-to-Many Relationship: public class Order { public int Id { get; set; } public ICollection<OrderItem> Items { get; set; } } public class OrderItem { public int Id { get; set; } public int Quantity { get; set; } public decimal Price { get; set; } public int OrderId { get; set; } public Order Order { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Order>() .HasMany(o => o.Items) .WithOne(i => i.Order) .HasForeignKey(i => i.OrderId); Many-to-Many Relationship: public class Student { public int Id { get; set; } public string Name { get; set; } public ICollection<Course> Courses { get; set; } } public class Course { public int Id { get; set; } public string Name { get; set; } public ICollection<Student> Students { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Student>() .HasMany(s => s.Courses) .WithMany(c => c.Students) .UsingEntity(j => j.ToTable(\"StudentCourses\")); Many-to-One Relationship: public class Order { public int Id { get; set; } public Customer Customer { get; set; } public ICollection<OrderItem> Items { get; set; } } public class Customer { public int Id { get; set; } public string Name { get; set; } } public class OrderItem { public int Id { get; set; } public int Quantity { get; set; } public decimal Price { get; set; } public int OrderId { get; set; } public Order Order { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Order>() .HasOne(o => o.Customer) .WithMany() .HasForeignKey(o => o.CustomerId); modelBuilder.Entity<Order>() .HasMany(o => o.Items) .WithOne(i => i.Order) .HasForeignKey(i => i.OrderId);"
  },
  "examples/git.html": {
    "href": "examples/git.html",
    "title": "Git",
    "keywords": "Git # Revert 1 commit from remote git push --force origin HEAD~1:main # Revert 1 commit from local git reset HEAD~1"
  },
  "examples/intro.html": {
    "href": "examples/intro.html",
    "title": "SparkPlug Examples",
    "keywords": "SparkPlug Examples"
  },
  "examples/kestral.html": {
    "href": "examples/kestral.html",
    "title": "",
    "keywords": "Set Maximum qeury string length in Kestral server { \"Kestrel\": { \"Limits\": { \"MaxQueryStringLength\": 4096 } } }"
  },
  "examples/migration.html": {
    "href": "examples/migration.html",
    "title": "Database Migration",
    "keywords": "Database Migration dotnet ef migrations --list dotnet ef migrations add InitialCreate --startup-project ./sdk/ClientSdkGenerator --project ./src/SparkPlug.DesignTimeMigration --context HomeDbMigrationContext --debug"
  },
  "examples/modules.html": {
    "href": "examples/modules.html",
    "title": "Module Dependency",
    "keywords": "Module Dependency SparkPlug.Business. .Domain SparkPlug.Persistence.Abstractions SparkPlug.Business. .Repository.Sql SparkPlug.Persistence.Abstractions SparkPlug.Persistence.EntityFramework SparkPlug. .Domain SparkPlug.Business. .Repository.Mongo SparkPlug.Persistence.Abstractions SparkPlug.Persistence.MongoDb SparkPlug.Business. .Domain SparkPlug.Business. .Service SparkPlug.Contracts SparkPlug.Persistence.Abstractions SparkPlug.Business. .Domain SparkPlug.Business. .Api SparkPlug.Contracts SparkPlug.Api SparkPlug.Business. .Service Application SparkPlug. .Host SparkPlug.Business. .Api SparkPlug.Business. .Api SparkPlug.Business. .Api"
  },
  "examples/postgresql.html": {
    "href": "examples/postgresql.html",
    "title": "",
    "keywords": "Sample Connection String Server=sssssss.postgres.database.azure.com;Database=ddddddd;Port=5432;User Id=uuuuuuu;Password=ppppppp;Ssl Mode=Require;Trust Server Certificate=true;Search Path=tenant_1,public Note: Search Path denotes that tenants' schema if the the tenant is not using defalt schema. Search Path will containe comma separated schema names like example connection string Search Path=tenant_1,public. TenantOptions \"DbConfig:ConnectionString\" Create new Schema CREATE SCHEMA tenant_1; List Schema SELECT schema_name FROM information_schema.schemata; Switch Schema SET search_path TO tenant_1; SELECT * FROM Tenant_1.\"MenuItem\"; Converty the type of a column from one type to another ALTER TABLE tenant_1.\"MenuItem\" ALTER COLUMN \"Properties\" TYPE json USING \"Properties\"::json; Get the data type for a column SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'MenuItem' AND column_name = 'Properties'; JSON in postgresql .Net Reference Db Migration DB Migration Creating Separate Migration Project dotnet ef migrations add InitialCreate --output-dir Your/Directory"
  },
  "examples/rbac.html": {
    "href": "examples/rbac.html",
    "title": "RBAC Spec",
    "keywords": "RBAC Spec Models Resources Id Resource // 3. Verb Scops Ex: Id scope scope-group resource 1 read user-mgt get /user/{id}, 2 write user-mgt post /user/{id} 3 read user-mgt get /user/{id}/profile 3 manage user-mgt get /user/{id}/profile Id scopes scope-group resource 1 read, write, manage user-mgt /user/{id} Scope Read, Query, Write, Message, Users Id User Groups Id Group UserGroups UserId GroupId Roles Id Name RoleResourcePermissionMap Permissions Id Tools: Platform tools Kubernetes Helm OPA - Open Policy Agent Redis / TIKV / Inmemroy Cache Postgre SQL Database observability and monitoring OpenTelemetry Instrumentation Libraries: These libraries are integrated into your application code to automatically generate telemetry data, including traces, metrics, and contextual information. They provide the foundation for collecting observability data from your services. OpenTelemetry Collector: The collector is a central component that receives, processes, and exports telemetry data. It can be configured to gather data from OpenTelemetry-instrumented applications and then route that data to different backends for further analysis and visualization. Jaeger or Zipkin: These distributed tracing systems can receive trace data from the OpenTelemetry Collector. They allow you to visualize the flow of requests across your microservices, identify bottlenecks, and analyze the latency of individual service calls. Prometheus: Prometheus can be used alongside OpenTelemetry for metrics collection and monitoring. The OpenTelemetry Collector can export metrics data to Prometheus, which can then be used to create dashboards, set up alerts, and perform long-term metrics analysis. Grafana: Grafana can be used to visualize telemetry data collected by various sources, including Jaeger, Prometheus, and other OpenTelemetry exporters. You can create custom dashboards to display traces, metrics, and logs, providing a unified view of your system's observability data. Loki / Elasticsearch : While not directly part of OpenTelemetry, Loki can complement your observability stack by collecting logs and integrating with Grafana for log visualization and analysis. When deploying these tools together, consider the following: Integration and Compatibility: Ensure that the versions of the tools you choose are compatible with each other. Check the documentation and recommended setups for any integration considerations. Resource Utilization: Keep in mind the resource requirements of each tool when deploying them. Distributed tracing systems like Jaeger and metrics databases like Prometheus can consume resources, so proper resource planning is important. Configuration and Setup: Each tool may require configuration and setup. Plan how data flows between the tools, configure exporters, and create appropriate dashboards. Monitoring and Maintenance: Regularly monitor the health and performance of your observability stack. Update the tools and configurations as needed to adapt to changes in your application and infrastructure."
  },
  "examples/sample-request.html": {
    "href": "examples/sample-request.html",
    "title": "",
    "keywords": "sample Query Request { \"select\": [ \"PersonName\", \"Department\", \"Salary\", \"Id\" ], \"where\": { \"op\": 0, \"filterType\": 0, \"filters\": [{ \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Demo\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": 1 }, { \"field\": \"Salary\", \"direction\": 1 } ], \"page\": { \"pageNo\": 2, \"pageSize\": 0 } } ## Sample request with Includes options. { \"select\": [ \"PersonName\", \"Department\", \"Salary\", \"Id\", \"Address\" ], \"includes\": [ { \"name\": \"Address\", \"select\": [\"Id\", \"Street\"] } ], \"where\": { \"op\": 1, \"filterType\": 0, \"filters\": [{ \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Demo1\" }, { \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Natarajan Ganapathi\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": 1 }, { \"field\": \"Salary\", \"direction\": 1 } ], \"page\": { \"pageNo\": 1, \"pageSize\": 10 } } Sample Request with ENUM as String { \"select\": [\"personName\", \"Department\", \"Salary\", \"id\", \"address\"], \"includes\": [ { \"name\": \"Address\", \"select\": [\"Id\", \"Street\"] } ], \"where\": { \"filterType\": \"COMPOSITE\", \"op\": \"OR\", \"filters\": [ { \"filterType\": \"FIELD\", \"op\": \"EQUAL\", \"field\": \"department\", \"value\": \"IT\" }, { \"filterType\": \"FIELD\", \"op\": \"EQUAL\", \"field\": \"PersonName\", \"value\": \"Demo User\" } ] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": \"DESC\" }, { \"field\": \"Salary\", \"direction\": \"ASC\" } ], \"page\": { \"pageNo\": 1, \"pageSize\": 10 } } C# Include child tables var users = context.Users .Include(u => u.Address) .Include(u => u.Profile) .Select(u => new { u.Id, u.Name, Address = new { u.Address.Street, u.Address.City }, Profile = new { u.Profile.Bio, u.Profile.Age } }) .ToList(); var users = context.Users .Include(u => u.Address) .Select(u => new { u.Id, u.PersonName, u.MobileNo, Address = new { u.Address.Id, u.Address.FlatNo } }) .ToList(); Sample Request for Patch Document Sample Request object to update the MenuItem object { \"data\": [ { \"op\": \"replace\", \"path\": \"/moduleCode\", \"value\": \"App Developer Module\" }, { \"op\": \"replace\", \"path\": \"/menuCode\", \"value\": \"AppDev\" } ] }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SparkPlug",
    "keywords": "Welcome to SparkPlug"
  }
}