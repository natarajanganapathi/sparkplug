{
  "api/index.html": {
    "href": "api/index.html",
    "title": "SparkPlug",
    "keywords": "SparkPlug SparkPlug is an open-source project that provides a set of reusable components and templates for building web applications using ASP.NET Core and Angular. The project aims to simplify and speed up the development of web applications by providing a comprehensive set of tools and guidelines for building modern, scalable, and maintainable applications. The SparkPlug project includes several modules that provide functionality for common web application features such as authentication, authorization, logging, error handling, caching, and more. The modules are designed to be easy to use and can be easily integrated into new or existing web applications. In addition to the modules, SparkPlug also provides a set of starter templates that can be used as a starting point for new web applications. The templates include preconfigured settings for the modules, as well as sample code and documentation to help developers get up and running quickly."
  },
  "articles/get-started.html": {
    "href": "articles/get-started.html",
    "title": "Configuration",
    "keywords": "Configuration { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\", \"SparkPlug.*\": \"Information\" } }, \"SparkPlug\": { \"Api\": { \"ApplicationName\": \"Web Api\", \"PathBase\": \"/api/v1\" }, \"SqlDb\": { \"ConnectionString\": \"\" } } } Additional connection string attribute required to ignore certificate issue in development Trust Server Certificate=true may required in connection string. SparkPlug.Api.PathBase This property refers to the application base path. If the path contains {tanant} then the application can handle multi tenant's request. The Tenat Id will be passed in the URL path. Also appsettings.json file connection string consider as tenant managemetn database. Single Tenant Application Ex. \"PathBase\" : \"/api/v1/\" Multi Tenant Application Ex. \"PathBase\" : \"/api/v1/{tanant}/\""
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "SparkPlug",
    "keywords": "SparkPlug"
  },
  "articles/Todo.html": {
    "href": "articles/Todo.html",
    "title": "ToDo List",
    "keywords": "ToDo List SparkPlug.Api Load SparkPlug dependency module dynamically Composite Api Controller Template development for Composite Key tables - Workaround is sarogate Id for Composite Key tables. Data Cache implementation - Done CompositeRequest handling api development - InProgress Enable Http 2.0 in WebApi Database.EnsureCreated() move to Create Tenant api - When onboard new tenant, this will create the db schema. Database.Migrate() should be called in application Startup. SparkPlug.Persistance SparkPlug.Persistance.EntityFramework Repository should support Composite Key tables In QueryRequeset, add Exclude[] property to exclude properties in response. If we provide Exclude[] without select, It returns all the columns except Exclude properties. Filter criteria need to add in all the QueryRequest for each entity to get only live data. Filter criteria for included entity add in QueryRequest. - Done for where condition. Support Not operator for all cobinations of Filter. Like NotIn, NotEq, NotNull, etc. DB Migrations using ef migrate command. Sample Projects Azure Authentication integration Azure Application Insights integration Common Common string extenstion for string Case chagse. ex. camelCase, Snake_Case, PascalCase, etc. Github Actions for CICD - In Progress"
  },
  "examples/ef-entity-relationship.html": {
    "href": "examples/ef-entity-relationship.html",
    "title": "Entity Framework Entity Relationship",
    "keywords": "Entity Framework Entity Relationship One-to-One Relationship: Suppose you have two entities named Person and Address, where a Person can have one Address and an Address belongs to one Person. The Person entity has a foreign key AddressId referencing the Address entity's primary key Id. public class Person { public int Id { get; set; } public string Name { get; set; } public int AddressId { get; set; } public Address Address { get; set; } } public class Address { public int Id { get; set; } public string Street { get; set; } public string City { get; set; } public string State { get; set; } public Person Person { get; set; } } You can configure this relationship in the OnModelCreating method like this: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .HasOne(p => p.Address) .WithOne(a => a.Person) .HasForeignKey<Person>(p => p.AddressId); } In this example, we use the HasOne method to specify that a Person has one Address, and the WithOne method to specify that an Address belongs to one Person. Finally, we use the HasForeignKey method to specify that the Person entity's AddressId property should be used as the foreign key for this relationship. One-to-Many Relationship: public class Order { public int Id { get; set; } public ICollection<OrderItem> Items { get; set; } } public class OrderItem { public int Id { get; set; } public int Quantity { get; set; } public decimal Price { get; set; } public int OrderId { get; set; } public Order Order { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Order>() .HasMany(o => o.Items) .WithOne(i => i.Order) .HasForeignKey(i => i.OrderId); Many-to-Many Relationship: public class Student { public int Id { get; set; } public string Name { get; set; } public ICollection<Course> Courses { get; set; } } public class Course { public int Id { get; set; } public string Name { get; set; } public ICollection<Student> Students { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Student>() .HasMany(s => s.Courses) .WithMany(c => c.Students) .UsingEntity(j => j.ToTable(\"StudentCourses\")); Many-to-One Relationship: public class Order { public int Id { get; set; } public Customer Customer { get; set; } public ICollection<OrderItem> Items { get; set; } } public class Customer { public int Id { get; set; } public string Name { get; set; } } public class OrderItem { public int Id { get; set; } public int Quantity { get; set; } public decimal Price { get; set; } public int OrderId { get; set; } public Order Order { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Order>() .HasOne(o => o.Customer) .WithMany() .HasForeignKey(o => o.CustomerId); modelBuilder.Entity<Order>() .HasMany(o => o.Items) .WithOne(i => i.Order) .HasForeignKey(i => i.OrderId);"
  },
  "examples/git.html": {
    "href": "examples/git.html",
    "title": "Git",
    "keywords": "Git # Revert 1 commit from remote git push --force origin HEAD~1:main # Revert 1 commit from local git reset HEAD~1"
  },
  "examples/intro.html": {
    "href": "examples/intro.html",
    "title": "SparkPlug Examples",
    "keywords": "SparkPlug Examples"
  },
  "examples/kestral.html": {
    "href": "examples/kestral.html",
    "title": "",
    "keywords": "Set Maximum qeury string length in Kestral server { \"Kestrel\": { \"Limits\": { \"MaxQueryStringLength\": 4096 } } }"
  },
  "examples/migration.html": {
    "href": "examples/migration.html",
    "title": "Database Migration",
    "keywords": "Database Migration dotnet ef migrations --list"
  },
  "examples/NugetPublish.html": {
    "href": "examples/NugetPublish.html",
    "title": "Nuget Package publish",
    "keywords": "Nuget Package publish The project file should be like below. Readme and license file should be included in the project file and the path should have these files. <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>net7.0</TargetFramework> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> <AssemblyVersion>0.0.0.1</AssemblyVersion> <FileVersion>0.0.0.1</FileVersion> <Version>0.0.1-alpha1</Version> <PackageReadmeFile>README.md</PackageReadmeFile> <PackageLicenseFile>LICENSE.txt</PackageLicenseFile> </PropertyGroup> <ItemGroup> </ItemGroup> <ItemGroup> <None Include=\"README.md\" Pack=\"true\" PackagePath=\"README.md\"/> <None Include=\"LICENSE.txt\" Pack=\"true\" PackagePath=\"LICENSE.txt\"/> </ItemGroup> </Project>"
  },
  "examples/postgresql.html": {
    "href": "examples/postgresql.html",
    "title": "Create new Schema",
    "keywords": "Create new Schema CREATE SCHEMA tenant_1; List Schema SELECT schema_name FROM information_schema.schemata;"
  },
  "examples/rbac.html": {
    "href": "examples/rbac.html",
    "title": "RBAC Spec",
    "keywords": "RBAC Spec Models Resources Id Resource // 3. Verb Scops Ex: Id scope scope-group resource 1 read user-mgt get /user/{id}, 2 write user-mgt post /user/{id} 3 read user-mgt get /user/{id}/profile 3 manage user-mgt get /user/{id}/profile Id scopes scope-group resource 1 read, write, manage user-mgt /user/{id} Scope Read, Query, Write, Message, Users Id User Groups Id Group UserGroups UserId GroupId Roles Id Name RoleResourcePermissionMap Permissions Id"
  },
  "examples/RedisCacheImpl.html": {
    "href": "examples/RedisCacheImpl.html",
    "title": "Redis IDistributedCache Implementation Examle",
    "keywords": "Redis IDistributedCache Implementation Examle using System; using System.Text; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.Caching.Distributed; using StackExchange.Redis; namespace SparkPlug.Caching { public class RedisCache : IDistributedCache { private readonly ConnectionMultiplexer _redis; public RedisCache(ConnectionMultiplexer redis) { _redis = redis; } public byte[] Get(string key) { var db = _redis.GetDatabase(); return db.StringGet(key); } public Task<byte[]> GetAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); return db.StringGetAsync(key, token); } public void Set(string key, byte[] value, DistributedCacheEntryOptions options) { var db = _redis.GetDatabase(); var expiry = options.AbsoluteExpirationRelativeToNow; db.StringSet(key, value, expiry); } public Task SetAsync(string key, byte[] value, DistributedCacheEntryOptions options, CancellationToken token = default) { var db = _redis.GetDatabase(); var expiry = options.AbsoluteExpirationRelativeToNow; return db.StringSetAsync(key, value, expiry, token); } public void Refresh(string key) { var db = _redis.GetDatabase(); var value = db.StringGet(key); if (value.HasValue) { db.KeyExpire(key, TimeSpan.FromSeconds(30)); } } public Task RefreshAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); var value = db.StringGet(key); if (value.HasValue) { return db.KeyExpireAsync(key, TimeSpan.FromSeconds(30), token); } return Task.CompletedTask; } public void Remove(string key) { var db = _redis.GetDatabase(); db.KeyDelete(key); } public Task RemoveAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); return db.KeyDeleteAsync(key, token); } } }"
  },
  "examples/Reference.html": {
    "href": "examples/Reference.html",
    "title": "Reference",
    "keywords": "Reference Development Reference CQRS MediatR Ref.1, Ref. 2, Ref. 3 Azure Service Bus Ref. 1, Ref. 2, Ref. 3 (Topic) Authentication & Authrization: Ref. 1 External Identity Provider Ref. 2 Ref. 3 Ref. 4 for Mobile Ref. 5 OpenIdConnect Authentication Swashbuckle Configuration Reference Ref. 1 Ref. 2 Authorization Configuration in Swagger Environmnt Variable Template Engines WebApi Samples WebApi History 2.0 to 7.0 Dynamically Generate Controller Dotnet Tools SAST - Sonar Cloud - Code Coverage SAST - Sonar Cloud - Code Coverage DAST - owasp-zap-api-scan DAST - owasp-zap Structured Query Structured Query Example Mongo DB MongoDb Changestream Mongo DB Sample Query in JS Create Custom Configuration Provider Ref. 1, Ref. 2 Web API Dev Reference Multi Tenancy Ref. 1 Ref. 2 REST Patch Api Javascript JSON Patch Document C# Github Readme File Reference Nuget, Build, Other dotnet setup Web Api Development Reference ABP Framework Database Migration Fluent Migration DevOps Reference Bump Version Number C# Development - VS Code Extensions Top 10 VS Code Extension"
  },
  "examples/sample-request.html": {
    "href": "examples/sample-request.html",
    "title": "sample Query Request",
    "keywords": "sample Query Request { \"select\": [ \"PersonName\", \"Department\", \"Salary\", \"Id\" ], \"where\": { \"op\": 0, \"filterType\": 0, \"filters\": [{ \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Demo\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": 1 }, { \"field\": \"Salary\", \"direction\": 1 } ], \"page\": { \"pageNo\": 2, \"pageSize\": 0 } } ## Sample request with Includes options. { \"select\": [ \"PersonName\", \"Department\", \"Salary\", \"Id\", \"Address\" ], \"includes\": [ { \"name\": \"Address\", \"select\": [\"Id\", \"Street\"] } ], \"where\": { \"op\": 1, \"filterType\": 0, \"filters\": [{ \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Demo1\" }, { \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Natarajan Ganapathi\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": 1 }, { \"field\": \"Salary\", \"direction\": 1 } ], \"page\": { \"pageNo\": 1, \"pageSize\": 10 } } Sample Request with ENUM as String { \"select\": [ \"personName\", \"Department\", \"Salary\", \"id\", \"address\" ], \"includes\": [ { \"name\": \"Address\", \"select\": [\"Id\", \"Street\"] } ], \"where\": { \"filterType\": \"COMPOSITE\", \"op\": \"OR\", \"filters\": [{ \"filterType\": \"FIELD\", \"op\": \"EQUAL\", \"field\": \"department\", \"value\": \"IT\" }, { \"filterType\": \"FIELD\", \"op\": \"EQUAL\", \"field\": \"PersonName\", \"value\": \"Demo User\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": \"DESC\" }, { \"field\": \"Salary\", \"direction\": \"ASC\" } ], \"page\": { \"pageNo\": 1, \"pageSize\": 10 } } C# Include child tables var users = context.Users .Include(u => u.Address) .Include(u => u.Profile) .Select(u => new { u.Id, u.Name, Address = new { u.Address.Street, u.Address.City }, Profile = new { u.Profile.Bio, u.Profile.Age } }) .ToList(); var users = context.Users .Include(u => u.Address) .Select(u => new { u.Id, u.PersonName, u.MobileNo, Address = new { u.Address.Id, u.Address.FlatNo } }) .ToList();"
  },
  "examples/TODO.html": {
    "href": "examples/TODO.html",
    "title": "Todo",
    "keywords": "Todo Serializer Implmentation for ApiRequests to send as payload or querystring in SparkPlug.Contract library. a. .ToJson() RESTSharp integration to get or post data to REST API Url in SparkPlug.Contract library. a. .Get(\"/user/10\") b. .Post(\"/user\") c. .Put(\"/user\") d. .Delete(\"/user/10\") e. .Patch(\"/user/10\") SparkPlug.Api Unit Testing with MongoDb GenericTypeControllerFeatureProvider - Add controller to feature.Controllers with sapcific api verbs (only GET and POST like). Generic Cache interface need to be implement for SparkPlug.Api Distributed Cache interface implementation to cache data including Tenant information. Update or reload config if the configuration is modifyed in the cloud. Functional Module list a. RBAC based Authorization, UI Screens mappings for role b. Multi-Tenancy Management c. Workflow engine (Camunda) OpenApi with API Scope declaration and C# attribute to define scope of the API. If table contains Composite Key, Need to handle it. (CompositeApi attribute and [Key(1)], [Key(2)] attribute implement for composite key table.) Database Migration using EF migration support Include Status column in all the select, update, delete queries. Done All Rest API make it workable with MongoDb sample Application. - Done Dynamically add api version in Swagger docs. - Done Transactions handling - Done Enable Table Concurrency in API (Rev column need to add) - Done Enable Architecture / Audit columns in APIs. - Done Soft Delete (status Column) added by IDeletableEntity interface. - Done INCLUDE Foreign table columns in response for EntityFramework. - Done FilterType renamed to Kind - Done Between field operator need to implement - Done Ask Inside AddService methods, how to access IOptions instance? Geting error if we call 2 times an api (same context object used.)"
  },
  "examples/WebApi.html": {
    "href": "examples/WebApi.html",
    "title": "SparkPlug.Api",
    "keywords": "SparkPlug.Api Focused Area in this framework Authentication and authorization: Ensure that only authorized users have access to the API. Security: Use secure protocols such as SSL/TLS and implement security measures such as input validation, rate limiting, and firewalls. Scalability: Ensure that the API can handle large amounts of traffic and handle it efficiently. Performance: Optimize the API's performance to reduce response times and increase efficiency. Error handling: Implement robust error handling to ensure that the API can handle errors gracefully and provide meaningful error messages to the clients. Documentation: Provide clear and comprehensive documentation for the API, including API specifications and examples of how to use the API. Versioning: Implement API versioning to ensure that older clients can continue to work with the API even as new features are added. Monitoring and logging: Monitor the API's performance and usage to detect and diagnose issues, and log important events to help diagnose problems and improve the API. Program.cs - Done Startup.cs - Done OpenApi Configuration - Done Dependecny Injection - Done Dotnet core DI Logging Serilog SimpleConsole Tracing Azure Application Insights Configuration appsettings.json - Done Azure Vault Configuration - Kubernetes Config Map - Filters Global Exception Filter - Done Authentication Filter Exception Handling - Done Health Check Database Health Check - Done Local Resource Manual Health check Azure Service's Health Check Monitoring Azure Monitor Entity Framework Code First Create DB Schema - Done Create Migration Script Execute Migration Script Db First Configuration Validation DDD - Domain Driven Design CQRS MediatR Service Bus Integration Azure Service Bus Rabbit MQ Kafka Multi-Tenancy - Done CORS CI/CD pipleline - Done Github Actions - Done Container Docker Build Helm Chart Caching Distributed Memory Cache Distributed Redis Cache REST Api Maturity Model"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SparkPlug",
    "keywords": "Welcome to SparkPlug"
  }
}