{
  "api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.ApiServiceCollectionExtenstions.html",
    "title": "Class ApiServiceCollectionExtenstions",
    "keywords": "Class ApiServiceCollectionExtenstions Inheritance object ApiServiceCollectionExtenstions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Api.dll Syntax public static class ApiServiceCollectionExtenstions Methods AddWebApi(IServiceCollection, IConfiguration) Declaration public static IServiceCollection AddWebApi(this IServiceCollection services, IConfiguration configuration) Parameters IServiceCollection services IConfiguration configuration Returns IServiceCollection AddWebApi(IServiceCollection, IConfiguration, Action<WebApiOptions>) Declaration public static IServiceCollection AddWebApi(this IServiceCollection services, IConfiguration configuration, Action<WebApiOptions> setupAction) Parameters IServiceCollection services IConfiguration configuration Action<WebApiOptions> setupAction Returns IServiceCollection UseWebApi(IApplicationBuilder, IServiceProvider) Declaration public static void UseWebApi(this IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider"
  },
  "api/Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.GlobalExceptionHandlingMiddlewareExtensions.html",
    "title": "Class GlobalExceptionHandlingMiddlewareExtensions",
    "keywords": "Class GlobalExceptionHandlingMiddlewareExtensions Inheritance object GlobalExceptionHandlingMiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Api.dll Syntax public static class GlobalExceptionHandlingMiddlewareExtensions Methods UseGlobalExceptionHandling(IApplicationBuilder) Declaration public static IApplicationBuilder UseGlobalExceptionHandling(this IApplicationBuilder builder) Parameters IApplicationBuilder builder Returns IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.HealthCheckServiceCollectionExtensions.html",
    "title": "Class HealthCheckServiceCollectionExtensions",
    "keywords": "Class HealthCheckServiceCollectionExtensions Inheritance object HealthCheckServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Api.dll Syntax public static class HealthCheckServiceCollectionExtensions Methods UseHealthChecks(IApplicationBuilder) Declaration public static void UseHealthChecks(this IApplicationBuilder app) Parameters IApplicationBuilder app"
  },
  "api/Microsoft.Extensions.DependencyInjection.MongoDbServiceCollectionExtenstions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.MongoDbServiceCollectionExtenstions.html",
    "title": "Class MongoDbServiceCollectionExtenstions",
    "keywords": "Class MongoDbServiceCollectionExtenstions Inheritance object MongoDbServiceCollectionExtenstions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public static class MongoDbServiceCollectionExtenstions Methods AddMongoDb(IServiceCollection, IConfiguration) Declaration public static void AddMongoDb(this IServiceCollection services, IConfiguration configuration) Parameters IServiceCollection services IConfiguration configuration"
  },
  "api/Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.MvcOptionsExtensions.html",
    "title": "Class MvcOptionsExtensions",
    "keywords": "Class MvcOptionsExtensions Inheritance object MvcOptionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Api.dll Syntax public static class MvcOptionsExtensions Methods UseCentralRoutePrefix(MvcOptions, IRouteTemplateProvider) Declaration public static void UseCentralRoutePrefix(this MvcOptions opts, IRouteTemplateProvider routeAttribute) Parameters MvcOptions opts IRouteTemplateProvider routeAttribute"
  },
  "api/Microsoft.Extensions.DependencyInjection.SqlDbServiceCollectionExtenstions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SqlDbServiceCollectionExtenstions.html",
    "title": "Class SqlDbServiceCollectionExtenstions",
    "keywords": "Class SqlDbServiceCollectionExtenstions Inheritance object SqlDbServiceCollectionExtenstions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public static class SqlDbServiceCollectionExtenstions Methods AddSqlDb(IServiceCollection, IConfiguration) Declaration public static void AddSqlDb(this IServiceCollection services, IConfiguration configuration) Parameters IServiceCollection services IConfiguration configuration"
  },
  "api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.SwaggerServiceCollectionExtensions.html",
    "title": "Class SwaggerServiceCollectionExtensions",
    "keywords": "Class SwaggerServiceCollectionExtensions Inheritance object SwaggerServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Api.dll Syntax public static class SwaggerServiceCollectionExtensions Methods AddSwagger(IServiceCollection) Declaration public static IServiceCollection AddSwagger(this IServiceCollection services) Parameters IServiceCollection services Returns IServiceCollection UseSwaggerApi(IApplicationBuilder) Declaration public static void UseSwaggerApi(this IApplicationBuilder app) Parameters IApplicationBuilder app"
  },
  "api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.TenantResolverMiddlewareExtensions.html",
    "title": "Class TenantResolverMiddlewareExtensions",
    "keywords": "Class TenantResolverMiddlewareExtensions Inheritance object TenantResolverMiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Business.Tenancy.Api.dll Syntax public static class TenantResolverMiddlewareExtensions Methods UseTenantResolverMiddleware(IApplicationBuilder) Declaration public static IApplicationBuilder UseTenantResolverMiddleware(this IApplicationBuilder builder) Parameters IApplicationBuilder builder Returns IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.TransactionMiddlewareExtensions.html",
    "title": "Class TransactionMiddlewareExtensions",
    "keywords": "Class TransactionMiddlewareExtensions Inheritance object TransactionMiddlewareExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Microsoft.Extensions.DependencyInjection Assembly: SparkPlug.Api.dll Syntax public static class TransactionMiddlewareExtensions Methods UseTransactionMiddleware(IApplicationBuilder) Declaration public static IApplicationBuilder UseTransactionMiddleware(this IApplicationBuilder app) Parameters IApplicationBuilder app Returns IApplicationBuilder"
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes ApiServiceCollectionExtenstions GlobalExceptionHandlingMiddlewareExtensions HealthCheckServiceCollectionExtensions MongoDbServiceCollectionExtenstions MvcOptionsExtensions SqlDbServiceCollectionExtenstions SwaggerServiceCollectionExtensions TenantResolverMiddlewareExtensions TransactionMiddlewareExtensions"
  },
  "api/SparkPlug.Api.Common.ModuleLoader.html": {
    "href": "api/SparkPlug.Api.Common.ModuleLoader.html",
    "title": "Class ModuleLoader",
    "keywords": "Class ModuleLoader Inheritance object ModuleLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Common Assembly: SparkPlug.Api.dll Syntax public static class ModuleLoader Methods AddCustomModules(IServiceCollection) Declaration public static void AddCustomModules(this IServiceCollection services) Parameters IServiceCollection services UseCustomModules(IApplicationBuilder, IServiceProvider) Declaration public static void UseCustomModules(this IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider UseCustomModulesMiddelwares(IApplicationBuilder) Declaration public static void UseCustomModulesMiddelwares(this IApplicationBuilder app) Parameters IApplicationBuilder app"
  },
  "api/SparkPlug.Api.Common.html": {
    "href": "api/SparkPlug.Api.Common.html",
    "title": "Namespace SparkPlug.Api.Common",
    "keywords": "Namespace SparkPlug.Api.Common Classes ModuleLoader"
  },
  "api/SparkPlug.Api.Configuration.ApiEventId.html": {
    "href": "api/SparkPlug.Api.Configuration.ApiEventId.html",
    "title": "Enum ApiEventId",
    "keywords": "Enum ApiEventId Namespace: SparkPlug.Api.Configuration Assembly: SparkPlug.Api.dll Syntax public enum ApiEventId ExceptionFilter UnknownGlobaException"
  },
  "api/SparkPlug.Api.Configuration.Constants.html": {
    "href": "api/SparkPlug.Api.Configuration.Constants.html",
    "title": "Class Constants",
    "keywords": "Class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Configuration Assembly: SparkPlug.Api.dll Syntax public static class Constants Fields JsonContentType Declaration public const string JsonContentType = \"application/json; charset=utf-8\" Field Value string Tenant Declaration public const string Tenant = \"tenant\" Field Value string XTraceId Declaration public const string XTraceId = \"X-Trace-Id\" Field Value string"
  },
  "api/SparkPlug.Api.Configuration.SlidingExpiration.html": {
    "href": "api/SparkPlug.Api.Configuration.SlidingExpiration.html",
    "title": "Class SlidingExpiration",
    "keywords": "Class SlidingExpiration Inheritance object SlidingExpiration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Configuration Assembly: SparkPlug.Api.dll Syntax public class SlidingExpiration Constructors SlidingExpiration() Declaration public SlidingExpiration() Properties TenantCacheInfo Declaration public int TenantCacheInfo { get; set; } Property Value int Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Configuration.WebApiOptions.html": {
    "href": "api/SparkPlug.Api.Configuration.WebApiOptions.html",
    "title": "Class WebApiOptions",
    "keywords": "Class WebApiOptions Inheritance object WebApiOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Configuration Assembly: SparkPlug.Api.dll Syntax public class WebApiOptions Constructors WebApiOptions() Declaration public WebApiOptions() Fields ConfigPath Declaration public const string ConfigPath = \"SparkPlug:Api\" Field Value string Properties ApplicationName Declaration [Required] public string ApplicationName { get; set; } Property Value string CacheDuration Declaration public SlidingExpiration CacheDuration { get; set; } Property Value SlidingExpiration IsMultiTenant Declaration public bool IsMultiTenant { get; set; } Property Value bool Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Configuration.html": {
    "href": "api/SparkPlug.Api.Configuration.html",
    "title": "Namespace SparkPlug.Api.Configuration",
    "keywords": "Namespace SparkPlug.Api.Configuration Classes Constants SlidingExpiration WebApiOptions Enums ApiEventId"
  },
  "api/SparkPlug.Api.Controllers.ApiAttribute.html": {
    "href": "api/SparkPlug.Api.Controllers.ApiAttribute.html",
    "title": "Class ApiAttribute",
    "keywords": "Class ApiAttribute Inheritance object Attribute ApiAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Controllers Assembly: SparkPlug.Api.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class ApiAttribute : Attribute Constructors ApiAttribute(string) Declaration public ApiAttribute(string route) Parameters string route ApiAttribute(string, Type) Declaration public ApiAttribute(string route, Type genericControllerType) Parameters string route Type genericControllerType Properties Route Declaration public string Route { get; set; } Property Value string Type Declaration public Type? Type { get; set; } Property Value Type Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Controllers.ApiController-2.html": {
    "href": "api/SparkPlug.Api.Controllers.ApiController-2.html",
    "title": "Class ApiController<TId, TEntity>",
    "keywords": "Class ApiController<TId, TEntity> Inheritance object ControllerBase BaseController<TId, TEntity> ApiController<TId, TEntity> MenuController TenantDetailsController Inherited Members BaseController<TId, TEntity>._service BaseController<TId, TEntity>._logger BaseController<TId, TEntity>._serviceProvider BaseController<TId, TEntity>.Ok(IEnumerable<TEntity>, IPageContext) BaseController<TId, TEntity>.Ok(IEnumerable<JObject>, IPageContext) BaseController<TId, TEntity>.Ok(TEntity) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Controllers Assembly: SparkPlug.Api.dll Syntax [ApiExplorerSettings(GroupName = \"Template\")] public abstract class ApiController<TId, TEntity> : BaseController<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors ApiController(IServiceProvider) Declaration protected ApiController(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Methods DeleteAsync(TId, CancellationToken) Declaration [HttpDelete(\"{id}\")] public Task<IActionResult> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<IActionResult> GetAsync(TId, CancellationToken) Declaration [HttpGet(\"{id}\")] public Task<IActionResult> GetAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<IActionResult> ListAsync(int?, int?, CancellationToken) Declaration [HttpGet] public Task<IActionResult> ListAsync(int? pageNo, int? pageSize, CancellationToken cancellationToken) Parameters int? pageNo int? pageSize CancellationToken cancellationToken Returns Task<IActionResult> PatchAsync(TId, CommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) Declaration [HttpPatch(\"{id}\")] public Task<IActionResult> PatchAsync(TId id, CommandRequest<JsonPatchDocument<TEntity>> rec, CancellationToken cancellationToken) Parameters TId id CommandRequest<JsonPatchDocument<TEntity>> rec CancellationToken cancellationToken Returns Task<IActionResult> PostAsync(CommandRequest<TEntity>, CancellationToken) Declaration [HttpPost] public Task<IActionResult> PostAsync(CommandRequest<TEntity> rec, CancellationToken cancellationToken) Parameters CommandRequest<TEntity> rec CancellationToken cancellationToken Returns Task<IActionResult> PutAsync(TId, CommandRequest<TEntity>, CancellationToken) Declaration [HttpPut(\"{id}\")] public Task<IActionResult> PutAsync(TId id, CommandRequest<TEntity> rec, CancellationToken cancellationToken) Parameters TId id CommandRequest<TEntity> rec CancellationToken cancellationToken Returns Task<IActionResult> QueryAsync(QueryRequest, CancellationToken) Declaration [HttpPost(\"search\")] public Task<IActionResult> QueryAsync(QueryRequest request, CancellationToken cancellationToken) Parameters QueryRequest request CancellationToken cancellationToken Returns Task<IActionResult> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Controllers.BaseController-2.html": {
    "href": "api/SparkPlug.Api.Controllers.BaseController-2.html",
    "title": "Class BaseController<TId, TEntity>",
    "keywords": "Class BaseController<TId, TEntity> Inheritance object ControllerBase BaseController<TId, TEntity> ApiController<TId, TEntity> Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Controllers Assembly: SparkPlug.Api.dll Syntax public abstract class BaseController<TId, TEntity> : ControllerBase where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors BaseController(IServiceProvider) Declaration protected BaseController(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Fields _logger Declaration protected readonly ILogger<BaseController<TId, TEntity>> _logger Field Value ILogger<BaseController<TId, TEntity>> _service Declaration protected readonly BaseService<TId, TEntity> _service Field Value BaseService<TId, TEntity> _serviceProvider Declaration protected readonly IServiceProvider _serviceProvider Field Value IServiceProvider Methods Ok(IEnumerable<JObject>, IPageContext?) Declaration [NonAction] public OkObjectResult Ok(IEnumerable<JObject> data, IPageContext? pagecontext) Parameters IEnumerable<JObject> data IPageContext pagecontext Returns OkObjectResult Ok(IEnumerable<TEntity>?, IPageContext?) Declaration [NonAction] public OkObjectResult Ok(IEnumerable<TEntity>? data, IPageContext? pagecontext) Parameters IEnumerable<TEntity> data IPageContext pagecontext Returns OkObjectResult Ok(TEntity) Declaration [NonAction] public OkObjectResult Ok(TEntity data) Parameters TEntity data Returns OkObjectResult Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Controllers.CompositeController.html": {
    "href": "api/SparkPlug.Api.Controllers.CompositeController.html",
    "title": "Class CompositeController",
    "keywords": "Class CompositeController Inheritance object ControllerBase CompositeController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Controllers Assembly: SparkPlug.Api.dll Syntax [ApiController] [Route(\"composite\")] [ApiExplorerSettings(GroupName = \"v1\")] public class CompositeController : ControllerBase Constructors CompositeController(IHttpClientFactory) Declaration public CompositeController(IHttpClientFactory httpClientFactory) Parameters IHttpClientFactory httpClientFactory Methods Search(CompositeRequest, CancellationToken) Declaration [HttpPost(\"search\")] public Task<IActionResult> Search(CompositeRequest request, CancellationToken cancellationToken) Parameters CompositeRequest request CancellationToken cancellationToken Returns Task<IActionResult> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html": {
    "href": "api/SparkPlug.Api.Controllers.GenericControllerRouteConvention.html",
    "title": "Class GenericControllerRouteConvention",
    "keywords": "Class GenericControllerRouteConvention Inheritance object GenericControllerRouteConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Controllers Assembly: SparkPlug.Api.dll Syntax public class GenericControllerRouteConvention : IControllerModelConvention Constructors GenericControllerRouteConvention(IRouteTemplateProvider?) Declaration public GenericControllerRouteConvention(IRouteTemplateProvider? routeTemplateProvider) Parameters IRouteTemplateProvider routeTemplateProvider Methods Apply(ControllerModel) Called to apply the convention to the ControllerModel. Declaration public void Apply(ControllerModel controller) Parameters ControllerModel controller The ControllerModel. Implements IControllerModelConvention.Apply(ControllerModel) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Controllers.RouteConvention.html": {
    "href": "api/SparkPlug.Api.Controllers.RouteConvention.html",
    "title": "Class RouteConvention",
    "keywords": "Class RouteConvention Inheritance object RouteConvention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Controllers Assembly: SparkPlug.Api.dll Syntax public class RouteConvention : IApplicationModelConvention Constructors RouteConvention(IRouteTemplateProvider) Declaration public RouteConvention(IRouteTemplateProvider routeTemplateProvider) Parameters IRouteTemplateProvider routeTemplateProvider Methods Apply(ApplicationModel) Called to apply the convention to the ApplicationModel. Declaration public void Apply(ApplicationModel application) Parameters ApplicationModel application The ApplicationModel. Implements IApplicationModelConvention.Apply(ApplicationModel) IsMultiTenant(Type?) Declaration public static bool IsMultiTenant(Type? type) Parameters Type type Returns bool Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Controllers.html": {
    "href": "api/SparkPlug.Api.Controllers.html",
    "title": "Namespace SparkPlug.Api.Controllers",
    "keywords": "Namespace SparkPlug.Api.Controllers Classes ApiAttribute ApiController<TId, TEntity> BaseController<TId, TEntity> CompositeController GenericControllerRouteConvention RouteConvention"
  },
  "api/SparkPlug.Api.Filters.ApiExceptionFilterAttribute.html": {
    "href": "api/SparkPlug.Api.Filters.ApiExceptionFilterAttribute.html",
    "title": "Class ApiExceptionFilterAttribute",
    "keywords": "Class ApiExceptionFilterAttribute Inheritance object Attribute ExceptionFilterAttribute ApiExceptionFilterAttribute Inherited Members ExceptionFilterAttribute.OnExceptionAsync(ExceptionContext) ExceptionFilterAttribute.Order Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Filters Assembly: SparkPlug.Api.dll Syntax public class ApiExceptionFilterAttribute : ExceptionFilterAttribute, IAsyncExceptionFilter, IExceptionFilter, IOrderedFilter, IFilterMetadata Constructors ApiExceptionFilterAttribute(ILogger<ApiExceptionFilterAttribute>) Declaration public ApiExceptionFilterAttribute(ILogger<ApiExceptionFilterAttribute> logger) Parameters ILogger<ApiExceptionFilterAttribute> logger Methods OnException(ExceptionContext) Called after an action has thrown an Exception. Declaration public override void OnException(ExceptionContext context) Parameters ExceptionContext context The ExceptionContext. Overrides ExceptionFilterAttribute.OnException(ExceptionContext) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Filters.html": {
    "href": "api/SparkPlug.Api.Filters.html",
    "title": "Namespace SparkPlug.Api.Filters",
    "keywords": "Namespace SparkPlug.Api.Filters Classes ApiExceptionFilterAttribute"
  },
  "api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html": {
    "href": "api/SparkPlug.Api.Middleware.GlobalExceptionHandlingMiddleware.html",
    "title": "Class GlobalExceptionHandlingMiddleware",
    "keywords": "Class GlobalExceptionHandlingMiddleware Inheritance object GlobalExceptionHandlingMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Middleware Assembly: SparkPlug.Api.dll Syntax public class GlobalExceptionHandlingMiddleware Constructors GlobalExceptionHandlingMiddleware(ILogger<GlobalExceptionHandlingMiddleware>, RequestDelegate) Declaration public GlobalExceptionHandlingMiddleware(ILogger<GlobalExceptionHandlingMiddleware> logger, RequestDelegate next) Parameters ILogger<GlobalExceptionHandlingMiddleware> logger RequestDelegate next Methods InvokeAsync(HttpContext) Declaration public Task InvokeAsync(HttpContext context) Parameters HttpContext context Returns Task Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Middleware.TransactionMiddleware.html": {
    "href": "api/SparkPlug.Api.Middleware.TransactionMiddleware.html",
    "title": "Class TransactionMiddleware",
    "keywords": "Class TransactionMiddleware Inheritance object TransactionMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Api.Middleware Assembly: SparkPlug.Api.dll Syntax public class TransactionMiddleware Constructors TransactionMiddleware(RequestDelegate) Declaration public TransactionMiddleware(RequestDelegate next) Parameters RequestDelegate next Methods InvokeAsync(HttpContext) Declaration public Task InvokeAsync(HttpContext context) Parameters HttpContext context Returns Task Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Api.Middleware.html": {
    "href": "api/SparkPlug.Api.Middleware.html",
    "title": "Namespace SparkPlug.Api.Middleware",
    "keywords": "Namespace SparkPlug.Api.Middleware Classes GlobalExceptionHandlingMiddleware TransactionMiddleware"
  },
  "api/SparkPlug.Business.Menu.Api.MenuApiModule.html": {
    "href": "api/SparkPlug.Business.Menu.Api.MenuApiModule.html",
    "title": "Class MenuApiModule",
    "keywords": "Class MenuApiModule Inheritance object MenuApiModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Api Assembly: SparkPlug.Business.Menu.Api.dll Syntax public class MenuApiModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Api.MenuController.html": {
    "href": "api/SparkPlug.Business.Menu.Api.MenuController.html",
    "title": "Class MenuController",
    "keywords": "Class MenuController Inheritance object ControllerBase BaseController<long, MenuItem> ApiController<long, MenuItem> MenuController Inherited Members ApiController<long, MenuItem>.ListAsync(int?, int?, CancellationToken) ApiController<long, MenuItem>.QueryAsync(QueryRequest, CancellationToken) ApiController<long, MenuItem>.PostAsync(CommandRequest<MenuItem>, CancellationToken) ApiController<long, MenuItem>.GetAsync(long, CancellationToken) ApiController<long, MenuItem>.PutAsync(long, CommandRequest<MenuItem>, CancellationToken) ApiController<long, MenuItem>.PatchAsync(long, CommandRequest<JsonPatchDocument<MenuItem>>, CancellationToken) ApiController<long, MenuItem>.DeleteAsync(long, CancellationToken) BaseController<long, MenuItem>._service BaseController<long, MenuItem>._logger BaseController<long, MenuItem>._serviceProvider BaseController<long, MenuItem>.Ok(IEnumerable<MenuItem>, IPageContext) BaseController<long, MenuItem>.Ok(IEnumerable<JObject>, IPageContext) BaseController<long, MenuItem>.Ok(MenuItem) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Api Assembly: SparkPlug.Business.Menu.Api.dll Syntax [ApiController] [Route(\"menu\")] public class MenuController : ApiController<long, MenuItem> Constructors MenuController(IServiceProvider) Declaration public MenuController(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Api.html": {
    "href": "api/SparkPlug.Business.Menu.Api.html",
    "title": "Namespace SparkPlug.Business.Menu.Api",
    "keywords": "Namespace SparkPlug.Business.Menu.Api Classes MenuApiModule MenuController"
  },
  "api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html": {
    "href": "api/SparkPlug.Business.Menu.Domain.MenuDomainModule.html",
    "title": "Class MenuDomainModule",
    "keywords": "Class MenuDomainModule Inheritance object MenuDomainModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Domain Assembly: SparkPlug.Business.Menu.Domain.dll Syntax public class MenuDomainModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Domain.MenuItem.html": {
    "href": "api/SparkPlug.Business.Menu.Domain.MenuItem.html",
    "title": "Class MenuItem",
    "keywords": "Class MenuItem Inheritance object MenuItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Domain Assembly: SparkPlug.Business.Menu.Domain.dll Syntax public class MenuItem : IBaseEntity<long>, IConcurrencyEntity, IAuditableEntity<long>, IDeletableEntity Properties CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value DateTime Implements IAuditableEntity<TId>.CreatedAt CreatedBy Declaration public long CreatedBy { get; set; } Property Value long Implements IAuditableEntity<TId>.CreatedBy Display Declaration public string? Display { get; set; } Property Value string DisplayOrder Declaration public int DisplayOrder { get; set; } Property Value int IconRef Declaration public string? IconRef { get; set; } Property Value string Id Declaration public long Id { get; set; } Property Value long Implements IBaseEntity<TId>.Id MenuCode Declaration public string? MenuCode { get; set; } Property Value string MenuPosition Declaration public string? MenuPosition { get; set; } Property Value string MenuType Declaration public string? MenuType { get; set; } Property Value string ModifiedAt Declaration public DateTime ModifiedAt { get; set; } Property Value DateTime Implements IAuditableEntity<TId>.ModifiedAt ModifiedBy Declaration public long ModifiedBy { get; set; } Property Value long Implements IAuditableEntity<TId>.ModifiedBy ModuleCode Declaration public string? ModuleCode { get; set; } Property Value string ModuleId Declaration public long? ModuleId { get; set; } Property Value long? ParentMenuCode Declaration public string? ParentMenuCode { get; set; } Property Value string ParentMenuId Declaration public long? ParentMenuId { get; set; } Property Value long? Revision Declaration [ConcurrencyCheck] public int Revision { get; set; } Property Value int Implements IConcurrencyEntity.Revision SRef Declaration public string? SRef { get; set; } Property Value string Status Declaration public Status Status { get; set; } Property Value Status Implements IDeletableEntity.Status Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Domain.html": {
    "href": "api/SparkPlug.Business.Menu.Domain.html",
    "title": "Namespace SparkPlug.Business.Menu.Domain",
    "keywords": "Namespace SparkPlug.Business.Menu.Domain Classes MenuDomainModule MenuItem"
  },
  "api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.MenuRepositorySqlModule.html",
    "title": "Class MenuRepositorySqlModule",
    "keywords": "Class MenuRepositorySqlModule Inheritance object MenuRepositorySqlModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Repository Assembly: SparkPlug.Business.Menu.Repository.Sql.dll Syntax public class MenuRepositorySqlModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.Sql.MenuItemConfiguration.html",
    "title": "Class MenuItemConfiguration",
    "keywords": "Class MenuItemConfiguration Inheritance object MenuItemConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Repository.Sql Assembly: SparkPlug.Business.Menu.Repository.Sql.dll Syntax public class MenuItemConfiguration : IEntityTypeConfiguration<MenuItem> Methods Configure(EntityTypeBuilder<MenuItem>) Configures the entity of type MenuItem. Declaration public void Configure(EntityTypeBuilder<MenuItem> builder) Parameters EntityTypeBuilder<MenuItem> builder The builder to be used to configure the entity type. Implements IEntityTypeConfiguration<TEntity>.Configure(EntityTypeBuilder<TEntity>) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Repository.Sql.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.Sql.html",
    "title": "Namespace SparkPlug.Business.Menu.Repository.Sql",
    "keywords": "Namespace SparkPlug.Business.Menu.Repository.Sql Classes MenuItemConfiguration"
  },
  "api/SparkPlug.Business.Menu.Repository.html": {
    "href": "api/SparkPlug.Business.Menu.Repository.html",
    "title": "Namespace SparkPlug.Business.Menu.Repository",
    "keywords": "Namespace SparkPlug.Business.Menu.Repository Classes MenuRepositorySqlModule"
  },
  "api/SparkPlug.Business.Menu.Service.MenuServiceModule.html": {
    "href": "api/SparkPlug.Business.Menu.Service.MenuServiceModule.html",
    "title": "Class MenuServiceModule",
    "keywords": "Class MenuServiceModule Inheritance object MenuServiceModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Service Assembly: SparkPlug.Business.Menu.Service.dll Syntax public class MenuServiceModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Service.Menuervice.html": {
    "href": "api/SparkPlug.Business.Menu.Service.Menuervice.html",
    "title": "Class Menuervice",
    "keywords": "Class Menuervice Inheritance object BaseService<long, MenuItem> Menuervice Inherited Members BaseService<long, MenuItem>.GetRepository() BaseService<long, MenuItem>.GetService<TService>() BaseService<long, MenuItem>.CreateAsync(ICommandRequest<MenuItem>, CancellationToken) BaseService<long, MenuItem>.CreateManyAsync(ICommandRequest<MenuItem[]>, CancellationToken) BaseService<long, MenuItem>.DeleteAsync(long, CancellationToken) BaseService<long, MenuItem>.GetAsync(long, CancellationToken) BaseService<long, MenuItem>.CountAsync(IQueryRequest, CancellationToken) BaseService<long, MenuItem>.GetManyAsync(long[], CancellationToken) BaseService<long, MenuItem>.FindAsync(IQueryRequest, CancellationToken) BaseService<long, MenuItem>.QueryAsync(IQueryRequest, CancellationToken) BaseService<long, MenuItem>.PatchAsync(long, ICommandRequest<JsonPatchDocument<MenuItem>>, CancellationToken) BaseService<long, MenuItem>.ReplaceAsync(long, ICommandRequest<MenuItem>, CancellationToken) BaseService<long, MenuItem>.UpdateAsync(long, ICommandRequest<MenuItem>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Menu.Service Assembly: SparkPlug.Business.Menu.Service.dll Syntax public class Menuervice : BaseService<long, MenuItem> Constructors Menuervice(IServiceProvider) Declaration public Menuervice(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Menu.Service.html": {
    "href": "api/SparkPlug.Business.Menu.Service.html",
    "title": "Namespace SparkPlug.Business.Menu.Service",
    "keywords": "Namespace SparkPlug.Business.Menu.Service Classes MenuServiceModule Menuervice"
  },
  "api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Api.TenancyApiModule.html",
    "title": "Class TenancyApiModule",
    "keywords": "Class TenancyApiModule Inheritance object TenancyApiModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Api Assembly: SparkPlug.Business.Tenancy.Api.dll Syntax public class TenancyApiModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html": {
    "href": "api/SparkPlug.Business.Tenancy.Api.TenantDetailsController.html",
    "title": "Class TenantDetailsController",
    "keywords": "Class TenantDetailsController Inheritance object ControllerBase BaseController<long, TenantDetails> ApiController<long, TenantDetails> TenantDetailsController Inherited Members ApiController<long, TenantDetails>.ListAsync(int?, int?, CancellationToken) ApiController<long, TenantDetails>.QueryAsync(QueryRequest, CancellationToken) ApiController<long, TenantDetails>.PostAsync(CommandRequest<TenantDetails>, CancellationToken) ApiController<long, TenantDetails>.GetAsync(long, CancellationToken) ApiController<long, TenantDetails>.PutAsync(long, CommandRequest<TenantDetails>, CancellationToken) ApiController<long, TenantDetails>.PatchAsync(long, CommandRequest<JsonPatchDocument<TenantDetails>>, CancellationToken) ApiController<long, TenantDetails>.DeleteAsync(long, CancellationToken) BaseController<long, TenantDetails>._service BaseController<long, TenantDetails>._logger BaseController<long, TenantDetails>._serviceProvider BaseController<long, TenantDetails>.Ok(IEnumerable<TenantDetails>, IPageContext) BaseController<long, TenantDetails>.Ok(IEnumerable<JObject>, IPageContext) BaseController<long, TenantDetails>.Ok(TenantDetails) ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Api Assembly: SparkPlug.Business.Tenancy.Api.dll Syntax [ApiController] [Route(\"tenant-details\")] public class TenantDetailsController : ApiController<long, TenantDetails> Constructors TenantDetailsController(IServiceProvider) Declaration public TenantDetailsController(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Api.html": {
    "href": "api/SparkPlug.Business.Tenancy.Api.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Api",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Api Classes TenancyApiModule TenantDetailsController"
  },
  "api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.TenancyDomainModule.html",
    "title": "Class TenancyDomainModule",
    "keywords": "Class TenancyDomainModule Inheritance object TenancyDomainModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Domain Assembly: SparkPlug.Business.Tenancy.Domain.dll Syntax public class TenancyDomainModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.TenantDetails.html",
    "title": "Class TenantDetails",
    "keywords": "Class TenantDetails Inheritance object TenantDetails Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Domain Assembly: SparkPlug.Business.Tenancy.Domain.dll Syntax public class TenantDetails : IBaseEntity<long>, IConcurrencyEntity, IAuditableEntity<long>, IDeletableEntity Properties CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value DateTime Implements IAuditableEntity<TId>.CreatedAt CreatedBy Declaration public long CreatedBy { get; set; } Property Value long Implements IAuditableEntity<TId>.CreatedBy Id Declaration public long Id { get; set; } Property Value long Implements IBaseEntity<TId>.Id ModifiedAt Declaration public DateTime ModifiedAt { get; set; } Property Value DateTime Implements IAuditableEntity<TId>.ModifiedAt ModifiedBy Declaration public long ModifiedBy { get; set; } Property Value long Implements IAuditableEntity<TId>.ModifiedBy Name Declaration public string? Name { get; set; } Property Value string Options Declaration public List<TenantOption> Options { get; set; } Property Value List<TenantOption> Revision Declaration [ConcurrencyCheck] public int Revision { get; set; } Property Value int Implements IConcurrencyEntity.Revision Status Declaration public Status Status { get; set; } Property Value Status Implements IDeletableEntity.Status TenantId Declaration public Guid TenantId { get; set; } Property Value Guid Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Domain.TenantOption.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.TenantOption.html",
    "title": "Class TenantOption",
    "keywords": "Class TenantOption Inheritance object TenantOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Domain Assembly: SparkPlug.Business.Tenancy.Domain.dll Syntax public class TenantOption : IBaseEntity<long>, IConcurrencyEntity, IAuditableEntity<long>, IDeletableEntity Properties CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value DateTime Implements IAuditableEntity<TId>.CreatedAt CreatedBy Declaration public long CreatedBy { get; set; } Property Value long Implements IAuditableEntity<TId>.CreatedBy Id Declaration public long Id { get; set; } Property Value long Implements IBaseEntity<TId>.Id Key Declaration public string Key { get; set; } Property Value string ModifiedAt Declaration public DateTime ModifiedAt { get; set; } Property Value DateTime Implements IAuditableEntity<TId>.ModifiedAt ModifiedBy Declaration public long ModifiedBy { get; set; } Property Value long Implements IAuditableEntity<TId>.ModifiedBy Revision Declaration [ConcurrencyCheck] public int Revision { get; set; } Property Value int Implements IConcurrencyEntity.Revision Status Declaration public Status Status { get; set; } Property Value Status Implements IDeletableEntity.Status Tenant Declaration [JsonIgnore] public TenantDetails Tenant { get; set; } Property Value TenantDetails TenantDetailId Declaration public long TenantDetailId { get; set; } Property Value long Value Declaration public string? Value { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Domain.html": {
    "href": "api/SparkPlug.Business.Tenancy.Domain.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Domain",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Domain Classes TenancyDomainModule TenantDetails TenantOption"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Mongo.TenancyRepositoryMongoModule.html",
    "title": "Class TenancyRepositoryMongoModule",
    "keywords": "Class TenancyRepositoryMongoModule Inheritance object TenancyRepositoryMongoModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Repository.Mongo Assembly: SparkPlug.Business.Tenancy.Repository.Mongo.dll Syntax public class TenancyRepositoryMongoModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Mongo.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Mongo.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Repository.Mongo",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Repository.Mongo Classes TenancyRepositoryMongoModule"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.TenancyRepositorySqlModule.html",
    "title": "Class TenancyRepositorySqlModule",
    "keywords": "Class TenancyRepositorySqlModule Inheritance object TenancyRepositorySqlModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Repository.Sql Assembly: SparkPlug.Business.Tenancy.Repository.Sql.dll Syntax public class TenancyRepositorySqlModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantDetailsConfiguration.html",
    "title": "Class TenantDetailsConfiguration",
    "keywords": "Class TenantDetailsConfiguration Inheritance object TenantDetailsConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Repository.Sql Assembly: SparkPlug.Business.Tenancy.Repository.Sql.dll Syntax public class TenantDetailsConfiguration : IEntityTypeConfiguration<TenantDetails> Methods Configure(EntityTypeBuilder<TenantDetails>) Configures the entity of type TenantDetails. Declaration public void Configure(EntityTypeBuilder<TenantDetails> builder) Parameters EntityTypeBuilder<TenantDetails> builder The builder to be used to configure the entity type. Implements IEntityTypeConfiguration<TEntity>.Configure(EntityTypeBuilder<TEntity>) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.TenantOptionConfiguration.html",
    "title": "Class TenantOptionConfiguration",
    "keywords": "Class TenantOptionConfiguration Inheritance object TenantOptionConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Repository.Sql Assembly: SparkPlug.Business.Tenancy.Repository.Sql.dll Syntax public class TenantOptionConfiguration : IEntityTypeConfiguration<TenantOption> Methods Configure(EntityTypeBuilder<TenantOption>) Configures the entity of type TenantOption. Declaration public void Configure(EntityTypeBuilder<TenantOption> builder) Parameters EntityTypeBuilder<TenantOption> builder The builder to be used to configure the entity type. Implements IEntityTypeConfiguration<TEntity>.Configure(EntityTypeBuilder<TEntity>) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Repository.Sql.html": {
    "href": "api/SparkPlug.Business.Tenancy.Repository.Sql.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Repository.Sql",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Repository.Sql Classes TenancyRepositorySqlModule TenantDetailsConfiguration TenantOptionConfiguration"
  },
  "api/SparkPlug.Business.Tenancy.Service.ITenant.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.ITenant.html",
    "title": "Interface ITenant",
    "keywords": "Interface ITenant Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public interface ITenant Properties Id Declaration string? Id { get; } Property Value string Name Declaration string? Name { get; } Property Value string Options Declaration IDictionary<string, string?> Options { get; } Property Value IDictionary<string, string> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.ITenantResolver.html",
    "title": "Interface ITenantResolver",
    "keywords": "Interface ITenantResolver Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public interface ITenantResolver Methods GetAllTenantsAsync() Declaration Task<IEnumerable<ITenant>> GetAllTenantsAsync() Returns Task<IEnumerable<ITenant>> ResolveAsync(string?) Declaration Task<ITenant> ResolveAsync(string? id) Parameters string id Returns Task<ITenant> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenancyServiceModule.html",
    "title": "Class TenancyServiceModule",
    "keywords": "Class TenancyServiceModule Inheritance object TenancyServiceModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public class TenancyServiceModule : IModule Methods AddModule(IServiceCollection) Declaration public void AddModule(IServiceCollection services) Parameters IServiceCollection services Implements IModule.AddModule(IServiceCollection) UseMiddelwares(IApplicationBuilder) Declaration public void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app Implements IModule.UseMiddelwares(IApplicationBuilder) UseModule(IApplicationBuilder, IServiceProvider) Declaration public void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Implements IModule.UseModule(IApplicationBuilder, IServiceProvider) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.Tenant.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.Tenant.html",
    "title": "Class Tenant",
    "keywords": "Class Tenant Inheritance object Tenant Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public class Tenant : ITenant Properties Default Declaration public static ITenant Default { get; } Property Value ITenant Id Declaration public string? Id { get; set; } Property Value string Implements ITenant.Id Name Declaration public string? Name { get; set; } Property Value string Implements ITenant.Name Options Declaration public IDictionary<string, string?> Options { get; set; } Property Value IDictionary<string, string> Implements ITenant.Options Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenantOptions-1.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenantOptions-1.html",
    "title": "Class TenantOptions<TOptions>",
    "keywords": "Class TenantOptions<TOptions> Inheritance object TenantOptions<TOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public class TenantOptions<TOptions> : ITenantOptions<TOptions> where TOptions : new() Type Parameters TOptions Constructors TenantOptions(ITenant) Declaration public TenantOptions(ITenant tenant) Parameters ITenant tenant Properties Value Declaration public TOptions Value { get; } Property Value TOptions Implements ITenantOptions<TOptions>.Value Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenantResolverMiddleware.html",
    "title": "Class TenantResolverMiddleware",
    "keywords": "Class TenantResolverMiddleware Inheritance object TenantResolverMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public class TenantResolverMiddleware Constructors TenantResolverMiddleware(RequestDelegate, IServiceProvider) Declaration public TenantResolverMiddleware(RequestDelegate next, IServiceProvider serviceProvider) Parameters RequestDelegate next IServiceProvider serviceProvider Methods InvokeAsync(HttpContext, ITenantResolver) Declaration public Task InvokeAsync(HttpContext context, ITenantResolver tenantResolver) Parameters HttpContext context ITenantResolver tenantResolver Returns Task Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.TenantService.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.TenantService.html",
    "title": "Class TenantService",
    "keywords": "Class TenantService Inheritance object BaseService<long, TenantDetails> TenantService Inherited Members BaseService<long, TenantDetails>.GetRepository() BaseService<long, TenantDetails>.GetService<TService>() BaseService<long, TenantDetails>.CreateAsync(ICommandRequest<TenantDetails>, CancellationToken) BaseService<long, TenantDetails>.CreateManyAsync(ICommandRequest<TenantDetails[]>, CancellationToken) BaseService<long, TenantDetails>.DeleteAsync(long, CancellationToken) BaseService<long, TenantDetails>.GetAsync(long, CancellationToken) BaseService<long, TenantDetails>.CountAsync(IQueryRequest, CancellationToken) BaseService<long, TenantDetails>.GetManyAsync(long[], CancellationToken) BaseService<long, TenantDetails>.FindAsync(IQueryRequest, CancellationToken) BaseService<long, TenantDetails>.QueryAsync(IQueryRequest, CancellationToken) BaseService<long, TenantDetails>.PatchAsync(long, ICommandRequest<JsonPatchDocument<TenantDetails>>, CancellationToken) BaseService<long, TenantDetails>.ReplaceAsync(long, ICommandRequest<TenantDetails>, CancellationToken) BaseService<long, TenantDetails>.UpdateAsync(long, ICommandRequest<TenantDetails>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Business.Tenancy.Service Assembly: SparkPlug.Business.Tenancy.Service.dll Syntax public class TenantService : BaseService<long, TenantDetails>, ITenantResolver Constructors TenantService(IServiceProvider) Declaration public TenantService(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Methods GetAllTenantsAsync() Declaration public Task<IEnumerable<ITenant>> GetAllTenantsAsync() Returns Task<IEnumerable<ITenant>> Implements ITenantResolver.GetAllTenantsAsync() GetByTenantId(string?) Declaration public Task<Tenant> GetByTenantId(string? id) Parameters string id Returns Task<Tenant> ResolveAsync(string?) Declaration public Task<ITenant> ResolveAsync(string? id) Parameters string id Returns Task<ITenant> Implements ITenantResolver.ResolveAsync(string?) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Business.Tenancy.Service.html": {
    "href": "api/SparkPlug.Business.Tenancy.Service.html",
    "title": "Namespace SparkPlug.Business.Tenancy.Service",
    "keywords": "Namespace SparkPlug.Business.Tenancy.Service Classes TenancyServiceModule Tenant TenantOptions<TOptions> TenantResolverMiddleware TenantService Interfaces ITenant ITenantResolver"
  },
  "api/SparkPlug.Contracts.ApiRequest.html": {
    "href": "api/SparkPlug.Contracts.ApiRequest.html",
    "title": "Class ApiRequest",
    "keywords": "Class ApiRequest Inheritance object ApiRequest CommandRequest<TEntity> CompositeRequest QueryRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public abstract class ApiRequest : IApiRequest Properties Deps Declaration public string[]? Deps { get; set; } Property Value string[] Implements IApiRequest.Deps Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extensions.AddDependency(IApiRequest, params string[])"
  },
  "api/SparkPlug.Contracts.ApiResponse.html": {
    "href": "api/SparkPlug.Contracts.ApiResponse.html",
    "title": "Class ApiResponse",
    "keywords": "Class ApiResponse Inheritance object ApiResponse CommandResponse CompositeResponse ErrorResponse QueryResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public abstract class ApiResponse : IApiResponse Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.CommandRequest-1.html": {
    "href": "api/SparkPlug.Contracts.CommandRequest-1.html",
    "title": "Class CommandRequest<TEntity>",
    "keywords": "Class CommandRequest<TEntity> Inheritance object ApiRequest CommandRequest<TEntity> Inherited Members ApiRequest.Deps object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class CommandRequest<TEntity> : ApiRequest, ICommandRequest<TEntity>, IApiRequest Type Parameters TEntity Constructors CommandRequest(TEntity?) Declaration public CommandRequest(TEntity? data = default) Parameters TEntity data Properties Data Declaration public TEntity? Data { get; set; } Property Value TEntity Implements ICommandRequest<TEntity>.Data Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extensions.AddDependency(IApiRequest, params string[])"
  },
  "api/SparkPlug.Contracts.CommandResponse.html": {
    "href": "api/SparkPlug.Contracts.CommandResponse.html",
    "title": "Class CommandResponse",
    "keywords": "Class CommandResponse Inheritance object ApiResponse CommandResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class CommandResponse : ApiResponse, ICommandResponse, IApiResponse Constructors CommandResponse(object?) Declaration public CommandResponse(object? data = null) Parameters object data Properties Data Declaration public object? Data { get; set; } Property Value object Implements ICommandResponse.Data Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.CompositeFilter.html": {
    "href": "api/SparkPlug.Contracts.CompositeFilter.html",
    "title": "Class CompositeFilter",
    "keywords": "Class CompositeFilter Inheritance object Filter CompositeFilter Inherited Members Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class CompositeFilter : Filter, ICompositeFilter, IFilter Constructors CompositeFilter(CompositeOperator, params Filter[]?) Declaration public CompositeFilter(CompositeOperator op = CompositeOperator.And, params Filter[]? filters) Parameters CompositeOperator op Filter[] filters Properties Filters Declaration public Filter[]? Filters { get; set; } Property Value Filter[] Implements ICompositeFilter.Filters Op Declaration public CompositeOperator Op { get; set; } Property Value CompositeOperator Implements ICompositeFilter.Op Extension Methods Extensions.And(CompositeFilter, CompositeFilter) Extensions.And(CompositeFilter, ConditionFilter) Extensions.And(CompositeFilter, Func<CompositeFilter, CompositeFilter>) Extensions.And(CompositeFilter, string, FieldOperator, object) Extensions.And(CompositeFilter, string, UnaryOperator) Extensions.AndEqual(CompositeFilter, string, object) Extensions.AndGreaterThan(CompositeFilter, string, object) Extensions.AndGreaterThanOrEqual(CompositeFilter, string, object) Extensions.AndIn(CompositeFilter, string, object[]) Extensions.AndIsNotNull(CompositeFilter, string) Extensions.AndIsNull(CompositeFilter, string) Extensions.AndLessThan(CompositeFilter, string, object) Extensions.AndLessThanOrEqual(CompositeFilter, string, object) Extensions.AndNotEqual(CompositeFilter, string, object) Extensions.AndNotIn(CompositeFilter, string, object[]) Extensions.Or(CompositeFilter, CompositeFilter) Extensions.Or(CompositeFilter, ConditionFilter) Extensions.Or(CompositeFilter, Func<CompositeFilter, CompositeFilter>) Extensions.Or(CompositeFilter, string, FieldOperator, object) Extensions.Or(CompositeFilter, string, UnaryOperator) Extensions.OrEqual(CompositeFilter, string, object) Extensions.OrGreaterThan(CompositeFilter, string, object) Extensions.OrGreaterThanOrEqual(CompositeFilter, string, object) Extensions.OrIn(CompositeFilter, string, object[]) Extensions.OrIsNotNull(CompositeFilter, string) Extensions.OrIsNull(CompositeFilter, string) Extensions.OrLessThan(CompositeFilter, string, object) Extensions.OrLessThanOrEqual(CompositeFilter, string, object) Extensions.OrNotEqual(CompositeFilter, string, object) Extensions.OrNotIn(CompositeFilter, string, object[]) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.CompositeOperator.html": {
    "href": "api/SparkPlug.Contracts.CompositeOperator.html",
    "title": "Enum CompositeOperator",
    "keywords": "Enum CompositeOperator Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public enum CompositeOperator And Or"
  },
  "api/SparkPlug.Contracts.CompositeRequest.html": {
    "href": "api/SparkPlug.Contracts.CompositeRequest.html",
    "title": "Class CompositeRequest",
    "keywords": "Class CompositeRequest Inheritance object ApiRequest CompositeRequest Inherited Members ApiRequest.Deps object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class CompositeRequest : ApiRequest, ICompositeRequest, IApiRequest Constructors CompositeRequest() Declaration public CompositeRequest() Properties Requests Declaration public Dictionary<string, IApiRequest>? Requests { get; set; } Property Value Dictionary<string, IApiRequest> Implements ICompositeRequest.Requests Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extensions.AddDependency(IApiRequest, params string[]) Extensions.Add(ICompositeRequest, string, IApiRequest)"
  },
  "api/SparkPlug.Contracts.CompositeResponse.html": {
    "href": "api/SparkPlug.Contracts.CompositeResponse.html",
    "title": "Class CompositeResponse",
    "keywords": "Class CompositeResponse Inheritance object ApiResponse CompositeResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class CompositeResponse : ApiResponse, ICompositeResponse, IApiResponse Constructors CompositeResponse(Dictionary<string, IApiResponse>?) Declaration public CompositeResponse(Dictionary<string, IApiResponse>? data = null) Parameters Dictionary<string, IApiResponse> data Properties Data Declaration public Dictionary<string, IApiResponse>? Data { get; set; } Property Value Dictionary<string, IApiResponse> Implements ICompositeResponse.Data Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ConditionFilter.html": {
    "href": "api/SparkPlug.Contracts.ConditionFilter.html",
    "title": "Class ConditionFilter",
    "keywords": "Class ConditionFilter Inheritance object Filter ConditionFilter FieldFilter UnaryFilter Inherited Members Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class ConditionFilter : Filter, IConditionFilter, IFilter Constructors ConditionFilter(string, FilterType) Declaration public ConditionFilter(string field, FilterType filterType) Parameters string field FilterType filterType Properties Field Declaration public string Field { get; set; } Property Value string Implements IConditionFilter.Field Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.Direction.html": {
    "href": "api/SparkPlug.Contracts.Direction.html",
    "title": "Enum Direction",
    "keywords": "Enum Direction Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public enum Direction Ascending Descending"
  },
  "api/SparkPlug.Contracts.ErrorResponse.html": {
    "href": "api/SparkPlug.Contracts.ErrorResponse.html",
    "title": "Class ErrorResponse",
    "keywords": "Class ErrorResponse Inheritance object ApiResponse ErrorResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class ErrorResponse : ApiResponse, IErrorResponse, IApiResponse Properties Code Declaration public string? Code { get; set; } Property Value string Implements IErrorResponse.Code Message Declaration public string? Message { get; set; } Property Value string Implements IErrorResponse.Message StackTrace Declaration public string? StackTrace { get; set; } Property Value string Implements IErrorResponse.StackTrace Extension Methods ExceptionExtension.SetCode(ErrorResponse, string) ExceptionExtension.SetFromException(ErrorResponse, Exception) ExceptionExtension.SetMessage(ErrorResponse, string) ExceptionExtension.SetStackTrace(ErrorResponse, string) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ExceptionExtension.html": {
    "href": "api/SparkPlug.Contracts.ExceptionExtension.html",
    "title": "Class ExceptionExtension",
    "keywords": "Class ExceptionExtension Inheritance object ExceptionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public static class ExceptionExtension Methods GetInnerStackTrace(Exception?) Declaration public static string GetInnerStackTrace(this Exception? exception) Parameters Exception exception Returns string SetCode(ErrorResponse, string) Declaration public static ErrorResponse SetCode(this ErrorResponse error, string code) Parameters ErrorResponse error string code Returns ErrorResponse SetFromException(ErrorResponse, Exception) Declaration public static ErrorResponse SetFromException(this ErrorResponse error, Exception ex) Parameters ErrorResponse error Exception ex Returns ErrorResponse SetMessage(ErrorResponse, string) Declaration public static ErrorResponse SetMessage(this ErrorResponse error, string message) Parameters ErrorResponse error string message Returns ErrorResponse SetStackTrace(ErrorResponse, string) Declaration public static ErrorResponse SetStackTrace(this ErrorResponse error, string stackTrace) Parameters ErrorResponse error string stackTrace Returns ErrorResponse"
  },
  "api/SparkPlug.Contracts.Extensions.html": {
    "href": "api/SparkPlug.Contracts.Extensions.html",
    "title": "Class Extensions",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public static class Extensions Methods Add(ICompositeRequest, string, IApiRequest) Declaration public static ICompositeRequest Add(this ICompositeRequest source, string key, IApiRequest value) Parameters ICompositeRequest source string key IApiRequest value Returns ICompositeRequest AddData(IQueryResponse, IEnumerable<object>) Declaration public static IQueryResponse AddData(this IQueryResponse source, IEnumerable<object> data) Parameters IQueryResponse source IEnumerable<object> data Returns IQueryResponse AddDependency(IApiRequest, params string[]) Declaration public static IApiRequest AddDependency(this IApiRequest request, params string[] deps) Parameters IApiRequest request string[] deps Returns IApiRequest AddPageContext(IQueryResponse, IPageContext) Declaration public static IQueryResponse AddPageContext(this IQueryResponse source, IPageContext pc) Parameters IQueryResponse source IPageContext pc Returns IQueryResponse And(CompositeFilter, CompositeFilter) Declaration public static CompositeFilter And(this CompositeFilter source, CompositeFilter filter) Parameters CompositeFilter source CompositeFilter filter Returns CompositeFilter And(CompositeFilter, ConditionFilter) Declaration public static CompositeFilter And(this CompositeFilter source, ConditionFilter filter) Parameters CompositeFilter source ConditionFilter filter Returns CompositeFilter And(CompositeFilter, Func<CompositeFilter, CompositeFilter>) Declaration public static CompositeFilter And(this CompositeFilter source, Func<CompositeFilter, CompositeFilter> filterAction) Parameters CompositeFilter source Func<CompositeFilter, CompositeFilter> filterAction Returns CompositeFilter And(CompositeFilter, string, FieldOperator, object) Declaration public static CompositeFilter And(this CompositeFilter source, string field, FieldOperator op, object value) Parameters CompositeFilter source string field FieldOperator op object value Returns CompositeFilter And(CompositeFilter, string, UnaryOperator) Declaration public static CompositeFilter And(this CompositeFilter source, string field, UnaryOperator op) Parameters CompositeFilter source string field UnaryOperator op Returns CompositeFilter AndEqual(CompositeFilter, string, object) Declaration public static CompositeFilter AndEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter AndGreaterThan(CompositeFilter, string, object) Declaration public static CompositeFilter AndGreaterThan(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter AndGreaterThanOrEqual(CompositeFilter, string, object) Declaration public static CompositeFilter AndGreaterThanOrEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter AndIn(CompositeFilter, string, object[]) Declaration public static CompositeFilter AndIn(this CompositeFilter source, string field, object[] values) Parameters CompositeFilter source string field object[] values Returns CompositeFilter AndIsNotNull(CompositeFilter, string) Declaration public static CompositeFilter AndIsNotNull(this CompositeFilter source, string field) Parameters CompositeFilter source string field Returns CompositeFilter AndIsNull(CompositeFilter, string) Declaration public static CompositeFilter AndIsNull(this CompositeFilter source, string field) Parameters CompositeFilter source string field Returns CompositeFilter AndLessThan(CompositeFilter, string, object) Declaration public static CompositeFilter AndLessThan(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter AndLessThanOrEqual(CompositeFilter, string, object) Declaration public static CompositeFilter AndLessThanOrEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter AndNotEqual(CompositeFilter, string, object) Declaration public static CompositeFilter AndNotEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter AndNotIn(CompositeFilter, string, object[]) Declaration public static CompositeFilter AndNotIn(this CompositeFilter source, string field, object[] values) Parameters CompositeFilter source string field object[] values Returns CompositeFilter NextPage(PageContext) Declaration public static PageContext NextPage(this PageContext pc) Parameters PageContext pc Returns PageContext Or(CompositeFilter, CompositeFilter) Declaration public static CompositeFilter Or(this CompositeFilter source, CompositeFilter filter) Parameters CompositeFilter source CompositeFilter filter Returns CompositeFilter Or(CompositeFilter, ConditionFilter) Declaration public static CompositeFilter Or(this CompositeFilter source, ConditionFilter filter) Parameters CompositeFilter source ConditionFilter filter Returns CompositeFilter Or(CompositeFilter, Func<CompositeFilter, CompositeFilter>) Declaration public static CompositeFilter Or(this CompositeFilter source, Func<CompositeFilter, CompositeFilter> filterAction) Parameters CompositeFilter source Func<CompositeFilter, CompositeFilter> filterAction Returns CompositeFilter Or(CompositeFilter, string, FieldOperator, object) Declaration public static CompositeFilter Or(this CompositeFilter source, string field, FieldOperator op, object value) Parameters CompositeFilter source string field FieldOperator op object value Returns CompositeFilter Or(CompositeFilter, string, UnaryOperator) Declaration public static CompositeFilter Or(this CompositeFilter source, string field, UnaryOperator op) Parameters CompositeFilter source string field UnaryOperator op Returns CompositeFilter OrEqual(CompositeFilter, string, object) Declaration public static CompositeFilter OrEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter OrGreaterThan(CompositeFilter, string, object) Declaration public static CompositeFilter OrGreaterThan(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter OrGreaterThanOrEqual(CompositeFilter, string, object) Declaration public static CompositeFilter OrGreaterThanOrEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter OrIn(CompositeFilter, string, object[]) Declaration public static CompositeFilter OrIn(this CompositeFilter source, string field, object[] values) Parameters CompositeFilter source string field object[] values Returns CompositeFilter OrIsNotNull(CompositeFilter, string) Declaration public static CompositeFilter OrIsNotNull(this CompositeFilter source, string field) Parameters CompositeFilter source string field Returns CompositeFilter OrIsNull(CompositeFilter, string) Declaration public static CompositeFilter OrIsNull(this CompositeFilter source, string field) Parameters CompositeFilter source string field Returns CompositeFilter OrLessThan(CompositeFilter, string, object) Declaration public static CompositeFilter OrLessThan(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter OrLessThanOrEqual(CompositeFilter, string, object) Declaration public static CompositeFilter OrLessThanOrEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter OrNotEqual(CompositeFilter, string, object) Declaration public static CompositeFilter OrNotEqual(this CompositeFilter source, string field, object value) Parameters CompositeFilter source string field object value Returns CompositeFilter OrNotIn(CompositeFilter, string, object[]) Declaration public static CompositeFilter OrNotIn(this CompositeFilter source, string field, object[] values) Parameters CompositeFilter source string field object[] values Returns CompositeFilter SetTotal(PageContext, long) Declaration public static PageContext SetTotal(this PageContext pc, long total) Parameters PageContext pc long total Returns PageContext"
  },
  "api/SparkPlug.Contracts.FieldFilter.html": {
    "href": "api/SparkPlug.Contracts.FieldFilter.html",
    "title": "Class FieldFilter",
    "keywords": "Class FieldFilter Inheritance object Filter ConditionFilter FieldFilter Inherited Members ConditionFilter.Field Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class FieldFilter : ConditionFilter, IFieldFilter, IConditionFilter, IFilter Constructors FieldFilter(string, FieldOperator, object, FilterValueType?) Declaration public FieldFilter(string field, FieldOperator op, object value, FilterValueType? type = null) Parameters string field FieldOperator op object value FilterValueType? type Properties Op Declaration public FieldOperator Op { get; set; } Property Value FieldOperator Implements IFieldFilter.Op Type Declaration public FilterValueType? Type { get; set; } Property Value FilterValueType? Implements IFieldFilter.Type Value Declaration public object? Value { get; set; } Property Value object Implements IFieldFilter.Value Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.FieldOperator.html": {
    "href": "api/SparkPlug.Contracts.FieldOperator.html",
    "title": "Enum FieldOperator",
    "keywords": "Enum FieldOperator Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public enum FieldOperator Between Contains EndsWith Equal GreaterThan GreaterThanOrEqual In LessThan LessThanOrEqual NotEqual NotIn StartsWith"
  },
  "api/SparkPlug.Contracts.Filter.html": {
    "href": "api/SparkPlug.Contracts.Filter.html",
    "title": "Class Filter",
    "keywords": "Class Filter Inheritance object Filter CompositeFilter ConditionFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax [JsonConverter(typeof(FilterConverter))] public class Filter : IFilter Constructors Filter(FilterType) Declaration public Filter(FilterType filterType) Parameters FilterType filterType Properties Kind Declaration public FilterType Kind { get; set; } Property Value FilterType Implements IFilter.Kind Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.FilterConverter.html": {
    "href": "api/SparkPlug.Contracts.FilterConverter.html",
    "title": "Class FilterConverter",
    "keywords": "Class FilterConverter Inheritance object JsonConverter FilterConverter Inherited Members JsonConverter.CanRead object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class FilterConverter : JsonConverter Properties CanWrite Gets a value indicating whether this Newtonsoft.Json.JsonConverter can write JSON. Declaration public override bool CanWrite { get; } Property Value bool true if this Newtonsoft.Json.JsonConverter can write JSON; otherwise, false. Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Determines whether this instance can convert the specified object type. Declaration public override bool CanConvert(Type objectType) Parameters Type objectType Type of the object. Returns bool true if this instance can convert the specified object type; otherwise, false. Overrides JsonConverter.CanConvert(Type) ReadJson(JsonReader, Type, object?, JsonSerializer) Reads the JSON representation of the object. Declaration public override Filter ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer) Parameters JsonReader reader The Newtonsoft.Json.JsonReader to read from. Type objectType Type of the object. object existingValue The existing value of object being read. JsonSerializer serializer The calling serializer. Returns Filter The object value. Overrides JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) WriteJson(JsonWriter, object?, JsonSerializer) Writes the JSON representation of the object. Declaration public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer) Parameters JsonWriter writer The Newtonsoft.Json.JsonWriter to write to. object value The value. JsonSerializer serializer The calling serializer. Overrides JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.FilterType.html": {
    "href": "api/SparkPlug.Contracts.FilterType.html",
    "title": "Enum FilterType",
    "keywords": "Enum FilterType Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public enum FilterType Composite Field Unary"
  },
  "api/SparkPlug.Contracts.FilterValueType.html": {
    "href": "api/SparkPlug.Contracts.FilterValueType.html",
    "title": "Enum FilterValueType",
    "keywords": "Enum FilterValueType Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public enum FilterValueType DateOnly UtcDateTime"
  },
  "api/SparkPlug.Contracts.IApiRequest.html": {
    "href": "api/SparkPlug.Contracts.IApiRequest.html",
    "title": "Interface IApiRequest",
    "keywords": "Interface IApiRequest Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IApiRequest Properties Deps Declaration string[]? Deps { get; set; } Property Value string[] Extension Methods Extensions.AddDependency(IApiRequest, params string[]) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IApiResponse.html": {
    "href": "api/SparkPlug.Contracts.IApiResponse.html",
    "title": "Interface IApiResponse",
    "keywords": "Interface IApiResponse Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IApiResponse Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ICommandRequest-1.html": {
    "href": "api/SparkPlug.Contracts.ICommandRequest-1.html",
    "title": "Interface ICommandRequest<TEntity>",
    "keywords": "Interface ICommandRequest<TEntity> Inherited Members IApiRequest.Deps Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface ICommandRequest<TEntity> : IApiRequest Type Parameters TEntity Properties Data Declaration TEntity? Data { get; set; } Property Value TEntity Extension Methods Extensions.AddDependency(IApiRequest, params string[]) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ICommandResponse.html": {
    "href": "api/SparkPlug.Contracts.ICommandResponse.html",
    "title": "Interface ICommandResponse",
    "keywords": "Interface ICommandResponse Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface ICommandResponse : IApiResponse Properties Data Declaration object? Data { get; set; } Property Value object Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ICompositeFilter.html": {
    "href": "api/SparkPlug.Contracts.ICompositeFilter.html",
    "title": "Interface ICompositeFilter",
    "keywords": "Interface ICompositeFilter Inherited Members IFilter.Kind Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface ICompositeFilter : IFilter Properties Filters Declaration Filter[]? Filters { get; set; } Property Value Filter[] Op Declaration CompositeOperator Op { get; set; } Property Value CompositeOperator Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.ICompositeRequest.html": {
    "href": "api/SparkPlug.Contracts.ICompositeRequest.html",
    "title": "Interface ICompositeRequest",
    "keywords": "Interface ICompositeRequest Inherited Members IApiRequest.Deps Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface ICompositeRequest : IApiRequest Properties Requests Declaration Dictionary<string, IApiRequest>? Requests { get; set; } Property Value Dictionary<string, IApiRequest> Extension Methods Extensions.AddDependency(IApiRequest, params string[]) Extensions.Add(ICompositeRequest, string, IApiRequest) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ICompositeResponse.html": {
    "href": "api/SparkPlug.Contracts.ICompositeResponse.html",
    "title": "Interface ICompositeResponse",
    "keywords": "Interface ICompositeResponse Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface ICompositeResponse : IApiResponse Properties Data Declaration Dictionary<string, IApiResponse>? Data { get; set; } Property Value Dictionary<string, IApiResponse> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IConditionFilter.html": {
    "href": "api/SparkPlug.Contracts.IConditionFilter.html",
    "title": "Interface IConditionFilter",
    "keywords": "Interface IConditionFilter Inherited Members IFilter.Kind Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IConditionFilter : IFilter Properties Field Declaration string Field { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.IErrorResponse.html": {
    "href": "api/SparkPlug.Contracts.IErrorResponse.html",
    "title": "Interface IErrorResponse",
    "keywords": "Interface IErrorResponse Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IErrorResponse : IApiResponse Properties Code Declaration string? Code { get; set; } Property Value string Message Declaration string? Message { get; set; } Property Value string StackTrace Declaration string? StackTrace { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IFieldFilter.html": {
    "href": "api/SparkPlug.Contracts.IFieldFilter.html",
    "title": "Interface IFieldFilter",
    "keywords": "Interface IFieldFilter Inherited Members IConditionFilter.Field IFilter.Kind Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IFieldFilter : IConditionFilter, IFilter Properties Op Declaration FieldOperator Op { get; set; } Property Value FieldOperator Type Declaration FilterValueType? Type { get; set; } Property Value FilterValueType? Value Declaration object? Value { get; set; } Property Value object Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.IFilter.html": {
    "href": "api/SparkPlug.Contracts.IFilter.html",
    "title": "Interface IFilter",
    "keywords": "Interface IFilter Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IFilter Properties Kind Declaration FilterType Kind { get; set; } Property Value FilterType Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.IInclude.html": {
    "href": "api/SparkPlug.Contracts.IInclude.html",
    "title": "Interface IInclude",
    "keywords": "Interface IInclude Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IInclude Properties Includes Declaration Include[]? Includes { get; set; } Property Value Include[] Name Declaration string Name { get; set; } Property Value string Select Declaration string[]? Select { get; set; } Property Value string[] Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IModule.html": {
    "href": "api/SparkPlug.Contracts.IModule.html",
    "title": "Interface IModule",
    "keywords": "Interface IModule Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IModule Methods AddModule(IServiceCollection) Declaration void AddModule(IServiceCollection services) Parameters IServiceCollection services UseMiddelwares(IApplicationBuilder) Declaration void UseMiddelwares(IApplicationBuilder app) Parameters IApplicationBuilder app UseModule(IApplicationBuilder, IServiceProvider) Declaration void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider) Parameters IApplicationBuilder app IServiceProvider serviceProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IOrder.html": {
    "href": "api/SparkPlug.Contracts.IOrder.html",
    "title": "Interface IOrder",
    "keywords": "Interface IOrder Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IOrder Properties Direction Declaration Direction Direction { get; set; } Property Value Direction Field Declaration string Field { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IPageContext.html": {
    "href": "api/SparkPlug.Contracts.IPageContext.html",
    "title": "Interface IPageContext",
    "keywords": "Interface IPageContext Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IPageContext Properties PageNo Declaration int PageNo { get; set; } Property Value int PageSize Declaration int PageSize { get; } Property Value int Skip Declaration int Skip { get; } Property Value int Total Declaration long Total { get; set; } Property Value long Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IQueryRequest.html": {
    "href": "api/SparkPlug.Contracts.IQueryRequest.html",
    "title": "Interface IQueryRequest",
    "keywords": "Interface IQueryRequest Inherited Members IApiRequest.Deps Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IQueryRequest : IApiRequest Properties Includes Declaration Include[]? Includes { get; set; } Property Value Include[] Page Declaration PageContext? Page { get; set; } Property Value PageContext Select Declaration string[]? Select { get; set; } Property Value string[] Sort Declaration Order[]? Sort { get; set; } Property Value Order[] Where Declaration Filter? Where { get; set; } Property Value Filter Extension Methods Extensions.AddDependency(IApiRequest, params string[]) IQueryRequestExtensions.AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Include(IQueryRequest, Include) IQueryRequestExtensions.Include(IQueryRequest, string) IQueryRequestExtensions.Includes(IQueryRequest, params Include[]) IQueryRequestExtensions.NextPage(IQueryRequest) IQueryRequestExtensions.OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Page(IQueryRequest, PageContext) IQueryRequestExtensions.Page(IQueryRequest, int, int) IQueryRequestExtensions.Select(IQueryRequest, params string[]) IQueryRequestExtensions.Sort(IQueryRequest, Order) IQueryRequestExtensions.Sort(IQueryRequest, Order[]) IQueryRequestExtensions.Sort(IQueryRequest, string, Direction) IQueryRequestExtensions.Where(IQueryRequest, IFilter) IQueryRequestExtensions.Where(IQueryRequest, string, FieldOperator, object) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IQueryRequestExtensions.html": {
    "href": "api/SparkPlug.Contracts.IQueryRequestExtensions.html",
    "title": "Class IQueryRequestExtensions",
    "keywords": "Class IQueryRequestExtensions Inheritance object IQueryRequestExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public static class IQueryRequestExtensions Methods AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) Declaration public static IQueryRequest AndWhere(this IQueryRequest request, Func<CompositeFilter, CompositeFilter> filterAction) Parameters IQueryRequest request Func<CompositeFilter, CompositeFilter> filterAction Returns IQueryRequest Include(IQueryRequest, Include) Declaration public static IQueryRequest Include(this IQueryRequest request, Include include) Parameters IQueryRequest request Include include Returns IQueryRequest Include(IQueryRequest, string) Declaration public static IQueryRequest Include(this IQueryRequest request, string name) Parameters IQueryRequest request string name Returns IQueryRequest Includes(IQueryRequest, params Include[]) Declaration public static IQueryRequest Includes(this IQueryRequest request, params Include[] includes) Parameters IQueryRequest request Include[] includes Returns IQueryRequest NextPage(IQueryRequest) Declaration public static IQueryRequest NextPage(this IQueryRequest request) Parameters IQueryRequest request Returns IQueryRequest OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) Declaration public static IQueryRequest OrWhere(this IQueryRequest request, Func<CompositeFilter, CompositeFilter> filterAction) Parameters IQueryRequest request Func<CompositeFilter, CompositeFilter> filterAction Returns IQueryRequest Page(IQueryRequest, PageContext) Declaration public static IQueryRequest Page(this IQueryRequest request, PageContext page) Parameters IQueryRequest request PageContext page Returns IQueryRequest Page(IQueryRequest, int, int) Declaration public static IQueryRequest Page(this IQueryRequest request, int pageNo, int pageSize) Parameters IQueryRequest request int pageNo int pageSize Returns IQueryRequest Select(IQueryRequest, params string[]) Declaration public static IQueryRequest Select(this IQueryRequest request, params string[] fields) Parameters IQueryRequest request string[] fields Returns IQueryRequest Sort(IQueryRequest, Order) Declaration public static IQueryRequest Sort(this IQueryRequest request, Order order) Parameters IQueryRequest request Order order Returns IQueryRequest Sort(IQueryRequest, Order[]) Declaration public static IQueryRequest Sort(this IQueryRequest request, Order[] orders) Parameters IQueryRequest request Order[] orders Returns IQueryRequest Sort(IQueryRequest, string, Direction) Declaration public static IQueryRequest Sort(this IQueryRequest request, string field, Direction direction) Parameters IQueryRequest request string field Direction direction Returns IQueryRequest Where(IQueryRequest, IFilter) Declaration public static IQueryRequest Where(this IQueryRequest request, IFilter filter) Parameters IQueryRequest request IFilter filter Returns IQueryRequest Where(IQueryRequest, string, FieldOperator, object) Declaration public static IQueryRequest Where(this IQueryRequest request, string field, FieldOperator op, object value) Parameters IQueryRequest request string field FieldOperator op object value Returns IQueryRequest"
  },
  "api/SparkPlug.Contracts.IQueryResponse.html": {
    "href": "api/SparkPlug.Contracts.IQueryResponse.html",
    "title": "Interface IQueryResponse",
    "keywords": "Interface IQueryResponse Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IQueryResponse : IApiResponse Properties Data Declaration IEnumerable<object>? Data { get; set; } Property Value IEnumerable<object> Page Declaration IPageContext? Page { get; set; } Property Value IPageContext Extension Methods Extensions.AddData(IQueryResponse, IEnumerable<object>) Extensions.AddPageContext(IQueryResponse, IPageContext) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.ISerializer.html": {
    "href": "api/SparkPlug.Contracts.ISerializer.html",
    "title": "Interface ISerializer",
    "keywords": "Interface ISerializer Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface ISerializer Methods Deserialize<T>(string) Declaration T? Deserialize<T>(string json) Parameters string json Returns T Type Parameters T Serialize<T>(T) Declaration string Serialize<T>(T obj) Parameters T obj Returns string Type Parameters T Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.IUnaryFilter.html": {
    "href": "api/SparkPlug.Contracts.IUnaryFilter.html",
    "title": "Interface IUnaryFilter",
    "keywords": "Interface IUnaryFilter Inherited Members IConditionFilter.Field IFilter.Kind Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public interface IUnaryFilter : IConditionFilter, IFilter Properties Op Declaration UnaryOperator Op { get; set; } Property Value UnaryOperator Extension Methods FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Extention.GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>)"
  },
  "api/SparkPlug.Contracts.Include.html": {
    "href": "api/SparkPlug.Contracts.Include.html",
    "title": "Class Include",
    "keywords": "Class Include Inheritance object Include Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class Include : IInclude Constructors Include(string) Declaration public Include(string name) Parameters string name Include(string, string[], Include[]?) Declaration public Include(string name, string[] columns, Include[]? includes) Parameters string name string[] columns Include[] includes Properties Includes Declaration public Include[]? Includes { get; set; } Property Value Include[] Implements IInclude.Includes Name Declaration public string Name { get; set; } Property Value string Implements IInclude.Name Select Declaration public string[]? Select { get; set; } Property Value string[] Implements IInclude.Select Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.NewtonsoftSerializer.html": {
    "href": "api/SparkPlug.Contracts.NewtonsoftSerializer.html",
    "title": "Class NewtonsoftSerializer",
    "keywords": "Class NewtonsoftSerializer Inheritance object NewtonsoftSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class NewtonsoftSerializer : ISerializer Methods Deserialize<T>(string) Declaration public T? Deserialize<T>(string json) Parameters string json Returns T Type Parameters T Implements ISerializer.Deserialize<T>(string) Serialize<T>(T) Declaration public string Serialize<T>(T obj) Parameters T obj Returns string Type Parameters T Implements ISerializer.Serialize<T>(T) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.Order.html": {
    "href": "api/SparkPlug.Contracts.Order.html",
    "title": "Class Order",
    "keywords": "Class Order Inheritance object Order Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class Order : IOrder Constructors Order(string, Direction) Declaration public Order(string field, Direction direction) Parameters string field Direction direction Properties Direction Declaration public Direction Direction { get; set; } Property Value Direction Implements IOrder.Direction Field Declaration public string Field { get; set; } Property Value string Implements IOrder.Field Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.PageContext.html": {
    "href": "api/SparkPlug.Contracts.PageContext.html",
    "title": "Class PageContext",
    "keywords": "Class PageContext Inheritance object PageContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class PageContext : IPageContext Constructors PageContext(int, int) Declaration public PageContext(int pageNo = 1, int pageSize = 25) Parameters int pageNo int pageSize Properties PageNo Declaration public int PageNo { get; set; } Property Value int Implements IPageContext.PageNo PageSize Declaration public int PageSize { get; } Property Value int Implements IPageContext.PageSize Skip Declaration public int Skip { get; } Property Value int Implements IPageContext.Skip Total Declaration public long Total { get; set; } Property Value long Implements IPageContext.Total Extension Methods Extensions.NextPage(PageContext) Extensions.SetTotal(PageContext, long) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.QueryRequest.html": {
    "href": "api/SparkPlug.Contracts.QueryRequest.html",
    "title": "Class QueryRequest",
    "keywords": "Class QueryRequest Inheritance object ApiRequest QueryRequest Inherited Members ApiRequest.Deps object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class QueryRequest : ApiRequest, IQueryRequest, IApiRequest Constructors QueryRequest() Declaration public QueryRequest() QueryRequest(PageContext) Declaration public QueryRequest(PageContext page) Parameters PageContext page QueryRequest(string[], Include[]?, Filter?, Order[]?, PageContext?) Declaration public QueryRequest(string[] select, Include[]? includes = null, Filter? where = null, Order[]? sort = null, PageContext? page = null) Parameters string[] select Include[] includes Filter where Order[] sort PageContext page Properties Includes Declaration public Include[]? Includes { get; set; } Property Value Include[] Implements IQueryRequest.Includes Page Declaration public PageContext? Page { get; set; } Property Value PageContext Implements IQueryRequest.Page Select Declaration public string[]? Select { get; set; } Property Value string[] Implements IQueryRequest.Select Sort Declaration public Order[]? Sort { get; set; } Property Value Order[] Implements IQueryRequest.Sort Where Declaration public Filter? Where { get; set; } Property Value Filter Implements IQueryRequest.Where Extension Methods Extensions.AddDependency(IApiRequest, params string[]) IQueryRequestExtensions.AndWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Include(IQueryRequest, Include) IQueryRequestExtensions.Include(IQueryRequest, string) IQueryRequestExtensions.Includes(IQueryRequest, params Include[]) IQueryRequestExtensions.NextPage(IQueryRequest) IQueryRequestExtensions.OrWhere(IQueryRequest, Func<CompositeFilter, CompositeFilter>) IQueryRequestExtensions.Page(IQueryRequest, PageContext) IQueryRequestExtensions.Page(IQueryRequest, int, int) IQueryRequestExtensions.Select(IQueryRequest, params string[]) IQueryRequestExtensions.Sort(IQueryRequest, Order) IQueryRequestExtensions.Sort(IQueryRequest, Order[]) IQueryRequestExtensions.Sort(IQueryRequest, string, Direction) IQueryRequestExtensions.Where(IQueryRequest, IFilter) IQueryRequestExtensions.Where(IQueryRequest, string, FieldOperator, object) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.QueryResponse.html": {
    "href": "api/SparkPlug.Contracts.QueryResponse.html",
    "title": "Class QueryResponse",
    "keywords": "Class QueryResponse Inheritance object ApiResponse QueryResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class QueryResponse : ApiResponse, IQueryResponse, IApiResponse Constructors QueryResponse(IEnumerable<object>?, IPageContext?) Declaration public QueryResponse(IEnumerable<object>? data = null, IPageContext? pc = null) Parameters IEnumerable<object> data IPageContext pc Properties Data Declaration public IEnumerable<object>? Data { get; set; } Property Value IEnumerable<object> Implements IQueryResponse.Data Page Declaration public IPageContext? Page { get; set; } Property Value IPageContext Implements IQueryResponse.Page Extension Methods Extensions.AddData(IQueryResponse, IEnumerable<object>) Extensions.AddPageContext(IQueryResponse, IPageContext) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.UnaryFilter.html": {
    "href": "api/SparkPlug.Contracts.UnaryFilter.html",
    "title": "Class UnaryFilter",
    "keywords": "Class UnaryFilter Inheritance object Filter ConditionFilter UnaryFilter Inherited Members ConditionFilter.Field Filter.Kind object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public class UnaryFilter : ConditionFilter, IUnaryFilter, IConditionFilter, IFilter Constructors UnaryFilter(string, UnaryOperator) Declaration public UnaryFilter(string field, UnaryOperator op) Parameters string field UnaryOperator op Properties Op Declaration public UnaryOperator Op { get; set; } Property Value UnaryOperator Implements IUnaryFilter.Op Extension Methods FilterExtentions.GetFilterExpression<TEntity>(IFilter) Extention.GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Extention.GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>) EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Contracts.UnaryOperator.html": {
    "href": "api/SparkPlug.Contracts.UnaryOperator.html",
    "title": "Enum UnaryOperator",
    "keywords": "Enum UnaryOperator Namespace: SparkPlug.Contracts Assembly: SparkPlug.Contracts.dll Syntax public enum UnaryOperator IsNotNull IsNull"
  },
  "api/SparkPlug.Contracts.html": {
    "href": "api/SparkPlug.Contracts.html",
    "title": "Namespace SparkPlug.Contracts",
    "keywords": "Namespace SparkPlug.Contracts Classes ApiRequest ApiResponse CommandRequest<TEntity> CommandResponse CompositeFilter CompositeRequest CompositeResponse ConditionFilter ErrorResponse ExceptionExtension Extensions FieldFilter Filter FilterConverter IQueryRequestExtensions Include NewtonsoftSerializer Order PageContext QueryRequest QueryResponse UnaryFilter Interfaces IApiRequest IApiResponse ICommandRequest<TEntity> ICommandResponse ICompositeFilter ICompositeRequest ICompositeResponse IConditionFilter IErrorResponse IFieldFilter IFilter IInclude IModule IOrder IPageContext IQueryRequest IQueryResponse ISerializer IUnaryFilter Enums CompositeOperator Direction FieldOperator FilterType FilterValueType UnaryOperator"
  },
  "api/SparkPlug.Persistence.Abstractions.AssemblyCache.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.AssemblyCache.html",
    "title": "Class AssemblyCache",
    "keywords": "Class AssemblyCache Inheritance object AssemblyCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public static class AssemblyCache Properties Assemblies Declaration public static Assembly[] Assemblies { get; } Property Value Assembly[] EntityTypeConfiguration Declaration public static Type[] EntityTypeConfiguration { get; } Property Value Type[] Types Declaration public static IEnumerable<Type> Types { get; } Property Value IEnumerable<Type>"
  },
  "api/SparkPlug.Persistence.Abstractions.BaseService-2.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.BaseService-2.html",
    "title": "Class BaseService<TId, TEntity>",
    "keywords": "Class BaseService<TId, TEntity> Inheritance object BaseService<TId, TEntity> Menuervice TenantService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public class BaseService<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors BaseService(IServiceProvider) Declaration public BaseService(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Methods CountAsync(IQueryRequest, CancellationToken) Declaration public Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<long> CreateAsync(ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) Declaration public Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken) Parameters ICommandRequest<TEntity[]> request CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> DeleteAsync(TId, CancellationToken) Declaration public Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> FindAsync(IQueryRequest, CancellationToken) Declaration public Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<TEntity>> GetAsync(TId, CancellationToken) Declaration public Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> GetManyAsync(TId[], CancellationToken) Declaration public Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken) Parameters TId[] ids CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> GetRepository() Declaration public IRepository<TId, TEntity> GetRepository() Returns IRepository<TId, TEntity> GetService<TService>() Declaration public TService GetService<TService>() where TService : class Returns TService Type Parameters TService PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) Declaration public Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<JsonPatchDocument<TEntity>> request CancellationToken cancellationToken Returns Task<TEntity> QueryAsync(IQueryRequest, CancellationToken) Declaration public Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<JObject>> ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.CreateEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.CreateEntityException.html",
    "title": "Class CreateEntityException",
    "keywords": "Class CreateEntityException Inheritance object Exception PersistenceException CreateEntityException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [Serializable] public class CreateEntityException : PersistenceException, ISerializable Constructors CreateEntityException() Declaration public CreateEntityException() CreateEntityException(string?) Declaration public CreateEntityException(string? message) Parameters string message CreateEntityException(string?, Exception?) Declaration public CreateEntityException(string? message, Exception? innerException) Parameters string message Exception innerException Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?)"
  },
  "api/SparkPlug.Persistence.Abstractions.DbConfig.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.DbConfig.html",
    "title": "Class DbConfig",
    "keywords": "Class DbConfig Inheritance object DbConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public class DbConfig Properties ConnectionString Declaration public string ConnectionString { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.DeleteEntityException.html",
    "title": "Class DeleteEntityException",
    "keywords": "Class DeleteEntityException Inheritance object Exception PersistenceException DeleteEntityException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [Serializable] public class DeleteEntityException : PersistenceException, ISerializable Constructors DeleteEntityException() Declaration public DeleteEntityException() DeleteEntityException(string?) Declaration public DeleteEntityException(string? message) Parameters string message DeleteEntityException(string?, Exception?) Declaration public DeleteEntityException(string? message, Exception? innerException) Parameters string message Exception innerException Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?)"
  },
  "api/SparkPlug.Persistence.Abstractions.EntityExtentions.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.EntityExtentions.html",
    "title": "Class EntityExtentions",
    "keywords": "Class EntityExtentions Inheritance object EntityExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public static class EntityExtentions Methods Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) Declaration public static TEntity Auditable<TId, TEntity>(this TEntity entity, TId userId, DateTime currentTime, bool isCreate = false) where TEntity : class, IBaseEntity<TId> Parameters TEntity entity TId userId DateTime currentTime bool isCreate Returns TEntity Type Parameters TId TEntity"
  },
  "api/SparkPlug.Persistence.Abstractions.HomeDbAttribute.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.HomeDbAttribute.html",
    "title": "Class HomeDbAttribute",
    "keywords": "Class HomeDbAttribute Inheritance object Attribute HomeDbAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class HomeDbAttribute : Attribute Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IAuditableEntity-1.html",
    "title": "Interface IAuditableEntity<TId>",
    "keywords": "Interface IAuditableEntity<TId> Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IAuditableEntity<TId> Type Parameters TId Properties CreatedAt Declaration DateTime CreatedAt { get; set; } Property Value DateTime CreatedBy Declaration TId CreatedBy { get; set; } Property Value TId ModifiedAt Declaration DateTime ModifiedAt { get; set; } Property Value DateTime ModifiedBy Declaration TId ModifiedBy { get; set; } Property Value TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IBaseEntity-1.html",
    "title": "Interface IBaseEntity<TId>",
    "keywords": "Interface IBaseEntity<TId> Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IBaseEntity<TId> Type Parameters TId Properties Id Declaration TId Id { get; set; } Property Value TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.ICompositeEntity.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.ICompositeEntity.html",
    "title": "Interface ICompositeEntity",
    "keywords": "Interface ICompositeEntity Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface ICompositeEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IConcurrencyEntity.html",
    "title": "Interface IConcurrencyEntity",
    "keywords": "Interface IConcurrencyEntity Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IConcurrencyEntity Properties Revision Declaration int Revision { get; set; } Property Value int Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IDbContextOptionsProvider.html",
    "title": "Interface IDbContextOptionsProvider",
    "keywords": "Interface IDbContextOptionsProvider Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IDbContextOptionsProvider Methods GetDbContextOption(string) Declaration DbContextOptions GetDbContextOption(string connectionString) Parameters string connectionString Returns DbContextOptions Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IDeletableEntity.html",
    "title": "Interface IDeletableEntity",
    "keywords": "Interface IDeletableEntity Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IDeletableEntity Properties Status Declaration Status Status { get; set; } Property Value Status Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IMultiTenantEntity-1.html",
    "title": "Interface IMultiTenantEntity<TId>",
    "keywords": "Interface IMultiTenantEntity<TId> Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IMultiTenantEntity<TId> Type Parameters TId Properties TenantId Declaration TId TenantId { get; set; } Property Value TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IRepository-2.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IRepository-2.html",
    "title": "Interface IRepository<TId, TEntity>",
    "keywords": "Interface IRepository<TId, TEntity> Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId> Type Parameters TId TEntity Methods CountAsync(IQueryRequest, CancellationToken) Declaration Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<long> CreateAsync(ICommandRequest<TEntity>, CancellationToken) Declaration Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) Declaration Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken) Parameters ICommandRequest<TEntity[]> request CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> DeleteAsync(TId, CancellationToken) Declaration Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> FindAsync(IQueryRequest, CancellationToken) Declaration Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<TEntity>> GetAsync(TId, CancellationToken) Declaration Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> GetManyAsync(TId[], CancellationToken) Declaration Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken) Parameters TId[] ids CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) Declaration Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<JsonPatchDocument<TEntity>> request CancellationToken cancellationToken Returns Task<TEntity> QueryAsync(IQueryRequest, CancellationToken) Declaration Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<JObject>> ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IRepositoryProvider.html",
    "title": "Interface IRepositoryProvider",
    "keywords": "Interface IRepositoryProvider Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IRepositoryProvider Methods GetRepository<TId, TEntity>() Declaration IRepository<TId, TEntity> GetRepository<TId, TEntity>() where TEntity : class, IBaseEntity<TId>, new() Returns IRepository<TId, TEntity> Type Parameters TId TEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.IRequestContext-1.html",
    "title": "Interface IRequestContext<TId>",
    "keywords": "Interface IRequestContext<TId> Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface IRequestContext<out TId> Type Parameters TId Properties UserId Declaration TId UserId { get; } Property Value TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.ITenantOptions-1.html",
    "title": "Interface ITenantOptions<TOptions>",
    "keywords": "Interface ITenantOptions<TOptions> Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public interface ITenantOptions<out TOptions> where TOptions : new() Type Parameters TOptions Properties Value Declaration TOptions Value { get; } Property Value TOptions Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.PagedResult-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.PagedResult-1.html",
    "title": "Class PagedResult<TResult>",
    "keywords": "Class PagedResult<TResult> Inheritance object PagedResult<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public record PagedResult<TResult> : IEquatable<PagedResult<TResult>> Type Parameters TResult Constructors PagedResult(IEnumerable<TResult>, long) Declaration public PagedResult(IEnumerable<TResult> items, long count) Parameters IEnumerable<TResult> items long count Properties Count Declaration public long Count { get; set; } Property Value long Items Declaration public IEnumerable<TResult> Items { get; set; } Property Value IEnumerable<TResult> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.PersistenceException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.PersistenceException.html",
    "title": "Class PersistenceException",
    "keywords": "Class PersistenceException Inheritance object Exception PersistenceException CreateEntityException DeleteEntityException QueryEntityException UpdateEntityException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [Serializable] public class PersistenceException : Exception, ISerializable Constructors PersistenceException() Declaration public PersistenceException() PersistenceException(string?) Declaration public PersistenceException(string? message) Parameters string message PersistenceException(string?, Exception?) Declaration public PersistenceException(string? message, Exception? innerException) Parameters string message Exception innerException Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?)"
  },
  "api/SparkPlug.Persistence.Abstractions.QueryEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.QueryEntityException.html",
    "title": "Class QueryEntityException",
    "keywords": "Class QueryEntityException Inheritance object Exception PersistenceException QueryEntityException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [Serializable] public class QueryEntityException : PersistenceException, ISerializable Constructors QueryEntityException() Declaration public QueryEntityException() QueryEntityException(string?) Declaration public QueryEntityException(string? message) Parameters string message QueryEntityException(string?, Exception?) Declaration public QueryEntityException(string? message, Exception? innerException) Parameters string message Exception innerException Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?)"
  },
  "api/SparkPlug.Persistence.Abstractions.RequestContext-1.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.RequestContext-1.html",
    "title": "Class RequestContext<TId>",
    "keywords": "Class RequestContext<TId> Inheritance object RequestContext<TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public class RequestContext<TId> : IRequestContext<TId> where TId : new() Type Parameters TId Properties UserId Declaration public TId UserId { get; set; } Property Value TId Implements IRequestContext<TId>.UserId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.Status.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.Status.html",
    "title": "Enum Status",
    "keywords": "Enum Status Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax public enum Status Deleted Live"
  },
  "api/SparkPlug.Persistence.Abstractions.TenantDbAttribute.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.TenantDbAttribute.html",
    "title": "Class TenantDbAttribute",
    "keywords": "Class TenantDbAttribute Inheritance object Attribute TenantDbAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)] public class TenantDbAttribute : Attribute Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.UpdateEntityException.html",
    "title": "Class UpdateEntityException",
    "keywords": "Class UpdateEntityException Inheritance object Exception PersistenceException UpdateEntityException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: SparkPlug.Persistence.Abstractions Assembly: SparkPlug.Persistence.Abstractions.dll Syntax [Serializable] public class UpdateEntityException : PersistenceException, ISerializable Constructors UpdateEntityException() Declaration public UpdateEntityException() UpdateEntityException(string?) Declaration public UpdateEntityException(string? message) Parameters string message UpdateEntityException(string?, Exception?) Declaration public UpdateEntityException(string? message, Exception? innerException) Parameters string message Exception innerException Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool) ExceptionExtension.GetInnerStackTrace(Exception?)"
  },
  "api/SparkPlug.Persistence.Abstractions.html": {
    "href": "api/SparkPlug.Persistence.Abstractions.html",
    "title": "Namespace SparkPlug.Persistence.Abstractions",
    "keywords": "Namespace SparkPlug.Persistence.Abstractions Classes AssemblyCache BaseService<TId, TEntity> CreateEntityException DbConfig DeleteEntityException EntityExtentions HomeDbAttribute PagedResult<TResult> PersistenceException QueryEntityException RequestContext<TId> TenantDbAttribute UpdateEntityException Interfaces IAuditableEntity<TId> IBaseEntity<TId> ICompositeEntity IConcurrencyEntity IDbContextOptionsProvider IDeletableEntity IMultiTenantEntity<TId> IRepositoryProvider IRepository<TId, TEntity> IRequestContext<TId> ITenantOptions<TOptions> Enums Status"
  },
  "api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Configuration.SqlDbOptions.html",
    "title": "Class SqlDbOptions",
    "keywords": "Class SqlDbOptions Inheritance object SqlDbOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Configuration Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class SqlDbOptions Constructors SqlDbOptions() Declaration public SqlDbOptions() Fields ConfigPath Declaration public const string ConfigPath = \"SparkPlug:SqlDb\" Field Value string Properties ConnectionString Declaration [Required] public string ConnectionString { get; set; } Property Value string GetConnection Declaration public Func<string, DbConnection>? GetConnection { get; set; } Property Value Func<string, DbConnection> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Configuration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Configuration.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.Configuration",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.Configuration Classes SqlDbOptions"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContext.html",
    "title": "Class HomeDbContext",
    "keywords": "Class HomeDbContext Inheritance object DbContext SqlDbContext HomeDbContext Inherited Members SqlDbContext.OnModelCreating(ModelBuilder) SqlDbContext.SaveChangesAsync<TId>(TId, CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class HomeDbContext : SqlDbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Constructors HomeDbContext(IHomeDbModelConfiguration, HomeDbContextOptions) Declaration public HomeDbContext(IHomeDbModelConfiguration modelConfigProvider, HomeDbContextOptions sqlOptions) Parameters IHomeDbModelConfiguration modelConfigProvider HomeDbContextOptions sqlOptions Properties ModelConfigProvider Declaration protected override ISqlDbModelConfiguration ModelConfigProvider { get; } Property Value ISqlDbModelConfiguration Overrides SqlDbContext.ModelConfigProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.HomeDbContextOptions.html",
    "title": "Class HomeDbContextOptions",
    "keywords": "Class HomeDbContextOptions Inheritance object SqlDbContextOptions HomeDbContextOptions Inherited Members SqlDbContextOptions.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class HomeDbContextOptions : SqlDbContextOptions Constructors HomeDbContextOptions(IDbContextOptionsProvider, IOptions<DbConfig>) Declaration public HomeDbContextOptions(IDbContextOptionsProvider dbContextOptionsProvider, IOptions<DbConfig> dbConfig) Parameters IDbContextOptionsProvider dbContextOptionsProvider IOptions<DbConfig> dbConfig Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.IHomeDbModelConfiguration.html",
    "title": "Interface IHomeDbModelConfiguration",
    "keywords": "Interface IHomeDbModelConfiguration Inherited Members ISqlDbModelConfiguration.Configure(ModelBuilder) Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public interface IHomeDbModelConfiguration : ISqlDbModelConfiguration Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.ISqlDbModelConfiguration.html",
    "title": "Interface ISqlDbModelConfiguration",
    "keywords": "Interface ISqlDbModelConfiguration Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public interface ISqlDbModelConfiguration Methods Configure(ModelBuilder) Declaration void Configure(ModelBuilder modelBuilder) Parameters ModelBuilder modelBuilder Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.ITenantDbModelConfiguration.html",
    "title": "Interface ITenantDbModelConfiguration",
    "keywords": "Interface ITenantDbModelConfiguration Inherited Members ISqlDbModelConfiguration.Configure(ModelBuilder) Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public interface ITenantDbModelConfiguration : ISqlDbModelConfiguration Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContext.html",
    "title": "Class SqlDbContext",
    "keywords": "Class SqlDbContext Inheritance object DbContext SqlDbContext HomeDbContext TenantDbContext Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public abstract class SqlDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Constructors SqlDbContext(DbContextOptions) Declaration protected SqlDbContext(DbContextOptions sqlOptions) Parameters DbContextOptions sqlOptions Properties ModelConfigProvider Declaration protected abstract ISqlDbModelConfiguration ModelConfigProvider { get; } Property Value ISqlDbModelConfiguration Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters ModelBuilder modelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Overrides DbContext.OnModelCreating(ModelBuilder) Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples. SaveChangesAsync<TId>(TId, CancellationToken) Declaration public Task<int> SaveChangesAsync<TId>(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<int> Type Parameters TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.SqlDbContextOptions.html",
    "title": "Class SqlDbContextOptions",
    "keywords": "Class SqlDbContextOptions Inheritance object SqlDbContextOptions HomeDbContextOptions TenantDbContextOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public abstract class SqlDbContextOptions Constructors SqlDbContextOptions(IDbContextOptionsProvider, string) Declaration protected SqlDbContextOptions(IDbContextOptionsProvider dbContextOptionsProvider, string connectionString) Parameters IDbContextOptionsProvider dbContextOptionsProvider string connectionString Properties Value Declaration public DbContextOptions Value { get; } Property Value DbContextOptions Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContext.html",
    "title": "Class TenantDbContext",
    "keywords": "Class TenantDbContext Inheritance object DbContext SqlDbContext TenantDbContext Inherited Members SqlDbContext.OnModelCreating(ModelBuilder) SqlDbContext.SaveChangesAsync<TId>(TId, CancellationToken) DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class TenantDbContext : SqlDbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Constructors TenantDbContext(ITenantDbModelConfiguration, TenantDbContextOptions) Declaration public TenantDbContext(ITenantDbModelConfiguration modelConfigProvider, TenantDbContextOptions sqlOptions) Parameters ITenantDbModelConfiguration modelConfigProvider TenantDbContextOptions sqlOptions Properties ModelConfigProvider Declaration protected override ISqlDbModelConfiguration ModelConfigProvider { get; } Property Value ISqlDbModelConfiguration Overrides SqlDbContext.ModelConfigProvider Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.TenantDbContextOptions.html",
    "title": "Class TenantDbContextOptions",
    "keywords": "Class TenantDbContextOptions Inheritance object SqlDbContextOptions TenantDbContextOptions Inherited Members SqlDbContextOptions.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Context Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class TenantDbContextOptions : SqlDbContextOptions Constructors TenantDbContextOptions(IDbContextOptionsProvider, ITenantOptions<DbConfig>) Declaration public TenantDbContextOptions(IDbContextOptionsProvider dbContextOptionsProvider, ITenantOptions<DbConfig> dbConfig) Parameters IDbContextOptionsProvider dbContextOptionsProvider ITenantOptions<DbConfig> dbConfig Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Context.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Context.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.Context",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.Context Classes HomeDbContext HomeDbContextOptions SqlDbContext SqlDbContextOptions TenantDbContext TenantDbContextOptions Interfaces IHomeDbModelConfiguration ISqlDbModelConfiguration ITenantDbModelConfiguration"
  },
  "api/SparkPlug.Persistence.EntityFramework.Expressions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Expressions.html",
    "title": "Class Expressions",
    "keywords": "Class Expressions Inheritance object Expressions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public static class Expressions Methods Parse(object?, Type) Declaration public static Expression Parse(object? value, Type type) Parameters object value Type type Returns Expression ToDateOnly(object) Declaration public static Expression ToDateOnly(object value) Parameters object value Returns Expression ToUniversalTime(object) Declaration public static Expression ToUniversalTime(object value) Parameters object value Returns Expression"
  },
  "api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.FilterExtentions.html",
    "title": "Class FilterExtentions",
    "keywords": "Class FilterExtentions Inheritance object FilterExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public static class FilterExtentions Methods GetFilterExpression<TEntity>(IFilter) Declaration public static Expression<Func<TEntity, bool>>? GetFilterExpression<TEntity>(this IFilter filter) Parameters IFilter filter Returns Expression<Func<TEntity, bool>> Type Parameters TEntity"
  },
  "api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HealthCheck.SqlDbHealthCheck.html",
    "title": "Class SqlDbHealthCheck",
    "keywords": "Class SqlDbHealthCheck Inheritance object SqlDbHealthCheck Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.HealthCheck Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class SqlDbHealthCheck : IHealthCheck Constructors SqlDbHealthCheck(IOptions<SqlDbOptions>) Declaration public SqlDbHealthCheck(IOptions<SqlDbOptions> options) Parameters IOptions<SqlDbOptions> options Methods CheckHealthAsync(HealthCheckContext, CancellationToken) Runs the health check, returning the status of the component being checked. Declaration public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default) Parameters HealthCheckContext context A context object associated with the current execution. CancellationToken cancellationToken A CancellationToken that can be used to cancel the health check. Returns Task<HealthCheckResult> A Task<TResult> that completes when the health check has finished, yielding the status of the component being checked. Implements IHealthCheck.CheckHealthAsync(HealthCheckContext, CancellationToken) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.HealthCheck.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HealthCheck.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.HealthCheck",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.HealthCheck Classes SqlDbHealthCheck"
  },
  "api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HomeModelConfigurations.html",
    "title": "Class HomeModelConfigurations",
    "keywords": "Class HomeModelConfigurations Inheritance object HomeModelConfigurations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class HomeModelConfigurations : IHomeDbModelConfiguration, ISqlDbModelConfiguration Methods Configure(ModelBuilder) Declaration public void Configure(ModelBuilder modelBuilder) Parameters ModelBuilder modelBuilder Implements ISqlDbModelConfiguration.Configure(ModelBuilder) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HomeOptions-1.html",
    "title": "Class HomeOptions<TOptions>",
    "keywords": "Class HomeOptions<TOptions> Inheritance object HomeOptions<TOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class HomeOptions<TOptions> : IOptions<TOptions> where TOptions : class, new() Type Parameters TOptions Constructors HomeOptions(IOptions<SqlDbOptions>) Declaration public HomeOptions(IOptions<SqlDbOptions> options) Parameters IOptions<SqlDbOptions> options Properties Value The default configured TOptions instance Declaration public TOptions Value { get; } Property Value TOptions Implements IOptions<TOptions>.Value Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.HomeRepository-2.html",
    "title": "Class HomeRepository<TId, TEntity>",
    "keywords": "Class HomeRepository<TId, TEntity> Inheritance object SqlRepository<TId, TEntity> HomeRepository<TId, TEntity> Inherited Members SqlRepository<TId, TEntity>.DbContext SqlRepository<TId, TEntity>.DbSet SqlRepository<TId, TEntity>.GetDbSet() SqlRepository<TId, TEntity>.GetDbSet<Entity>() SqlRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.GetAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken) SqlRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) SqlRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) SqlRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class HomeRepository<TId, TEntity> : SqlRepository<TId, TEntity>, IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors HomeRepository(IServiceProvider, HomeDbContext) Declaration public HomeRepository(IServiceProvider serviceProvider, HomeDbContext dbContext) Parameters IServiceProvider serviceProvider HomeDbContext dbContext Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Models.BaseEntity-1.html",
    "title": "Class BaseEntity<TId>",
    "keywords": "Class BaseEntity<TId> Inheritance object BaseEntity<TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework.Models Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public abstract class BaseEntity<TId> : IBaseEntity<TId> where TId : new() Type Parameters TId Properties Id Declaration public virtual TId Id { get; set; } Property Value TId Implements IBaseEntity<TId>.Id Methods GetId() Declaration public virtual TId GetId() Returns TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Models.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Models.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework.Models",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework.Models Classes BaseEntity<TId>"
  },
  "api/SparkPlug.Persistence.EntityFramework.Names.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Names.html",
    "title": "Class Names",
    "keywords": "Class Names Inheritance object Names Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public static class Names Fields DateOnly Declaration public const string DateOnly = \"System.DateOnly\" Field Value string DateTime Declaration public const string DateTime = \"System.DateTime\" Field Value string EnumerableContains Declaration public static readonly string EnumerableContains Field Value string Int32 Declaration public const string Int32 = \"System.Int32\" Field Value string Int64 Declaration public const string Int64 = \"System.Int64\" Field Value string"
  },
  "api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.QueryBuilder-1.html",
    "title": "Class QueryBuilder<TEntity>",
    "keywords": "Class QueryBuilder<TEntity> Inheritance object QueryBuilder<TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class QueryBuilder<TEntity> where TEntity : class Type Parameters TEntity Constructors QueryBuilder(DbSet<TEntity>, IQueryRequest?) Declaration public QueryBuilder(DbSet<TEntity> dbSet, IQueryRequest? request) Parameters DbSet<TEntity> dbSet IQueryRequest request Properties Query Declaration protected IQueryable<TEntity> Query { get; } Property Value IQueryable<TEntity> Request Declaration protected IQueryRequest? Request { get; } Property Value IQueryRequest Methods CountAsync(CancellationToken) Declaration public Task<long> CountAsync(CancellationToken cancellationToken = default) Parameters CancellationToken cancellationToken Returns Task<long> Project() Declaration public IQueryable<JObject> Project() Returns IQueryable<JObject> Select() Declaration public IQueryable<TEntity> Select() Returns IQueryable<TEntity> Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.QueryExtentions.html",
    "title": "Class QueryExtentions",
    "keywords": "Class QueryExtentions Inheritance object QueryExtentions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public static class QueryExtentions Methods ApplyInclude<TEntity>(IQueryable<TEntity>, Include, string?) Declaration public static IQueryable<TEntity> ApplyInclude<TEntity>(this IQueryable<TEntity> query, Include include, string? parent = null) where TEntity : class Parameters IQueryable<TEntity> query Include include string parent Returns IQueryable<TEntity> Type Parameters TEntity ApplyIncludes<TEntity>(IQueryable<TEntity>, Include[]?, string?) Declaration public static IQueryable<TEntity> ApplyIncludes<TEntity>(this IQueryable<TEntity> query, Include[]? includes, string? parent = null) where TEntity : class Parameters IQueryable<TEntity> query Include[] includes string parent Returns IQueryable<TEntity> Type Parameters TEntity ApplyPageContext<TEntity>(IQueryable<TEntity>, PageContext?) Declaration public static IQueryable<TEntity> ApplyPageContext<TEntity>(this IQueryable<TEntity> query, PageContext? pageContext) Parameters IQueryable<TEntity> query PageContext pageContext Returns IQueryable<TEntity> Type Parameters TEntity ApplyProjection<TEntity>(IQueryable<TEntity>, string[]?, Include[]?) Declaration public static IQueryable<JObject> ApplyProjection<TEntity>(this IQueryable<TEntity> query, string[]? select, Include[]? includes) Parameters IQueryable<TEntity> query string[] select Include[] includes Returns IQueryable<JObject> Type Parameters TEntity ApplySelector<TEntity>(IQueryable<TEntity>, string[]?, Include[]?) Declaration public static IQueryable<TEntity> ApplySelector<TEntity>(this IQueryable<TEntity> query, string[]? select, Include[]? includes) Parameters IQueryable<TEntity> query string[] select Include[] includes Returns IQueryable<TEntity> Type Parameters TEntity ApplySort<TEntity>(IQueryable<TEntity>, Order[]?) Declaration public static IQueryable<TEntity> ApplySort<TEntity>(this IQueryable<TEntity> query, Order[]? sort) Parameters IQueryable<TEntity> query Order[] sort Returns IQueryable<TEntity> Type Parameters TEntity ApplyWhere<TEntity>(IQueryable<TEntity>, Filter?) Declaration public static IQueryable<TEntity> ApplyWhere<TEntity>(this IQueryable<TEntity> query, Filter? filter) Parameters IQueryable<TEntity> query Filter filter Returns IQueryable<TEntity> Type Parameters TEntity GetCollectionValueExpression(Type, MemberExpression, string[]?, Include[]?) Declaration public static Expression GetCollectionValueExpression(Type elementType, MemberExpression propAccessExpression, string[]? select, Include[]? includes) Parameters Type elementType MemberExpression propAccessExpression string[] select Include[] includes Returns Expression GetEnumValueExpression(MemberExpression) Declaration public static Expression GetEnumValueExpression(MemberExpression propAccessExpression) Parameters MemberExpression propAccessExpression Returns Expression GetJObjectValueExpression(Type, Expression, string[]?, Include[]?) Declaration public static Expression GetJObjectValueExpression(Type elementType, Expression sourceParameter, string[]? select, Include[]? includes) Parameters Type elementType Expression sourceParameter string[] select Include[] includes Returns Expression GetObjectMethodCallException(Type, MemberExpression, string[]?, Include[]?) Declaration public static MethodCallExpression GetObjectMethodCallException(Type elementType, MemberExpression propAccessExpression, string[]? select, Include[]? includes) Parameters Type elementType MemberExpression propAccessExpression string[] select Include[] includes Returns MethodCallExpression GetPrimitiveMethodCallExpression(Type, MemberExpression) Declaration public static MethodCallExpression GetPrimitiveMethodCallExpression(Type elementType, MemberExpression propAccessExpression) Parameters Type elementType MemberExpression propAccessExpression Returns MethodCallExpression GetProperties(Type) Declaration public static IEnumerable<string> GetProperties(Type type) Parameters Type type Returns IEnumerable<string> GetValueExpression(MemberExpression) Declaration public static Expression GetValueExpression(MemberExpression propAccessExpression) Parameters MemberExpression propAccessExpression Returns Expression ToCamelCase(string) Declaration public static string ToCamelCase(this string str) Parameters string str Returns string"
  },
  "api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.SqlRepository-2.html",
    "title": "Class SqlRepository<TId, TEntity>",
    "keywords": "Class SqlRepository<TId, TEntity> Inheritance object SqlRepository<TId, TEntity> HomeRepository<TId, TEntity> TenantRepository<TId, TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public abstract class SqlRepository<TId, TEntity> : IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors SqlRepository(IServiceProvider, SqlDbContext) Declaration protected SqlRepository(IServiceProvider serviceProvider, SqlDbContext dbContext) Parameters IServiceProvider serviceProvider SqlDbContext dbContext Properties DbContext Declaration public SqlDbContext DbContext { get; } Property Value SqlDbContext DbSet Declaration public virtual DbSet<TEntity> DbSet { get; } Property Value DbSet<TEntity> Methods CountAsync(IQueryRequest, CancellationToken) Declaration public Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<long> Implements IRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken) CreateAsync(ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken) CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) Declaration public Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken = default) Parameters ICommandRequest<TEntity[]> request CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> Implements IRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) DeleteAsync(TId, CancellationToken) Declaration public Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken) FindAsync(IQueryRequest, CancellationToken) Declaration public Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<TEntity>> Implements IRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken) GetAsync(TId, CancellationToken) Declaration public Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken = default) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.GetAsync(TId, CancellationToken) GetDbSet() Declaration public DbSet<TEntity> GetDbSet() Returns DbSet<TEntity> GetDbSet<Entity>() Declaration public DbSet<Entity> GetDbSet<Entity>() where Entity : class, IBaseEntity<TId>, new() Returns DbSet<Entity> Type Parameters Entity GetManyAsync(TId[], CancellationToken) Declaration public Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken = default) Parameters TId[] ids CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> Implements IRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken) PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) Declaration public Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken = default) Parameters TId id ICommandRequest<JsonPatchDocument<TEntity>> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) QueryAsync(IQueryRequest, CancellationToken) Declaration public Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken = default) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<JObject>> Implements IRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken) ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken = default) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.SqlRepositoryProvider.html",
    "title": "Class SqlRepositoryProvider",
    "keywords": "Class SqlRepositoryProvider Inheritance object SqlRepositoryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class SqlRepositoryProvider : IRepositoryProvider Constructors SqlRepositoryProvider(IServiceProvider) Declaration public SqlRepositoryProvider(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Methods GetRepository<TId, TEntity>() Declaration public IRepository<TId, TEntity> GetRepository<TId, TEntity>() where TEntity : class, IBaseEntity<TId>, new() Returns IRepository<TId, TEntity> Type Parameters TId TEntity Implements IRepositoryProvider.GetRepository<TId, TEntity>() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.TenantModelConfigurations.html",
    "title": "Class TenantModelConfigurations",
    "keywords": "Class TenantModelConfigurations Inheritance object TenantModelConfigurations Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class TenantModelConfigurations : ITenantDbModelConfiguration, ISqlDbModelConfiguration Methods Configure(ModelBuilder) Declaration public void Configure(ModelBuilder modelBuilder) Parameters ModelBuilder modelBuilder Implements ISqlDbModelConfiguration.Configure(ModelBuilder) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.TenantRepository-2.html",
    "title": "Class TenantRepository<TId, TEntity>",
    "keywords": "Class TenantRepository<TId, TEntity> Inheritance object SqlRepository<TId, TEntity> TenantRepository<TId, TEntity> Inherited Members SqlRepository<TId, TEntity>.DbContext SqlRepository<TId, TEntity>.DbSet SqlRepository<TId, TEntity>.GetDbSet() SqlRepository<TId, TEntity>.GetDbSet<Entity>() SqlRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken) SqlRepository<TId, TEntity>.GetAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken) SqlRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) SqlRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) SqlRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken) SqlRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) SqlRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public class TenantRepository<TId, TEntity> : SqlRepository<TId, TEntity>, IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors TenantRepository(IServiceProvider, TenantDbContext) Declaration public TenantRepository(IServiceProvider serviceProvider, TenantDbContext dbContext) Parameters IServiceProvider serviceProvider TenantDbContext dbContext Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.EntityFramework.Types.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.Types.html",
    "title": "Class Types",
    "keywords": "Class Types Inheritance object Types Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.EntityFramework Assembly: SparkPlug.Persistence.EntityFramework.dll Syntax public static class Types Fields DateTimeType Declaration public static readonly Type DateTimeType Field Value Type EnumerableType Declaration public static readonly Type EnumerableType Field Value Type IntType Declaration public static readonly Type IntType Field Value Type JArrayType Declaration public static readonly Type JArrayType Field Value Type JObjectType Declaration public static readonly Type JObjectType Field Value Type JTokenType Declaration public static readonly Type JTokenType Field Value Type JsonIgnoreAttributeType Declaration public static readonly Type JsonIgnoreAttributeType Field Value Type LongType Declaration public static readonly Type LongType Field Value Type ObjectType Declaration public static readonly Type ObjectType Field Value Type StringType Declaration public static readonly Type StringType Field Value Type"
  },
  "api/SparkPlug.Persistence.EntityFramework.html": {
    "href": "api/SparkPlug.Persistence.EntityFramework.html",
    "title": "Namespace SparkPlug.Persistence.EntityFramework",
    "keywords": "Namespace SparkPlug.Persistence.EntityFramework Classes Expressions FilterExtentions HomeModelConfigurations HomeOptions<TOptions> HomeRepository<TId, TEntity> Names QueryBuilder<TEntity> QueryExtentions SqlRepositoryProvider SqlRepository<TId, TEntity> TenantModelConfigurations TenantRepository<TId, TEntity> Types"
  },
  "api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Attributes.CollectionAttribute.html",
    "title": "Class CollectionAttribute",
    "keywords": "Class CollectionAttribute Inheritance object Attribute CollectionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb.Attributes Assembly: SparkPlug.Persistence.MongoDb.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = false)] public class CollectionAttribute : Attribute Constructors CollectionAttribute(string) Declaration public CollectionAttribute(string name) Parameters string name Properties Name Declaration public string Name { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.Attributes.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Attributes.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Attributes",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Attributes Classes CollectionAttribute"
  },
  "api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Configuration.MongoDbOptions.html",
    "title": "Class MongoDbOptions",
    "keywords": "Class MongoDbOptions Inheritance object MongoDbOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb.Configuration Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public class MongoDbOptions Constructors MongoDbOptions() Declaration public MongoDbOptions() Fields ConfigPath Declaration public const string ConfigPath = \"SparkPlug:MongoDb\" Field Value string Properties ConnectionString Declaration [Required] public string ConnectionString { get; set; } Property Value string Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.Configuration.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Configuration.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Configuration",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Configuration Classes MongoDbOptions"
  },
  "api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Context.MongoDbClient.html",
    "title": "Class MongoDbClient",
    "keywords": "Class MongoDbClient Inheritance object MongoDbClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb.Context Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public class MongoDbClient Constructors MongoDbClient(ITenantOptions<DbConfig>) Declaration public MongoDbClient(ITenantOptions<DbConfig> options) Parameters ITenantOptions<DbConfig> options Properties Database Declaration public IMongoDatabase Database { get; } Property Value IMongoDatabase Methods GetClient(string) Declaration public MongoClient GetClient(string connectionString) Parameters string connectionString Returns MongoClient GetCollection<TEntity>(string) Declaration public IMongoCollection<TEntity> GetCollection<TEntity>(string collectionName) Parameters string collectionName Returns IMongoCollection<TEntity> Type Parameters TEntity Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.Context.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Context.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Context",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Context Classes MongoDbClient"
  },
  "api/SparkPlug.Persistence.MongoDb.Extention.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Extention.html",
    "title": "Class Extention",
    "keywords": "Class Extention Inheritance object Extention Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public static class Extention Methods GetFilterDefinition<TEntity>(ICompositeFilter, FilterDefinitionBuilder<TEntity>) Declaration public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this ICompositeFilter compositeFilter, FilterDefinitionBuilder<TEntity> builder) Parameters ICompositeFilter compositeFilter FilterDefinitionBuilder<TEntity> builder Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinition<TEntity>(IFieldFilter, FilterDefinitionBuilder<TEntity>) Declaration public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this IFieldFilter fieldFilter, FilterDefinitionBuilder<TEntity> builder) Parameters IFieldFilter fieldFilter FilterDefinitionBuilder<TEntity> builder Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinition<TEntity>(IFilter, FilterDefinitionBuilder<TEntity>) Declaration public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this IFilter filter, FilterDefinitionBuilder<TEntity> builder) Parameters IFilter filter FilterDefinitionBuilder<TEntity> builder Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinition<TEntity>(IUnaryFilter, FilterDefinitionBuilder<TEntity>) Declaration public static FilterDefinition<TEntity> GetFilterDefinition<TEntity>(this IUnaryFilter unaryFilter, FilterDefinitionBuilder<TEntity> builder) Parameters IUnaryFilter unaryFilter FilterDefinitionBuilder<TEntity> builder Returns FilterDefinition<TEntity> Type Parameters TEntity GetFilterDefinitions<TEntity>(IFilter[], FilterDefinitionBuilder<TEntity>) Declaration public static FilterDefinition<TEntity>[] GetFilterDefinitions<TEntity>(this IFilter[] filters, FilterDefinitionBuilder<TEntity> builder) Parameters IFilter[] filters FilterDefinitionBuilder<TEntity> builder Returns FilterDefinition<TEntity>[] Type Parameters TEntity"
  },
  "api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.HealthCheck.MongoDbHealthCheck.html",
    "title": "Class MongoDbHealthCheck",
    "keywords": "Class MongoDbHealthCheck Inheritance object MongoDbHealthCheck Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb.HealthCheck Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public class MongoDbHealthCheck : IHealthCheck Constructors MongoDbHealthCheck(IOptions<MongoDbOptions>) Declaration public MongoDbHealthCheck(IOptions<MongoDbOptions> options) Parameters IOptions<MongoDbOptions> options Methods CheckHealthAsync(HealthCheckContext, CancellationToken) Runs the health check, returning the status of the component being checked. Declaration public Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default) Parameters HealthCheckContext context A context object associated with the current execution. CancellationToken cancellationToken A CancellationToken that can be used to cancel the health check. Returns Task<HealthCheckResult> A Task<TResult> that completes when the health check has finished, yielding the status of the component being checked. Implements IHealthCheck.CheckHealthAsync(HealthCheckContext, CancellationToken) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.HealthCheck.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.HealthCheck.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.HealthCheck",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.HealthCheck Classes MongoDbHealthCheck"
  },
  "api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Models.BaseEntity-1.html",
    "title": "Class BaseEntity<TId>",
    "keywords": "Class BaseEntity<TId> Inheritance object BaseEntity<TId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb.Models Assembly: SparkPlug.Persistence.MongoDb.dll Syntax [BsonIgnoreExtraElements] [BsonDiscriminator(RootClass = true)] public abstract class BaseEntity<TId> : IBaseEntity<TId> Type Parameters TId Properties Id Declaration [BsonElement(\"_id\")] [BsonId] [BsonIgnoreIfDefault] [BsonRepresentation(BsonType.ObjectId)] public virtual TId Id { get; set; } Property Value TId Implements IBaseEntity<TId>.Id Methods GetId() Declaration public virtual TId GetId() Returns TId Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.Models.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.Models.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb.Models",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb.Models Classes BaseEntity<TId>"
  },
  "api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.MongoRepository-2.html",
    "title": "Class MongoRepository<TId, TEntity>",
    "keywords": "Class MongoRepository<TId, TEntity> Inheritance object MongoRepository<TId, TEntity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public class MongoRepository<TId, TEntity> : IRepository<TId, TEntity> where TEntity : class, IBaseEntity<TId>, new() Type Parameters TId TEntity Constructors MongoRepository(IServiceProvider) Declaration public MongoRepository(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Properties Collection Declaration public virtual IMongoCollection<TEntity> Collection { get; } Property Value IMongoCollection<TEntity> Methods CountAsync(IQueryRequest, CancellationToken) Declaration public Task<long> CountAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<long> Implements IRepository<TId, TEntity>.CountAsync(IQueryRequest, CancellationToken) CreateAsync(ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> CreateAsync(ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.CreateAsync(ICommandRequest<TEntity>, CancellationToken) CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) Declaration public Task<IEnumerable<TEntity>> CreateManyAsync(ICommandRequest<TEntity[]> request, CancellationToken cancellationToken) Parameters ICommandRequest<TEntity[]> request CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> Implements IRepository<TId, TEntity>.CreateManyAsync(ICommandRequest<TEntity[]>, CancellationToken) DeleteAsync(TId, CancellationToken) Declaration public Task<TEntity> DeleteAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.DeleteAsync(TId, CancellationToken) FindAsync(IQueryRequest, CancellationToken) Declaration public Task<IList<TEntity>> FindAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<TEntity>> Implements IRepository<TId, TEntity>.FindAsync(IQueryRequest, CancellationToken) GetAsync(TId, CancellationToken) Declaration public Task<TEntity> GetAsync(TId id, CancellationToken cancellationToken) Parameters TId id CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.GetAsync(TId, CancellationToken) GetByFilter(FilterDefinition<TEntity>) Declaration public IFindFluent<TEntity, TEntity> GetByFilter(FilterDefinition<TEntity> filter) Parameters FilterDefinition<TEntity> filter Returns IFindFluent<TEntity, TEntity> GetChangeStreamCursor(ChangeStreamFullDocumentOption) Declaration public IChangeStreamCursor<BsonDocument> GetChangeStreamCursor(ChangeStreamFullDocumentOption fullDocOption = ChangeStreamFullDocumentOption.UpdateLookup) Parameters ChangeStreamFullDocumentOption fullDocOption Returns IChangeStreamCursor<BsonDocument> GetChangeStreamOptions(ChangeStreamFullDocumentOption) Declaration public ChangeStreamOptions GetChangeStreamOptions(ChangeStreamFullDocumentOption option) Parameters ChangeStreamFullDocumentOption option Returns ChangeStreamOptions GetFilterBuilder() Declaration public FilterDefinitionBuilder<TEntity> GetFilterBuilder() Returns FilterDefinitionBuilder<TEntity> GetFindFluent(ProjectionDefinition<TEntity>?, FilterDefinition<TEntity>?, SortDefinition<TEntity>?, IPageContext?) Declaration public IFindFluent<TEntity, TEntity> GetFindFluent(ProjectionDefinition<TEntity>? projection, FilterDefinition<TEntity>? filter = null, SortDefinition<TEntity>? sorts = null, IPageContext? pc = null) Parameters ProjectionDefinition<TEntity> projection FilterDefinition<TEntity> filter SortDefinition<TEntity> sorts IPageContext pc Returns IFindFluent<TEntity, TEntity> GetIdFilterDefinition(TId) Declaration public virtual FilterDefinition<TEntity> GetIdFilterDefinition(TId id) Parameters TId id Returns FilterDefinition<TEntity> GetManyAsync(TId[], CancellationToken) Declaration public Task<IEnumerable<TEntity>> GetManyAsync(TId[] ids, CancellationToken cancellationToken) Parameters TId[] ids CancellationToken cancellationToken Returns Task<IEnumerable<TEntity>> Implements IRepository<TId, TEntity>.GetManyAsync(TId[], CancellationToken) GetPipelineDefinition() Declaration public PipelineDefinition<ChangeStreamDocument<BsonDocument>, BsonDocument> GetPipelineDefinition() Returns PipelineDefinition<ChangeStreamDocument<BsonDocument>, BsonDocument> GetProjectionBuilder() Declaration public ProjectionDefinitionBuilder<TEntity> GetProjectionBuilder() Returns ProjectionDefinitionBuilder<TEntity> GetQuery(IQueryRequest) Declaration public IFindFluent<TEntity, TEntity> GetQuery(IQueryRequest request) Parameters IQueryRequest request Returns IFindFluent<TEntity, TEntity> GetSortBuilder() Declaration public SortDefinitionBuilder<TEntity> GetSortBuilder() Returns SortDefinitionBuilder<TEntity> GetUpdateBuilder() Declaration public UpdateDefinitionBuilder<TEntity> GetUpdateBuilder() Returns UpdateDefinitionBuilder<TEntity> GetUpdateDef(TEntity, bool) Declaration public UpdateDefinition<TEntity> GetUpdateDef(TEntity data, bool patch = false) Parameters TEntity data bool patch Returns UpdateDefinition<TEntity> PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) Declaration public Task<TEntity> PatchAsync(TId id, ICommandRequest<JsonPatchDocument<TEntity>> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<JsonPatchDocument<TEntity>> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.PatchAsync(TId, ICommandRequest<JsonPatchDocument<TEntity>>, CancellationToken) QueryAsync(IQueryRequest, CancellationToken) Declaration public Task<IList<JObject>> QueryAsync(IQueryRequest request, CancellationToken cancellationToken) Parameters IQueryRequest request CancellationToken cancellationToken Returns Task<IList<JObject>> Implements IRepository<TId, TEntity>.QueryAsync(IQueryRequest, CancellationToken) ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> ReplaceAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.ReplaceAsync(TId, ICommandRequest<TEntity>, CancellationToken) UpdateAsync(FilterDefinition<TEntity>, UpdateDefinition<TEntity>) Declaration public Task<UpdateResult> UpdateAsync(FilterDefinition<TEntity> filter, UpdateDefinition<TEntity> update) Parameters FilterDefinition<TEntity> filter UpdateDefinition<TEntity> update Returns Task<UpdateResult> UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Declaration public Task<TEntity> UpdateAsync(TId id, ICommandRequest<TEntity> request, CancellationToken cancellationToken) Parameters TId id ICommandRequest<TEntity> request CancellationToken cancellationToken Returns Task<TEntity> Implements IRepository<TId, TEntity>.UpdateAsync(TId, ICommandRequest<TEntity>, CancellationToken) Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.MongoRepositoryProvider.html",
    "title": "Class MongoRepositoryProvider",
    "keywords": "Class MongoRepositoryProvider Inheritance object MongoRepositoryProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: SparkPlug.Persistence.MongoDb Assembly: SparkPlug.Persistence.MongoDb.dll Syntax public class MongoRepositoryProvider : IRepositoryProvider Constructors MongoRepositoryProvider(IServiceProvider) Declaration public MongoRepositoryProvider(IServiceProvider serviceProvider) Parameters IServiceProvider serviceProvider Methods GetRepository<TId, TEntity>() Declaration public IRepository<TId, TEntity> GetRepository<TId, TEntity>() where TEntity : class, IBaseEntity<TId>, new() Returns IRepository<TId, TEntity> Type Parameters TId TEntity Implements IRepositoryProvider.GetRepository<TId, TEntity>() Extension Methods EntityExtentions.Auditable<TId, TEntity>(TEntity, TId, DateTime, bool)"
  },
  "api/SparkPlug.Persistence.MongoDb.html": {
    "href": "api/SparkPlug.Persistence.MongoDb.html",
    "title": "Namespace SparkPlug.Persistence.MongoDb",
    "keywords": "Namespace SparkPlug.Persistence.MongoDb Classes Extention MongoRepositoryProvider MongoRepository<TId, TEntity>"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "SparkPlug",
    "keywords": "SparkPlug SparkPlug is an open-source project that provides a set of reusable components and templates for building web applications using ASP.NET Core and Angular. The project aims to simplify and speed up the development of web applications by providing a comprehensive set of tools and guidelines for building modern, scalable, and maintainable applications. The SparkPlug project includes several modules that provide functionality for common web application features such as authentication, authorization, logging, error handling, caching, and more. The modules are designed to be easy to use and can be easily integrated into new or existing web applications. In addition to the modules, SparkPlug also provides a set of starter templates that can be used as a starting point for new web applications. The templates include preconfigured settings for the modules, as well as sample code and documentation to help developers get up and running quickly."
  },
  "articles/Roadmap.html": {
    "href": "articles/Roadmap.html",
    "title": "SparkPlug Roadmap",
    "keywords": "SparkPlug Roadmap Framework Development Storage Abstraction and Azure storage Implementation to access and manage the files. Puppeteer Sharp project for PDF generation Common string extenstion for string Case chagse. ex. camelCase, Snake_Case, PascalCase, etc. SparkPlug.Api Load SparkPlug dependency module dynamically Composite Api Controller Template development for Composite Key tables - Workaround is sarogate Id for Composite Key tables. Data Cache implementation - Done CompositeRequest handling api development - InProgress Enable Http 2.0/3.0 in WebApi Database.EnsureCreated() move to Create Tenant api - When onboard new tenant, this will create the db schema. Database.Migrate() should be called in application Startup. SparkPlug.Persistance SparkPlug.Persistance.EntityFramework Repository should support Composite Key tables In QueryRequeset, add Exclude[] property to exclude properties in response. If we provide Exclude[] without select, It returns all the columns except Exclude properties. Filter criteria need to add in all the QueryRequest for each entity to get only live data. Filter criteria for included entity add in QueryRequest. - Done for where condition. Support Not operator for all cobinations of Filter. Like NotIn, NotEq, NotNull, etc. DB Migrations using ef migrate command. Sample Application Development Azure Authentication integration Azure Application Insights integration Sample project for Single Tenant and Multi Tenant Commandline Interface (CLI) Development Razor Template Engine Module. Don't use RazorLight dll for template engine. CLI Base Framework with help of Spectre.Console CLI for SparkPlug Infrastructure Development OPA (Open Policy Agent) based authorization module Add local machie as Azure Kubernetes worker node Istio setup in kubernetes environment DevOps Development Github Actions for CICD - In Progress Create GitHub Actions pipeline for generating SKD from OpenAPI 3.0 json file Dockerfile for dotnet 8 with AOT Compilation for apis. To be validate Json.NET (Newtonsoft.Json) can be replaced by System.Text.Json. Which framework is providing high performance Which framework is supporting Expression based query object construction. JSON.NET supportign and implemented. Child object property name also need to be in camael case in HTTP Response."
  },
  "articles/console.html": {
    "href": "articles/console.html",
    "title": "Command Line Interface (CLI)",
    "keywords": "Command Line Interface (CLI) Microsoft CLI Global tool CLI Framework - OpenSource Microsoft CLI Sample Source Code"
  },
  "articles/get-started.html": {
    "href": "articles/get-started.html",
    "title": "Configuration",
    "keywords": "Configuration { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft\": \"Warning\", \"Microsoft.Hosting.Lifetime\": \"Information\", \"SparkPlug.*\": \"Information\" } }, \"SparkPlug\": { \"Api\": { \"ApplicationName\": \"Web Api\", \"PathBase\": \"/api/v1\" }, \"SqlDb\": { \"ConnectionString\": \"\" } } } Additional connection string attribute required to ignore certificate issue in development Trust Server Certificate=true may required in connection string. SparkPlug.Api.PathBase This property refers to the application base path. If the path contains {tanant} then the application can handle multi tenant's request. The Tenat Id will be passed in the URL path. Also appsettings.json file connection string consider as tenant managemetn database. Single Tenant Application Ex. \"PathBase\" : \"/api/v1/\" Multi Tenant Application Ex. \"PathBase\" : \"/api/v1/{tanant}/\" TraceIdentifier vs CorrelationId utilizing TraceIdentifier for local request tracking within a service and CorrelationId for tracking across services in a distributed environment. Optimization dotnet counters monitor --name Api.Module.Sample --counters \"cpu-usage\" \"working-set\" dotnet-monitor collect 34136 --providers cpu memory"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "SparkPlug",
    "keywords": "SparkPlug"
  },
  "articles/modules.html": {
    "href": "articles/modules.html",
    "title": "SparkPlug Module",
    "keywords": "SparkPlug Module namespace SparkPlug.Persistence.Abstractions; public interface IModule { void AddModule(IServiceCollection services); void UseModule(IApplicationBuilder app, IServiceProvider serviceProvider); void UseMiddelwares(IApplicationBuilder app); } AddModule(IServiceCollection services): This method is responsible for configuring services that the module requires. You can use this method to register services, repositories, and other dependencies that your module needs to function properly. For example, if your module requires database access, you could register database-related services here. UseModule(IApplicationBuilder app, IServiceProvider serviceProvider): This method is intended to be used during application startup to configure the module's behavior. You can use this method to set up routes, controllers, and other components that your module provides. It's important to note that you should be cautious about modifying the app parameter, as it affects the global application configuration. UseMiddlewares(IApplicationBuilder app): This method seems to be used for setting up any middlewares specific to your module. Middlewares are components that can handle requests and responses, and they are typically placed in the request/response pipeline. This allows you to perform various tasks, such as authentication, logging, and exception handling. This method would provide a way to add middleware components specific to your module."
  },
  "articles/open-api.html": {
    "href": "articles/open-api.html",
    "title": "Open API 3.0",
    "keywords": "Open API 3.0 Swagger UI will be enabled only in development mode."
  },
  "examples/RedisCacheImpl.html": {
    "href": "examples/RedisCacheImpl.html",
    "title": "Redis IDistributedCache Implementation Examle",
    "keywords": "Redis IDistributedCache Implementation Examle using System; using System.Text; using System.Threading; using System.Threading.Tasks; using Microsoft.Extensions.Caching.Distributed; using StackExchange.Redis; namespace SparkPlug.Caching { public class RedisCache : IDistributedCache { private readonly ConnectionMultiplexer _redis; public RedisCache(ConnectionMultiplexer redis) { _redis = redis; } public byte[] Get(string key) { var db = _redis.GetDatabase(); return db.StringGet(key); } public Task<byte[]> GetAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); return db.StringGetAsync(key, token); } public void Set(string key, byte[] value, DistributedCacheEntryOptions options) { var db = _redis.GetDatabase(); var expiry = options.AbsoluteExpirationRelativeToNow; db.StringSet(key, value, expiry); } public Task SetAsync(string key, byte[] value, DistributedCacheEntryOptions options, CancellationToken token = default) { var db = _redis.GetDatabase(); var expiry = options.AbsoluteExpirationRelativeToNow; return db.StringSetAsync(key, value, expiry, token); } public void Refresh(string key) { var db = _redis.GetDatabase(); var value = db.StringGet(key); if (value.HasValue) { db.KeyExpire(key, TimeSpan.FromSeconds(30)); } } public Task RefreshAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); var value = db.StringGet(key); if (value.HasValue) { return db.KeyExpireAsync(key, TimeSpan.FromSeconds(30), token); } return Task.CompletedTask; } public void Remove(string key) { var db = _redis.GetDatabase(); db.KeyDelete(key); } public Task RemoveAsync(string key, CancellationToken token = default) { var db = _redis.GetDatabase(); return db.KeyDeleteAsync(key, token); } } }"
  },
  "examples/Reference.html": {
    "href": "examples/Reference.html",
    "title": "Reference",
    "keywords": "Reference Development Reference CQRS MediatR Ref.1, Ref. 2, Ref. 3 Azure Service Bus Ref. 1, Ref. 2, Ref. 3 (Topic) Authentication & Authrization: Ref. 1 External Identity Provider Ref. 2 Ref. 3 Ref. 4 for Mobile Ref. 5 OpenIdConnect Authentication Swashbuckle Configuration Reference Ref. 1 Ref. 2 Authorization Configuration in Swagger Environmnt Variable Template Engines WebApi Samples WebApi History 2.0 to 7.0 Dynamically Generate Controller Dotnet Tools SAST - Sonar Cloud - Code Coverage SAST - Sonar Cloud - Code Coverage DAST - owasp-zap-api-scan DAST - owasp-zap Structured Query Structured Query Example Mongo DB MongoDb Changestream Mongo DB Sample Query in JS Create Custom Configuration Provider Ref. 1, Ref. 2 Web API Dev Reference Multi Tenancy Ref. 1 Ref. 2 REST Patch Api Javascript JSON Patch Document C# Github Readme File Reference Nuget, Build, Other dotnet setup Web Api Development Reference ABP Framework Database Migration Fluent Migration Open Policy Agent OPA Playground DevOps Reference Bump Version Number C# Development - VS Code Extensions Top 10 VS Code Extension"
  },
  "examples/TODO.html": {
    "href": "examples/TODO.html",
    "title": "Todo",
    "keywords": "Todo Serializer Implmentation for ApiRequests to send as payload or querystring in SparkPlug.Contract library. a. .ToJson() RESTSharp integration to get or post data to REST API Url in SparkPlug.Contract library. a. .Get(\"/user/10\") b. .Post(\"/user\") c. .Put(\"/user\") d. .Delete(\"/user/10\") e. .Patch(\"/user/10\") SparkPlug.Api Unit Testing with MongoDb GenericTypeControllerFeatureProvider - Add controller to feature.Controllers with sapcific api verbs (only GET and POST like). - Feature rejected due to introduce service layer. Generic Cache interface need to be implement for SparkPlug.Api Distributed Cache interface implementation to cache data including Tenant information. Update or reload config if the configuration is modifyed in the cloud. Functional Module list a. RBAC based Authorization, UI Screens mappings for role b. Multi-Tenancy Management c. Workflow engine (Camunda) OpenApi with API Scope declaration and C# attribute to define scope of the API. If table contains Composite Key, Need to handle it. (CompositeApi attribute and [Key(1)], [Key(2)] attribute implement for composite key table.) Database Migration using EF migration support Include Status column in all the select, update, delete queries. Done All Rest API make it workable with MongoDb sample Application. - Done Dynamically add api version in Swagger docs. - Done Transactions handling - Done Enable Table Concurrency in API (Rev column need to add) - Done Enable Architecture / Audit columns in APIs. - Done Soft Delete (status Column) added by IDeletableEntity interface. - Done INCLUDE Foreign table columns in response for EntityFramework. - Done FilterType renamed to Kind - Done Between field operator need to implement - Done Ask Inside AddService methods, how to access IOptions instance? Geting error if we call 2 times an api (same context object used.)"
  },
  "examples/WebApi.html": {
    "href": "examples/WebApi.html",
    "title": "SparkPlug.Api",
    "keywords": "SparkPlug.Api Focused Area in this framework Authentication and authorization: Ensure that only authorized users have access to the API. Security: Use secure protocols such as SSL/TLS and implement security measures such as input validation, rate limiting, and firewalls. Scalability: Ensure that the API can handle large amounts of traffic and handle it efficiently. Performance: Optimize the API's performance to reduce response times and increase efficiency. Error handling: Implement robust error handling to ensure that the API can handle errors gracefully and provide meaningful error messages to the clients. Documentation: Provide clear and comprehensive documentation for the API, including API specifications and examples of how to use the API. Versioning: Implement API versioning to ensure that older clients can continue to work with the API even as new features are added. Monitoring and logging: Monitor the API's performance and usage to detect and diagnose issues, and log important events to help diagnose problems and improve the API. Program.cs - Done Startup.cs - Done OpenApi Configuration - Done Dependecny Injection - Done Dotnet core DI Logging Serilog SimpleConsole Tracing Azure Application Insights Configuration appsettings.json - Done Azure Vault Configuration - Kubernetes Config Map - Filters Global Exception Filter - Done Authentication Filter Exception Handling - Done Health Check Database Health Check - Done Local Resource Manual Health check Azure Service's Health Check Monitoring Azure Monitor Entity Framework Code First Create DB Schema - Done Create Migration Script Execute Migration Script Db First Configuration Validation DDD - Domain Driven Design CQRS MediatR Service Bus Integration Azure Service Bus Rabbit MQ Kafka Multi-Tenancy - Done CORS CI/CD pipleline - Done Github Actions - Done Container Docker Build Helm Chart Caching Distributed Memory Cache Distributed Redis Cache REST Api Maturity Model"
  },
  "examples/dotnet.html": {
    "href": "examples/dotnet.html",
    "title": "HTTPS Certificate for Development",
    "keywords": "HTTPS Certificate for Development dotnet dev-certs https --trust Optimized build <PublishTrimmed>true</PublishTrimmed> will gives more compiletime waring. more works required. <PropertyGroup> <PublishTrimmed>true</PublishTrimmed> <PublishSingleFile>true</PublishSingleFile> <SelfContained>true</SelfContained> </PropertyGroup> Nuget Package publish Reference The project file should be like below. Readme and license file should be included in the project file and the path should have these files. <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>net7.0</TargetFramework> <ImplicitUsings>enable</ImplicitUsings> <Nullable>enable</Nullable> <AssemblyVersion>0.0.0.1</AssemblyVersion> <FileVersion>0.0.0.1</FileVersion> <Version>0.0.1-alpha1</Version> <PackageReadmeFile>README.md</PackageReadmeFile> <PackageLicenseFile>LICENSE.txt</PackageLicenseFile> </PropertyGroup> <ItemGroup> </ItemGroup> <ItemGroup> <None Include=\"README.md\" Pack=\"true\" PackagePath=\"README.md\"/> <None Include=\"LICENSE.txt\" Pack=\"true\" PackagePath=\"LICENSE.txt\"/> </ItemGroup> </Project>"
  },
  "examples/ef-entity-relationship.html": {
    "href": "examples/ef-entity-relationship.html",
    "title": "Entity Framework Entity Relationship",
    "keywords": "Entity Framework Entity Relationship One-to-One Relationship: Suppose you have two entities named Person and Address, where a Person can have one Address and an Address belongs to one Person. The Person entity has a foreign key AddressId referencing the Address entity's primary key Id. public class Person { public int Id { get; set; } public string Name { get; set; } public int AddressId { get; set; } public Address Address { get; set; } } public class Address { public int Id { get; set; } public string Street { get; set; } public string City { get; set; } public string State { get; set; } public Person Person { get; set; } } You can configure this relationship in the OnModelCreating method like this: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .HasOne(p => p.Address) .WithOne(a => a.Person) .HasForeignKey<Person>(p => p.AddressId); } In this example, we use the HasOne method to specify that a Person has one Address, and the WithOne method to specify that an Address belongs to one Person. Finally, we use the HasForeignKey method to specify that the Person entity's AddressId property should be used as the foreign key for this relationship. One-to-Many Relationship: public class Order { public int Id { get; set; } public ICollection<OrderItem> Items { get; set; } } public class OrderItem { public int Id { get; set; } public int Quantity { get; set; } public decimal Price { get; set; } public int OrderId { get; set; } public Order Order { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Order>() .HasMany(o => o.Items) .WithOne(i => i.Order) .HasForeignKey(i => i.OrderId); Many-to-Many Relationship: public class Student { public int Id { get; set; } public string Name { get; set; } public ICollection<Course> Courses { get; set; } } public class Course { public int Id { get; set; } public string Name { get; set; } public ICollection<Student> Students { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Student>() .HasMany(s => s.Courses) .WithMany(c => c.Students) .UsingEntity(j => j.ToTable(\"StudentCourses\")); Many-to-One Relationship: public class Order { public int Id { get; set; } public Customer Customer { get; set; } public ICollection<OrderItem> Items { get; set; } } public class Customer { public int Id { get; set; } public string Name { get; set; } } public class OrderItem { public int Id { get; set; } public int Quantity { get; set; } public decimal Price { get; set; } public int OrderId { get; set; } public Order Order { get; set; } } // In the DbContext's OnModelCreating method: modelBuilder.Entity<Order>() .HasOne(o => o.Customer) .WithMany() .HasForeignKey(o => o.CustomerId); modelBuilder.Entity<Order>() .HasMany(o => o.Items) .WithOne(i => i.Order) .HasForeignKey(i => i.OrderId);"
  },
  "examples/git.html": {
    "href": "examples/git.html",
    "title": "Git",
    "keywords": "Git # Revert 1 commit from remote git push --force origin HEAD~1:main # Revert 1 commit from local git reset HEAD~1"
  },
  "examples/intro.html": {
    "href": "examples/intro.html",
    "title": "SparkPlug Examples",
    "keywords": "SparkPlug Examples"
  },
  "examples/kestral.html": {
    "href": "examples/kestral.html",
    "title": "",
    "keywords": "Set Maximum qeury string length in Kestral server { \"Kestrel\": { \"Limits\": { \"MaxQueryStringLength\": 4096 } } }"
  },
  "examples/migration.html": {
    "href": "examples/migration.html",
    "title": "Database Migration",
    "keywords": "Database Migration dotnet ef migrations --list dotnet ef migrations add InitialCreate --project ./src/SparkPlug.Persistence.EntityFramework --startup-project ./samples/Api.Module.Sample --context TenantDbContext"
  },
  "examples/modules.html": {
    "href": "examples/modules.html",
    "title": "Module Dependency",
    "keywords": "Module Dependency SparkPlug.Business. .Domain SparkPlug.Persistence.Abstractions SparkPlug.Business. .Repository.Sql SparkPlug.Persistence.Abstractions SparkPlug.Persistence.EntityFramework SparkPlug. .Domain SparkPlug.Business. .Repository.Mongo SparkPlug.Persistence.Abstractions SparkPlug.Persistence.MongoDb SparkPlug.Business. .Domain SparkPlug.Business. .Service SparkPlug.Contracts SparkPlug.Persistence.Abstractions SparkPlug.Business. .Domain SparkPlug.Business. .Api SparkPlug.Contracts SparkPlug.Api SparkPlug.Business. .Service Application SparkPlug. .Host SparkPlug.Business. .Api SparkPlug.Business. .Api SparkPlug.Business. .Api"
  },
  "examples/postgresql.html": {
    "href": "examples/postgresql.html",
    "title": "Sample Connection String",
    "keywords": "Sample Connection String Server=sssssss.postgres.database.azure.com;Database=ddddddd;Port=5432;User Id=uuuuuuu;Password=ppppppp;Ssl Mode=Require;Trust Server Certificate=true;Search Path=tenant_1,public Note: Search Path denotes that tenants' schema if the the tenant is not using defalt schema. Search Path will containe comma separated schema names like example connection string Search Path=tenant_1,public. TenantOptions \"DbConfig:ConnectionString\" Create new Schema CREATE SCHEMA tenant_1; List Schema SELECT schema_name FROM information_schema.schemata; Switch Schema SET search_path TO tenant_1; Converty the type of a column from one type to another ALTER TABLE tenant_1.\"MenuItem\" ALTER COLUMN \"Properties\" TYPE json USING \"Properties\"::json; Get the data type for a column SELECT column_name, data_type FROM information_schema.columns WHERE table_name = 'MenuItem' AND column_name = 'Properties'; JSON in postgresql .Net Reference"
  },
  "examples/rbac.html": {
    "href": "examples/rbac.html",
    "title": "RBAC Spec",
    "keywords": "RBAC Spec Models Resources Id Resource // 3. Verb Scops Ex: Id scope scope-group resource 1 read user-mgt get /user/{id}, 2 write user-mgt post /user/{id} 3 read user-mgt get /user/{id}/profile 3 manage user-mgt get /user/{id}/profile Id scopes scope-group resource 1 read, write, manage user-mgt /user/{id} Scope Read, Query, Write, Message, Users Id User Groups Id Group UserGroups UserId GroupId Roles Id Name RoleResourcePermissionMap Permissions Id Tools: Platform tools Kubernetes Helm OPA - Open Policy Agent Redis / TIKV / Inmemroy Cache Postgre SQL Database observability and monitoring OpenTelemetry Instrumentation Libraries: These libraries are integrated into your application code to automatically generate telemetry data, including traces, metrics, and contextual information. They provide the foundation for collecting observability data from your services. OpenTelemetry Collector: The collector is a central component that receives, processes, and exports telemetry data. It can be configured to gather data from OpenTelemetry-instrumented applications and then route that data to different backends for further analysis and visualization. Jaeger or Zipkin: These distributed tracing systems can receive trace data from the OpenTelemetry Collector. They allow you to visualize the flow of requests across your microservices, identify bottlenecks, and analyze the latency of individual service calls. Prometheus: Prometheus can be used alongside OpenTelemetry for metrics collection and monitoring. The OpenTelemetry Collector can export metrics data to Prometheus, which can then be used to create dashboards, set up alerts, and perform long-term metrics analysis. Grafana: Grafana can be used to visualize telemetry data collected by various sources, including Jaeger, Prometheus, and other OpenTelemetry exporters. You can create custom dashboards to display traces, metrics, and logs, providing a unified view of your system's observability data. Loki / Elasticsearch : While not directly part of OpenTelemetry, Loki can complement your observability stack by collecting logs and integrating with Grafana for log visualization and analysis. When deploying these tools together, consider the following: Integration and Compatibility: Ensure that the versions of the tools you choose are compatible with each other. Check the documentation and recommended setups for any integration considerations. Resource Utilization: Keep in mind the resource requirements of each tool when deploying them. Distributed tracing systems like Jaeger and metrics databases like Prometheus can consume resources, so proper resource planning is important. Configuration and Setup: Each tool may require configuration and setup. Plan how data flows between the tools, configure exporters, and create appropriate dashboards. Monitoring and Maintenance: Regularly monitor the health and performance of your observability stack. Update the tools and configurations as needed to adapt to changes in your application and infrastructure."
  },
  "examples/sample-request.html": {
    "href": "examples/sample-request.html",
    "title": "sample Query Request",
    "keywords": "sample Query Request { \"select\": [ \"PersonName\", \"Department\", \"Salary\", \"Id\" ], \"where\": { \"op\": 0, \"filterType\": 0, \"filters\": [{ \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Demo\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": 1 }, { \"field\": \"Salary\", \"direction\": 1 } ], \"page\": { \"pageNo\": 2, \"pageSize\": 0 } } ## Sample request with Includes options. { \"select\": [ \"PersonName\", \"Department\", \"Salary\", \"Id\", \"Address\" ], \"includes\": [ { \"name\": \"Address\", \"select\": [\"Id\", \"Street\"] } ], \"where\": { \"op\": 1, \"filterType\": 0, \"filters\": [{ \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Demo1\" }, { \"filterType\": 1, \"field\": \"PersonName\", \"op\": 0, \"value\": \"Natarajan Ganapathi\" }] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": 1 }, { \"field\": \"Salary\", \"direction\": 1 } ], \"page\": { \"pageNo\": 1, \"pageSize\": 10 } } Sample Request with ENUM as String { \"select\": [\"personName\", \"Department\", \"Salary\", \"id\", \"address\"], \"includes\": [ { \"name\": \"Address\", \"select\": [\"Id\", \"Street\"] } ], \"where\": { \"filterType\": \"COMPOSITE\", \"op\": \"OR\", \"filters\": [ { \"filterType\": \"FIELD\", \"op\": \"EQUAL\", \"field\": \"department\", \"value\": \"IT\" }, { \"filterType\": \"FIELD\", \"op\": \"EQUAL\", \"field\": \"PersonName\", \"value\": \"Demo User\" } ] }, \"sort\": [ { \"field\": \"PersonName\", \"direction\": \"DESC\" }, { \"field\": \"Salary\", \"direction\": \"ASC\" } ], \"page\": { \"pageNo\": 1, \"pageSize\": 10 } } C# Include child tables var users = context.Users .Include(u => u.Address) .Include(u => u.Profile) .Select(u => new { u.Id, u.Name, Address = new { u.Address.Street, u.Address.City }, Profile = new { u.Profile.Bio, u.Profile.Age } }) .ToList(); var users = context.Users .Include(u => u.Address) .Select(u => new { u.Id, u.PersonName, u.MobileNo, Address = new { u.Address.Id, u.Address.FlatNo } }) .ToList(); Sample Request for Patch Document Sample Request object to update the MenuItem object { \"data\": [ { \"op\": \"replace\", \"path\": \"/moduleCode\", \"value\": \"App Developer Module\" }, { \"op\": \"replace\", \"path\": \"/menuCode\", \"value\": \"AppDev\" } ] }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome to SparkPlug",
    "keywords": "Welcome to SparkPlug"
  }
}